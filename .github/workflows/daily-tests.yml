name: Daily Tests
on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches: ['984/automated-setup-script-testing']

env:
  PROJECT_ID: '5c29cd00-8df3-447b-aa49-2e65d262388c'
  NODE_VERSION: '18'
  NPM_VERSION: '9'
  TEST_EMAIL: 'gschneider@masslight.com'
  AUTH_URL: 'https://auth.zapehr.com/oauth/token'
  AUD_URL: 'https://api.zapehr.com'

jobs:
  e2e-test:
    if: ${{ false }}  # temporary disable
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: testing
    env:
      SECRETS_REPOSITORY: ${{ vars.SECRETS_REPOSITORY }} # Secrets repository for configuration files
    steps:
      - uses: actions/checkout@v4
        with:
          ref: 984/automated-setup-script-testing

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - run: npm install -g npm@${{ env.NPM_VERSION }}

      - name: Get Access Token
        id: get-token
        run: |
          token=$(curl -s -X POST "${{ env.AUTH_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "client_id": "${{ secrets.DAILY_TEST_M2M_CLIENT_ID }}",
              "client_secret": "${{ secrets.DAILY_TEST_M2M_CLIENT_SECRET }}",
              "audience": "${{ env.AUD_URL }}",
              "grant_type": "client_credentials"
            }' | jq -r '.access_token')
          echo "access_token=$token" >> $GITHUB_OUTPUT

      - name: Run setup script
        run: |
          chmod +x scripts/ottehr-setup.sh
          ./scripts/ottehr-setup.sh \
            "${{ env.PROJECT_ID }}" \
            "${{ steps.get-token.outputs.access_token }}" \
            "${{ env.TEST_EMAIL }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache user.json
        uses: actions/cache@v3
        with:
          path: apps/intake/playwright/user.json
          key: user-json-cache
      - name: Check out secrets repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SECRETS_REPOSITORY }}
          ssh-key: ${{ secrets.DEPLOY_OTTEHR_KEY }}
          path: 'secrets'

      - name: Setup environment
        run: |
          setup_env() {
            local app=$1
            mkdir -p "packages/zambdas/.env"
            cp secrets/zambdas/* "packages/zambdas/.env"
            mkdir -p "apps/$app/env"
            cp "secrets/$app/app/tests."*.json "apps/$app/env/"
            cp "secrets/$app/app/.env.local" "apps/$app/env/"
            cp -f "secrets/${app}/app/tests.clean-setup.json" "apps/${app}/env/tests.local.json"
          }

          for app in ehr intake; do
            setup_env "$app"
          done

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Run test-setup script
        run: |
          chmod +x scripts/e2e-test-setup.sh
          ./scripts/e2e-test-setup.sh --skip-prompts

      - name: Run E2E tests on the EHR application
        run: npm run ehr:e2e:local
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-ehr
          path: |
            apps/ehr/playwright-report/
            apps/ehr/test-results/
          retention-days: 30

      - name: Run E2E tests on the Intake application
        run: npm run intake:e2e:local
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-intake
          path: |
            apps/intake/playwright-report/
            apps/intake/test-results/
          retention-days: 30

      - name: Validate user.json
        id: validate
        continue-on-error: true
        run: |
          node -e '
          const fs = require("fs");
          const path = "apps/intake/playwright/user.json";

          try {
            console.log("Starting user.json processing...");

            if (!fs.existsSync(path)) {
              console.log(`File ${path} does not exist, exiting`);
              process.exit(1);
            }

            console.log("Reading user.json file...");
            const data = JSON.parse(fs.readFileSync(path, "utf8"));
            console.log("Successfully parsed user.json");

            const hasAuth0Token = data.origins?.some(origin => 
              origin.localStorage && 
              origin.localStorage.some(item => item.name?.includes?.("auth0"))
            );

            console.log("Has Auth0 token:", hasAuth0Token);

            if (!hasAuth0Token) {
              console.log("No Auth0 token found, exiting");
              process.exit(1);
            }

            console.log("User.json validated successfully");
          } catch (error) {
            console.error("Error occurred:", error);
            console.error("Error stack:", error.stack);
            process.exit(1);
          }
          '

      - name: Save user.json to cache
        if: always() && steps.validate.outcome == 'success'
        uses: actions/cache@v3
        with:
          path: apps/intake/playwright/user.json
          key: user-json-cache

      - name: Run the cleanup script
        if: always()
        run: |
          chmod +x scripts/ottehr-cleanup.sh
          ./scripts/ottehr-cleanup.sh \
            "${{ env.PROJECT_ID }}" \
            "${{ steps.get-token.outputs.access_token }}"
