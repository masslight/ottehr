name: Intake E2E Tests

env:
  NODE_VERSION: 20
  TOKEN_VALIDITY_THRESHOLD_MINUTES: 60
  TEST_RESULTS_CACHE_RETENTION_DAYS: 30
  SECRETS_REPO: masslight/ottehr-secrets
  USER_JSON_CACHE_KEY: intake-playwright-user-${{ github.event.inputs.environment || 'local' }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
  USER_JSON_CACHE_RESTORE_KEYS: intake-playwright-user-${{ github.event.inputs.environment || 'local' }}-
  PLAYWRIGHT_CACHE_PATH: ~/.cache/ms-playwright
  USER_JSON_PATH: apps/intake/playwright/user.json


on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests on'
        required: true
        type: choice
        options:
          - local
          - testing
          - development
          - staging
          - demo
        default: 'local'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop, 'release/**']
    paths:
      - 'apps/intake/**'
      - 'packages/zambdas/**'
      - 'packages/utils/**'
      - 'packages/ui-components/**'
      - '.github/**'
      - '.prettierignore'
      - 'package.json'

jobs:
  check-token-validity:
    if: (github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      needs-login: ${{ steps.token-check.outputs.needs-login }}
    steps:
      - name: Try restore user.json cache
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.USER_JSON_PATH }}
          key: ${{ env.USER_JSON_CACHE_KEY }}
          restore-keys: ${{ env.USER_JSON_CACHE_RESTORE_KEYS }}

      - name: Check token validity
        id: token-check
        run: |
          if [ ! -f "${{ env.USER_JSON_PATH }}" ]; then
            echo "needs-login=true" >> $GITHUB_OUTPUT
            echo "No user.json found, login required"
            exit 0
          fi
          
          echo "=== FILE EXISTS, CHECKING CONTENT ==="
          echo "File size: $(wc -c < "${{ env.USER_JSON_PATH }}")"
          echo "=================================="
          
          if node -e '
          const fs = require("fs");
          try {
            const data = JSON.parse(fs.readFileSync("${{ env.USER_JSON_PATH }}", "utf8"));
            
            console.log("Origins count:", data.origins?.length || 0);
            
            const origin = data.origins?.find(o => 
              o.localStorage?.some(item => 
                item.name?.includes("@@auth0spajs@@") && 
                !item.name?.includes("@@user@@") &&
                item.value?.includes("expiresAt")
              )
            );

            if (!origin) {
              console.error("ERROR: No origin with Auth0 token found");
              process.exit(1);
            }
            
            console.log("Found origin with Auth0 token");
            
            const authItem = origin.localStorage?.find(item => 
              item.name?.includes("@@auth0spajs@@") && 
              !item.name?.includes("@@user@@") &&
              item.value?.includes("expiresAt")
            );
          
            if (!authItem) {
              console.error("ERROR: No Auth0 token found");
              process.exit(1);
            }
          
            console.log("Found Auth0 token item");
            
            const tokenData = JSON.parse(authItem.value);
            const expiresAt = tokenData.expiresAt * 1000;
            const timeLeft = (expiresAt - Date.now()) / (1000 * 60);
          
            console.log(`Time left: ${timeLeft.toFixed(1)} minutes`);
          
            if (timeLeft > ${{ env.TOKEN_VALIDITY_THRESHOLD_MINUTES }}) {
              console.log("Token valid, skip login");
              process.exit(0);
            } else {
              console.log("Token expires soon, need fresh login");
              process.exit(1);
            }
          } catch (e) {
            console.error("Token check failed:", e.message);
            process.exit(1);
          }
          '; then
            NEEDS_LOGIN="false"
            echo "Token is valid, skipping login"
          else
            NEEDS_LOGIN="true" 
            echo "Token invalid or expired, login required"
          fi
          
          echo "needs-login=$NEEDS_LOGIN" >> $GITHUB_OUTPUT

  intake-login:
    needs: check-token-validity
    if: needs.check-token-validity.outputs.needs-login == 'true'
    concurrency: # to prevent parallel login jobs; we can optimize it and eliminate user.json related steps when we have email login
      group: intake-login
      cancel-in-progress: false
    runs-on: ubuntu-latest
    timeout-minutes: 18 # Sometimes SMS takes ~5 minutes to deliver, and with other timeouts, all login tests can take ~9 minutes. Playwright has 2 retries for intake CI, so we need a login job timeout of 18 minutes.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Cache Playwright browsers
        id: playwright-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.PLAYWRIGHT_CACHE_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Try restore user.json cache
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.USER_JSON_PATH }}
          key: ${{ env.USER_JSON_CACHE_KEY }}
          restore-keys: ${{ env.USER_JSON_CACHE_RESTORE_KEYS }}              

      - name: Check out secrets repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SECRETS_REPO }}
          ssh-key: ${{ secrets.DEPLOY_OTTEHR_KEY }}
          path: 'secrets'

      - name: Setup environment
        run: |
          setup_env() {
            mkdir -p "packages/zambdas/.env"
            cp secrets/zambdas/* "packages/zambdas/.env"
            mkdir -p "apps/$app/env"
            cp "secrets/$app/app/tests."*.json "apps/$app/env/"
            cp "secrets/$app/app/.env"* "apps/$app/env/"
          }
      
          for app in ehr intake; do
            setup_env "$app"
          done

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Run login
        id: login
        run: npm run intake:e2e:${{ github.event.inputs.environment || 'local' }}:login
        env:
          CI: true

      - name: Validate user.json
        if: steps.login.outcome == 'success'
        id: validate
        run: |
          node -e '
          const fs = require("fs");
          const path = "${{ env.USER_JSON_PATH }}";

          if (!fs.existsSync(path)) {
            console.log(`File ${path} does not exist`);
            process.exit(1);
          }
          
          const data = JSON.parse(fs.readFileSync(path, "utf8"));
          
          const hasAuth0Token = data.origins?.some(origin => 
            origin.localStorage && 
            origin.localStorage.some(item => item.name?.includes?.("auth0"))
          );
          
          if (!hasAuth0Token) {
            console.log("No Auth0 token found");
            process.exit(1);
          }
          
          console.log("User.json validated successfully");
          '

      - name: Save user.json to cache
        if: steps.validate.outcome == 'success'
        uses: actions/cache/save@v4
        with:
          path: ${{ env.USER_JSON_PATH }}
          key: ${{ env.USER_JSON_CACHE_KEY }}

      - name: Upload login test results
        if: steps.login.outcome == 'success' || steps.login.outcome == 'failure' # log on success needed for investigate false success caces, we can remove it if login will work stable
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-intake-login-${{ github.event.inputs.environment || 'local' }}
          path: |
            apps/intake/playwright-report-login/
            apps/intake/test-results-login/
          retention-days: ${{ fromJson(env.TEST_RESULTS_CACHE_RETENTION_DAYS) }}      

  intake-e2e-tests:
    needs: [check-token-validity, intake-login]
    if: |
      always() && !cancelled() && 
      (github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch') &&
      (
        needs.check-token-validity.outputs.needs-login == 'false' ||
        needs.intake-login.result == 'success'
      )
    runs-on: ubuntu-latest-8-cores
    timeout-minutes: 25
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules
        id: npm-cache-restore
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        if: steps.npm-cache-restore.outputs.cache-hit != 'true'
        run: npm ci

      - name: Restore Playwright browsers
        uses: actions/cache@v4
        with:
          path: ${{ env.PLAYWRIGHT_CACHE_PATH }}
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Restore user.json cache
        uses: actions/cache@v4
        with:
          path: ${{ env.USER_JSON_PATH }}
          key: ${{ env.USER_JSON_CACHE_KEY }}
          restore-keys: ${{ env.USER_JSON_CACHE_RESTORE_KEYS }}
          fail-on-cache-miss: ${{ needs.intake-login.result == 'success' }}

      - name: Check out secrets repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.SECRETS_REPO }}
          ssh-key: ${{ secrets.DEPLOY_OTTEHR_KEY }}
          path: 'secrets'

      - name: Setup environment
        run: |
          setup_env() {
            mkdir -p "packages/zambdas/.env"
            cp secrets/zambdas/* "packages/zambdas/.env"
            mkdir -p "apps/$app/env"
            cp "secrets/$app/app/tests."*.json "apps/$app/env/"
            cp "secrets/$app/app/.env"* "apps/$app/env/"
          }
      
          for app in ehr intake; do
            setup_env "$app"
          done
      
      - name: Run E2E tests
        run: |
          if [ "${{ github.event.inputs.environment }}" == "local" ] || [ "${{ github.event_name }}" == "pull_request" ]; then
            npm run intake:e2e:local:specs
          else
            npm run intake:e2e:${{ github.event.inputs.environment }}:specs
          fi
        env:
          CI: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-intake-${{ github.event.inputs.environment || 'local' }}
          path: |
            apps/intake/playwright-report/
            apps/intake/test-results/
          retention-days: ${{ fromJson(env.TEST_RESULTS_CACHE_RETENTION_DAYS) }}