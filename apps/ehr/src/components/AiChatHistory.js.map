{"version":3,"file":"AiChatHistory.js","sourceRoot":"","sources":["AiChatHistory.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ottehrDarkBlue } from '@ehrTheme/icons';\nimport { Avatar, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { Questionnaire, QuestionnaireResponse } from 'fhir/r4b';\nimport { FC, useEffect, useRef } from 'react';\n\nconst MESSAGES_CONTAINER_ID = 'messages-container';\n\nexport interface AiChatHistoryProps {\n  questionnaireResponse?: QuestionnaireResponse;\n  unprocessedUserAnswer?: string;\n  aiLoading?: boolean;\n  scrollToBottomOnUpdate?: boolean;\n}\n\ninterface Message {\n  linkId: string;\n  author: 'user' | 'ai';\n  text: string;\n}\n\nexport const AiChatHistory: FC<AiChatHistoryProps> = ({\n  questionnaireResponse,\n  unprocessedUserAnswer,\n  aiLoading,\n  scrollToBottomOnUpdate,\n}) => {\n  const messages = createMessages(questionnaireResponse);\n  if (aiLoading) {\n    if (unprocessedUserAnswer != null) {\n      messages.push({\n        linkId: '1000000',\n        author: 'user',\n        text: unprocessedUserAnswer,\n      });\n    }\n    messages.push({\n      linkId: '1000001',\n      author: 'ai',\n      text: '...',\n    });\n  }\n\n  const bottomRef = useRef<null | HTMLDivElement>(null);\n  useEffect(() => {\n    if (scrollToBottomOnUpdate === true) {\n      bottomRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n  });\n\n  return (\n    <Box id={MESSAGES_CONTAINER_ID}>\n      {messages.map((message) => (\n        <Box\n          key={message.author + ':' + message.linkId}\n          style={{\n            display: 'flex',\n            alignItems: 'flex-start',\n            justifyContent: message.author === 'ai' ? 'flex-start' : 'flex-end',\n            marginBottom: message.author === 'ai' ? '10px' : '18px',\n          }}\n        >\n          {message.author === 'ai' && <img src={ottehrDarkBlue} style={{ width: '24px', marginRight: '10px' }} />}\n          <Typography\n            variant=\"body1\"\n            key={message.linkId + '-' + message.author}\n            style={{\n              background: message.author === 'user' ? 'rgba(244, 246, 248, 1)' : 'none',\n              borderRadius: '4px',\n              padding: '8px',\n              paddingTop: message.author === 'ai' ? '0' : '8px',\n              paddingLeft: message.author === 'ai' ? '0' : '8px',\n              width: 'fit-content',\n            }}\n          >\n            {message.text}\n          </Typography>\n          {message.author === 'user' && <Avatar style={{ width: '24px', height: '24px', marginLeft: '10px' }} />}\n        </Box>\n      ))}\n      <div ref={bottomRef} />\n    </Box>\n  );\n};\n\nfunction createMessages(questionnaireResponse: QuestionnaireResponse | undefined): Message[] {\n  if (questionnaireResponse == null) {\n    return [];\n  }\n  const questionnaire = questionnaireResponse.contained?.[0] as Questionnaire;\n  return (\n    questionnaire.item\n      ?.sort((itemA, itemB) => parseInt(itemA.linkId) - parseInt(itemB.linkId))\n      ?.flatMap<Message>((questionItem) => {\n        const answerItem = questionnaireResponse.item?.find((answerItem) => answerItem.linkId === questionItem.linkId);\n        if (questionItem.linkId == '0') {\n          return [];\n        }\n        const result: Message[] = [{ linkId: questionItem.linkId, author: 'ai', text: questionItem.text ?? '' }];\n        const answerText = answerItem?.answer?.[0]?.valueString;\n        if (answerText != null) {\n          result.push({\n            linkId: questionItem.linkId,\n            author: 'user',\n            text: answerItem?.answer?.[0]?.valueString ?? '',\n          });\n        }\n        return result;\n      }) ?? []\n  );\n}\n"]}