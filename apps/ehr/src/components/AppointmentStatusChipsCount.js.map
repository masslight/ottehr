{"version":3,"file":"AppointmentStatusChipsCount.js","sourceRoot":"","sources":["AppointmentStatusChipsCount.tsx"],"names":[],"mappings":";;;AAAA,0CAAoC;AAGpC,sCAAkD;AAClD,6DAAiE;AAMjE,IAAM,YAAY,GAAG;IACnB,SAAS;IACT,SAAS;IACT,OAAO;IACP,QAAQ;IACR,oBAAoB;IACpB,UAAU;IACV,YAAY;IACZ,aAAa;IACb,UAAU;IACV,SAAS;IACT,eAAe;IACf,SAAS;CACV,CAAC;AACK,IAAM,4BAA4B,GAAG,UAAC,EAAiC;QAA/B,YAAY,kBAAA;IACzD,IAAM,YAAY,GAAG,IAAA,8BAAoB,EAAC,YAAY,CAAC,CAAC;IAExD,OAAO,CACL,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CACjF;MAAA,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC;aACtB,IAAI,CACH,UAAC,EAAsB,EAAE,EAAsB;gBAA7C,SAAS,QAAA,EAAE,SAAS,QAAA;gBAAI,SAAS,QAAA,EAAE,SAAS,QAAA;YAC5C,OAAA,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC;QAAjE,CAAiE,CACpE;aACA,GAAG,CAAC,UAAC,EAAe;gBAAd,MAAM,QAAA,EAAE,KAAK,QAAA;YAAM,OAAA,CACxB,CAAC,cAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAA,8CAAwB,EAAC,MAAM,EAAE,KAAK,CAAC,CAAC,EAAE,cAAG,CAAC,CAClE;QAFyB,CAEzB,CAAC,CACN;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAfW,QAAA,4BAA4B,gCAevC","sourcesContent":["import { Box } from '@mui/material';\nimport { ReactElement } from 'react';\nimport { InPersonAppointmentInformation } from 'utils';\nimport { classifyAppointments } from '../helpers';\nimport { getAppointmentStatusChip } from './AppointmentTableRow';\n\nexport interface AppointmentChip {\n  appointments: InPersonAppointmentInformation[];\n}\n\nconst ORDER_STATUS = [\n  'pending',\n  'arrived',\n  'ready',\n  'intake',\n  'ready for provider',\n  'provider',\n  'discharged',\n  'checked out',\n  'canceled',\n  'no show',\n  'left not seen',\n  'unknown',\n];\nexport const AppointmentsStatusChipsCount = ({ appointments }: AppointmentChip): ReactElement => {\n  const statusCounts = classifyAppointments(appointments);\n\n  return (\n    <Box sx={{ display: 'flex', gap: 2, padding: 2, paddingLeft: 0, flexWrap: 'wrap' }}>\n      {Array.from(statusCounts)\n        .sort(\n          ([statusOne, _countOne], [statusTwo, _countTwo]) =>\n            ORDER_STATUS.indexOf(statusOne) - ORDER_STATUS.indexOf(statusTwo)\n        )\n        .map(([status, count]) => (\n          <Box key={status}>{getAppointmentStatusChip(status, count)}</Box>\n        ))}\n    </Box>\n  );\n};\n"]}