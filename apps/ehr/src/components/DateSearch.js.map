{"version":3,"file":"DateSearch.js","sourceRoot":"","sources":["DateSearch.tsx"],"names":[],"mappings":"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","sourcesContent":["import { TextFieldProps } from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers';\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { LocalizationProvider } from '@mui/x-date-pickers-pro';\nimport { DateTime } from 'luxon';\nimport { ReactElement, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { dataTestIds } from '../constants/data-test-ids';\n\nexport type CustomFormEventHandler = (event: React.FormEvent<HTMLFormElement>, value: any, field: string) => void;\n\ninterface DateSearchProps {\n  date: DateTime | null;\n  setDate: (dateTime: DateTime | null) => void;\n  defaultValue?: DateTime | null;\n  updateURL?: boolean;\n  storeDateInLocalStorage?: boolean;\n  label?: string;\n  queryParams?: URLSearchParams;\n  required?: boolean;\n  disabled?: boolean;\n  disableDates?: (day: DateTime) => boolean;\n  closeOnSelect?: boolean;\n  handleSubmit?: CustomFormEventHandler;\n  small?: boolean;\n  setIsValidDate?: (isValid: boolean) => void;\n  'data-testid'?: string;\n}\n\nexport default function DateSearch({\n  date,\n  setDate,\n  defaultValue,\n  updateURL,\n  storeDateInLocalStorage,\n  label,\n  queryParams,\n  required,\n  disabled,\n  disableDates,\n  closeOnSelect,\n  handleSubmit,\n  small,\n  setIsValidDate: setValidDate,\n  'data-testid': dataTestId,\n}: DateSearchProps): ReactElement {\n  const [error, setError] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const formatDate = typeof date === 'object' ? date?.toISODate() : date;\n  const searchDate = queryParams?.get('searchDate') || formatDate;\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (updateURL && localStorage.getItem('selectedDate')) {\n      queryParams?.set('searchDate', JSON.parse(localStorage.getItem('selectedDate') ?? '') ?? '');\n      navigate(`?${queryParams?.toString()}`);\n    }\n  }, [navigate, queryParams, updateURL]);\n\n  const handleDatePickerChange = (date: DateTime | null, event: any): void => {\n    if (typeof date === 'object' && date?.toISODate()) {\n      setError(false);\n      setErrorMessage('');\n      setDate(date);\n      if (setValidDate) {\n        setValidDate(true);\n      }\n\n      if (storeDateInLocalStorage) {\n        if (date) {\n          localStorage.setItem('selectedDate', JSON.stringify(date.toISODate()));\n        } else {\n          localStorage.removeItem('selectedDate');\n        }\n      }\n\n      if (handleSubmit) {\n        handleSubmit(event, date, 'date');\n      }\n    } else {\n      setErrorMessage('please enter date in format MM/DD/YYYY');\n      setError(true);\n      setDate(date);\n      if (setValidDate) {\n        setValidDate(false);\n      }\n    }\n  };\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterLuxon}>\n      <DatePicker\n        label={label ?? 'Date'}\n        onChange={handleDatePickerChange}\n        format={'MM/dd/yyyy'}\n        slotProps={{\n          textField: {\n            style: { width: '100%' },\n            required: required,\n            error: error,\n            helperText: errorMessage,\n            name: 'date',\n            id: 'appointment-date',\n            label: label ?? 'Date',\n            size: small ? 'small' : 'medium',\n            'data-testid': dataTestId,\n          } as TextFieldProps,\n          actionBar: {\n            actions: ['today'],\n            // @ts-expect-error - that's valid field\n            'data-testid': dataTestIds.dashboard.datePickerTodayButton,\n          },\n        }}\n        closeOnSelect={closeOnSelect}\n        disabled={disabled}\n        shouldDisableDate={disableDates}\n        value={storeDateInLocalStorage ? (searchDate ? DateTime.fromISO(searchDate) : defaultValue) : date}\n      />\n    </LocalizationProvider>\n  );\n}\n"]}