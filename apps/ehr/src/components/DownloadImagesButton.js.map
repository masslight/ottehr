{"version":3,"file":"DownloadImagesButton.js","sourceRoot":"","sources":["DownloadImagesButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Button, Link as MUILink } from '@mui/material';\nimport { ReactElement } from 'react';\nimport { DocumentInfo } from '../types/types';\n\ninterface DownloadImagesButtonProps {\n  appointmentId: string;\n  cards: DocumentInfo[];\n  fullCardPdf?: DocumentInfo | undefined;\n  title: string;\n}\n\nfunction parseFiletype(fileUrl: string): string {\n  const filetype = fileUrl.match(/\\w+$/)?.[0];\n  if (filetype) {\n    return filetype;\n  } else {\n    throw new Error('Failed to parse filetype from url');\n  }\n}\n\nconst DownloadImagesButton = ({\n  appointmentId,\n  cards,\n  fullCardPdf,\n  title,\n}: DownloadImagesButtonProps): ReactElement => {\n  const handleDownload = async (): Promise<void> => {\n    try {\n      for (const card of cards) {\n        if (card.presignedUrl) {\n          const fileType = parseFiletype(card.z3Url);\n\n          fetch(card.presignedUrl, { method: 'GET', headers: { 'Cache-Control': 'no-cache' } })\n            .then((response) => {\n              if (!response.ok) {\n                throw new Error('failed to fetch image from presigned url');\n              }\n              return response.blob();\n            })\n            .then((blob) => {\n              const url = window.URL.createObjectURL(new Blob([blob]));\n              const link = document.createElement('a');\n              link.href = url;\n              link.download = `${appointmentId}-${card.type}.${fileType}`;\n              link.style.display = 'none';\n              document.body.appendChild(link);\n              link.click();\n              document.body.removeChild(link);\n            })\n            .catch((error) => {\n              throw new Error(error);\n            });\n        }\n      }\n    } catch (error) {\n      console.error('Error downloading image:', error);\n    }\n  };\n\n  return fullCardPdf?.presignedUrl ? (\n    <MUILink href={fullCardPdf.presignedUrl} target=\"_blank\">\n      <Button\n        variant=\"outlined\"\n        sx={{\n          borderRadius: '100px',\n          fontWeight: 500,\n          textTransform: 'none',\n        }}\n        size=\"medium\"\n      >\n        {title}\n      </Button>\n    </MUILink>\n  ) : (\n    <Button\n      variant=\"outlined\"\n      sx={{\n        borderRadius: '100px',\n        fontWeight: 500,\n        textTransform: 'none',\n      }}\n      size=\"medium\"\n      onClick={handleDownload}\n    >\n      {title}\n    </Button>\n  );\n};\n\nexport default DownloadImagesButton;\n"]}