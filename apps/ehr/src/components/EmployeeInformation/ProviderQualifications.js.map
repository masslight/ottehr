{"version":3,"file":"ProviderQualifications.js","sourceRoot":"","sources":["ProviderQualifications.tsx"],"names":[],"mappings":"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","sourcesContent":["import { otherColors } from '@ehrTheme/colors';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport {\n  Card,\n  FormControl,\n  FormLabel,\n  IconButton,\n  Stack,\n  Switch,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material';\nimport { Autocomplete, TextField } from '@mui/material';\nimport { DatePicker, LocalizationProvider } from '@mui/x-date-pickers';\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { DateTime } from 'luxon';\nimport { Control, Controller } from 'react-hook-form';\nimport { AllStates, PractitionerLicense, PractitionerQualificationCodesLabels } from 'utils';\nimport { dataTestIds } from '../../constants/data-test-ids';\nimport { RoundedButton } from '../RoundedButton';\nimport { FormErrors } from './types';\n\nconst displayStates = AllStates.map((state) => state.value);\n\ninterface ProviderQualificationsProps {\n  control: Control<any>;\n  errors: FormErrors;\n  handleAddLicense: () => void;\n  newLicenses: PractitionerLicense[];\n  setNewLicenses: (licenses: PractitionerLicense[]) => void;\n}\n\nexport function ProviderQualifications({\n  control,\n  errors,\n  handleAddLicense,\n  newLicenses,\n  setNewLicenses,\n}: ProviderQualificationsProps): JSX.Element {\n  return (\n    <FormControl sx={{ width: '100%' }}>\n      <FormLabel sx={{ mt: 3, fontWeight: '600 !important' }}>Provider Qualifications</FormLabel>\n      <Stack mt={1} gap={2}>\n        <TableContainer>\n          <Table data-testid={dataTestIds.employeesPage.qualificationsTable}>\n            <TableHead>\n              <TableRow>\n                <TableCell>State</TableCell>\n                <TableCell align=\"left\">Qualification</TableCell>\n                <TableCell align=\"left\">License</TableCell>\n                <TableCell align=\"left\">Operate in state</TableCell>\n                <TableCell align=\"left\">Delete License</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {newLicenses.map((license, index) => (\n                <TableRow key={index} data-testid={dataTestIds.employeesPage.qualificationRow(license.code)}>\n                  <TableCell>{license.state}</TableCell>\n                  <TableCell align=\"left\">{license.code}</TableCell>\n                  <TableCell align=\"left\">\n                    {license.number && <Typography>{license.number}</Typography>}\n                    {license.date && (\n                      <Typography variant=\"body2\" color=\"secondary.light\">\n                        till {DateTime.fromISO(license.date).toFormat('MM/dd/yyyy')}\n                      </Typography>\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <Switch\n                      checked={license.active}\n                      onChange={async () => {\n                        const updatedLicenses = [...newLicenses];\n                        updatedLicenses[index].active = !updatedLicenses[index].active;\n                        setNewLicenses(updatedLicenses);\n                      }}\n                    />\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <IconButton\n                      sx={{\n                        color: 'error.dark',\n                        ':hover': {\n                          backgroundColor: 'error.light',\n                          color: 'error.contrastText',\n                        },\n                      }}\n                      onClick={async () => {\n                        const updatedLicenses = [...newLicenses];\n                        updatedLicenses.splice(index, 1);\n                        setNewLicenses(updatedLicenses);\n                      }}\n                      data-testid={dataTestIds.employeesPage.deleteQualificationButton}\n                    >\n                      <DeleteIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <Card\n          sx={{ p: 2, backgroundColor: otherColors.formCardBg }}\n          elevation={0}\n          component={Stack}\n          spacing={2}\n          data-testid={dataTestIds.employeesPage.addQualificationCard}\n        >\n          <Typography fontWeight={600} color=\"primary.dark\">\n            Add state qualification\n          </Typography>\n\n          <Stack direction=\"row\" spacing={2}>\n            <Controller\n              name=\"newLicenseState\"\n              control={control}\n              render={({ field }) => (\n                <Autocomplete\n                  {...field}\n                  fullWidth\n                  size=\"small\"\n                  options={displayStates}\n                  getOptionLabel={(option: string) => option}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"State\"\n                      data-testid={dataTestIds.employeesPage.newQualificationStateDropdown}\n                      error={errors.state}\n                      helperText={errors.state ? 'Please select a state' : null}\n                    />\n                  )}\n                  onChange={(_, value: string | null) => field.onChange(value ?? undefined)}\n                  value={field.value || null}\n                />\n              )}\n            />\n\n            <Controller\n              name=\"newLicenseCode\"\n              control={control}\n              render={({ field }) => (\n                <Autocomplete\n                  {...field}\n                  fullWidth\n                  size=\"small\"\n                  options={Object.keys(PractitionerQualificationCodesLabels)}\n                  getOptionLabel={(option: string) => option}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      label=\"Qualification\"\n                      data-testid={dataTestIds.employeesPage.newQualificationTypeDropdown}\n                      error={errors.qualification}\n                      helperText={errors.qualification ? 'Please select a qualification' : null}\n                    />\n                  )}\n                  onChange={(_, value: string | null) => field.onChange(value ?? undefined)}\n                  value={field.value || null}\n                />\n              )}\n            />\n          </Stack>\n\n          <Stack direction=\"row\" spacing={2}>\n            <Controller\n              name=\"newLicenseNumber\"\n              control={control}\n              render={({ field }) => (\n                <TextField\n                  {...field}\n                  fullWidth\n                  size=\"small\"\n                  label=\"License number\"\n                  data-testid={dataTestIds.employeesPage.newQualificationNumberField}\n                  error={errors.number}\n                  helperText={errors.number ? 'Please enter license number' : null}\n                  onChange={(e) => field.onChange(e.target.value ?? undefined)}\n                  value={field.value || ''}\n                />\n              )}\n            />\n\n            <Controller\n              name=\"newLicenseExpirationDate\"\n              control={control}\n              render={({ field: { onChange, value } }) => (\n                <LocalizationProvider dateAdapter={AdapterLuxon}>\n                  <DatePicker\n                    label=\"Expiration date\"\n                    onChange={onChange}\n                    slotProps={{\n                      textField: {\n                        style: { width: '100%' },\n                        size: 'small',\n                        helperText: errors.date ? 'Please enter expiration date' : null,\n                        error: errors.date,\n                        inputProps: {\n                          'data-testid': dataTestIds.employeesPage.newQualificationExpDatePicker,\n                        },\n                      },\n                    }}\n                    value={value || null}\n                  />\n                </LocalizationProvider>\n              )}\n            />\n\n            {/*<Controller*/}\n            {/*  name=\"newLicenseExpirationDate\"*/}\n            {/*  control={control}*/}\n            {/*  render={({ field }) => (*/}\n            {/*    <TextField*/}\n            {/*      {...field}*/}\n            {/*      fullWidth*/}\n            {/*      size=\"small\"*/}\n            {/*      label=\"Expiration date\"*/}\n            {/*      data-testid={dataTestIds.employeesPage.newQualificationTypeDropdown}*/}\n            {/*      error={errors.qualification}*/}\n            {/*      helperText={errors.qualification ? 'Please select a qualification' : null}*/}\n            {/*      onChange={(e) => field.onChange(e.target.value ?? undefined)}*/}\n            {/*      value={field.value || null}*/}\n            {/*    />*/}\n            {/*  )}*/}\n            {/*/>*/}\n          </Stack>\n\n          <RoundedButton data-testid={dataTestIds.employeesPage.addQualificationButton} onClick={handleAddLicense}>\n            Add\n          </RoundedButton>\n\n          {errors.duplicateLicense && (\n            <Typography color=\"error\" variant=\"body2\" mt={1} mx={1}>{`License already exists.`}</Typography>\n          )}\n        </Card>\n      </Stack>\n    </FormControl>\n  );\n}\n"]}