{"version":3,"file":"GroupSelect.js","sourceRoot":"","sources":["GroupSelect.tsx"],"names":[],"mappings":";;AAaA,8BAkDC;AA/DD,0CAAwD;AAGxD,4DAAyD;AAUzD,SAAwB,WAAW,CAAC,EAA8D;QAA5D,MAAM,YAAA,EAAE,kBAAkB,wBAAA,EAAE,YAAY,kBAAA;IAC5E,IAAM,yBAAyB,GAA6B,EAAE,CAAC;IAC/D,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,GAAG,CAAC,UAAC,iBAAiB;QACxC,IAAI,iBAAiB,CAAC,EAAE,IAAI,iBAAiB,CAAC,IAAI,IAAI,SAAS,EAAE,CAAC;YAChE,yBAAyB,CAAC,iBAAiB,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,IAAI,CAAC;QAC3E,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,CACL,CAAC,uBAAY,CACX,EAAE,CAAC,QAAQ,CACX,WAAW,CAAC,CAAC,2BAAW,CAAC,SAAS,CAAC,WAAW,CAAC,CAC/C,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC;YAC5B,KAAK,EAAE,KAAK;YACZ,KAAK,EAAE,yBAAyB,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,yBAAyB,CAAC,KAAK,CAAC;SACvG,CAAC,EAH2B,CAG3B,CAAC,CAAC,CACJ,oBAAoB,CAAC,CAAC,UAAC,MAAM,EAAE,SAAS,IAAK,OAAA,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,EAAhC,CAAgC,CAAC,CAC9E,OAAO,CAAC,CACN,kBAAkB;YAChB,CAAC,CAAC,kBAAkB;gBAChB,sEAAsE;iBACrE,GAAG,CAAC,UAAC,iBAAiB,IAAK,OAAA,CAAC;gBAC3B,KAAK,EAAE,iBAAiB,CAAC,EAAE;gBAC3B,KAAK,EAAE,iBAAiB,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;aAChF,CAAC,EAH0B,CAG1B,CAAC;YACP,CAAC,CAAC,EACN,CAAC,CACD,YAAY,CAAC,CAAC,UAAC,KAAK,EAAE,MAAM;YAC1B,OAAO,CACL,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAC/B;YAAA,CAAC,MAAM,CAAC,KAAK,CACf;UAAA,EAAE,EAAE,CAAC,CACN,CAAC;QACJ,CAAC,CAAC;IACF,4CAA4C;IAC5C,QAAQ,CAAC,CAAC,UAAC,KAAK,EAAE,MAAM;YACtB,IAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,EAAX,CAAW,CAAC,CAAC;YACpD,IAAI,QAAQ,EAAE,CAAC;gBACb,YAAY,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnE,CAAC;iBAAM,CAAC;gBACN,YAAY,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;YAC5C,CAAC;YAED,IAAI,YAAY,EAAE,CAAC;gBACjB,YAAY,CAAC,KAAY,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACjD,CAAC;QACH,CAAC,CAAC,CACF,QAAQ,CACR,WAAW,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC,oBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAG,EAAvE,CAAuE,CAAC,EACjG,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { Autocomplete, TextField } from '@mui/material';\nimport { HealthcareService } from 'fhir/r4b';\nimport { ReactElement } from 'react';\nimport { dataTestIds } from '../constants/data-test-ids';\n\ntype CustomFormEventHandler = (event: React.FormEvent<HTMLFormElement>, value: any, field: string) => void;\n\ninterface GroupSelectProps {\n  groups: string[];\n  healthcareServices?: HealthcareService[];\n  handleSubmit?: CustomFormEventHandler;\n}\n\nexport default function GroupSelect({ groups, healthcareServices, handleSubmit }: GroupSelectProps): ReactElement {\n  const healthcareServiceIDToName: { [id: string]: string } = {};\n  healthcareServices?.map((healthcareService) => {\n    if (healthcareService.id && healthcareService.name != undefined) {\n      healthcareServiceIDToName[healthcareService.id] = healthcareService.name;\n    }\n  });\n  return (\n    <Autocomplete\n      id=\"groups\"\n      data-testid={dataTestIds.dashboard.groupSelect}\n      value={groups.map((group) => ({\n        value: group,\n        label: healthcareServiceIDToName[group] == undefined ? 'Loading...' : healthcareServiceIDToName[group],\n      }))}\n      isOptionEqualToValue={(option, tempValue) => option.value === tempValue.value}\n      options={\n        healthcareServices\n          ? healthcareServices\n              // .filter((healthcareService) => healthcareService.name != undefined)\n              .map((healthcareService) => ({\n                value: healthcareService.id,\n                label: healthcareService.name != undefined ? healthcareService.name : 'Unknown',\n              }))\n          : []\n      }\n      renderOption={(props, option) => {\n        return (\n          <li {...props} key={option.value}>\n            {option.label}\n          </li>\n        );\n      }}\n      // getOptionLabel={(option) => option.label}\n      onChange={(event, groups) => {\n        const groupIDs = groups.map((group) => group.value);\n        if (groupIDs) {\n          localStorage.setItem('selectedGroups', JSON.stringify(groupIDs));\n        } else {\n          localStorage.removeItem('selectedGroups');\n        }\n\n        if (handleSubmit) {\n          handleSubmit(event as any, groupIDs, 'groups');\n        }\n      }}\n      multiple\n      renderInput={(params) => <TextField name=\"groups\" {...params} label=\"Groups\" required={false} />}\n    />\n  );\n}\n"]}