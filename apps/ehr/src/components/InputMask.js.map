{"version":3,"file":"InputMask.js","sourceRoot":"","sources":["InputMask.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,+BAAmC;AACnC,2CAAyC;AASzC,IAAM,SAAS,GAAG,IAAA,kBAAU,EAA8B,UAAC,EAA0C,EAAE,GAAG;IAA7C,IAAA,QAAQ,cAAA,EAAE,IAAI,UAAA,EAAE,IAAI,UAAA,EAAE,MAAM,YAAA,EAAK,KAAK,cAAxC,sCAA0C,CAAF;IACjG,OAAO,CACL,CAAC,wBAAU,CACT,IAAI,KAAK,CAAC,CACV,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,QAAQ,CAAC,CAAC,GAAU,CAAC,CACrB,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,QAAQ,CAAC,CAAC,UAAC,KAAU,IAAK,OAAA,QAAQ,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,OAAA,EAAE,EAAE,CAAC,EAA3C,CAA2C,CAAC,CACtE,SAAS,CACT,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,2DAA2D;MACvE,CACH,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,kBAAe,SAAS,CAAC","sourcesContent":["import { forwardRef } from 'react';\nimport { IMaskInput } from 'react-imask';\n\ninterface InputMaskProps {\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  name: string;\n  mask: string;\n  blocks: any;\n}\n\nconst InputMask = forwardRef<HTMLElement, InputMaskProps>(({ onChange, name, mask, blocks, ...other }, ref) => {\n  return (\n    <IMaskInput\n      {...other}\n      mask={mask}\n      inputRef={ref as any}\n      blocks={blocks}\n      onAccept={(value: any) => onChange({ target: { name: name, value } })}\n      overwrite\n      name={name} // todo check why name is not included when there is a mask\n    />\n  );\n});\n\nexport default InputMask;\n"]}