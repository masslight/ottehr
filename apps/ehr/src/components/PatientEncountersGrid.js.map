{"version":3,"file":"PatientEncountersGrid.js","sourceRoot":"","sources":["PatientEncountersGrid.tsx"],"names":[],"mappings":"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","sourcesContent":["import AddIcon from '@mui/icons-material/Add';\nimport {\n  Box,\n  capitalize,\n  Checkbox,\n  FormControlLabel,\n  MenuItem,\n  Paper,\n  Stack,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { DataGridPro, GridColDef } from '@mui/x-data-grid-pro';\nimport { Encounter } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { FC, useMemo, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport { VisitTypeToLabel, VisitTypeToLabelTelemed } from 'src/types/types';\nimport {\n  EmployeeDetails,\n  formatMinutes,\n  getVisitStatus,\n  mapStatusToTelemed,\n  OTTEHR_MODULE,\n  ServiceMode,\n  TelemedCallStatusesArr,\n  Visit_Status_Array,\n} from 'utils';\nimport { create } from 'zustand';\nimport { getEmployees } from '../api/api';\nimport { formatISOStringToDateAndTime } from '../helpers/formatDateTime';\nimport { useApiClients } from '../hooks/useAppClients';\nimport { AppointmentHistoryRow } from '../hooks/useGetPatient';\nimport { getAppointmentStatusChip as getTelemedAppointmentStatusChip } from '../telemed/utils';\nimport { RoundedButton } from './RoundedButton';\n\ntype PatientEncountersGridProps = {\n  appointments?: AppointmentHistoryRow[];\n  loading: boolean;\n};\n\nconst useEmployeesStore = create<{ employees: EmployeeDetails[] }>()(() => ({ employees: [] }));\n\nconst ProviderCell: FC<{ encounter?: Encounter }> = ({ encounter }) => {\n  const { employees } = useEmployeesStore();\n\n  const practitioner = encounter?.participant\n    ?.find((participant) => participant.individual?.reference?.startsWith('Practitioner'))\n    ?.individual?.reference?.split('/')?.[1];\n\n  const employee = practitioner ? employees.find((employee) => employee.profile.endsWith(practitioner)) : undefined;\n\n  return <Typography variant=\"body2\">{employee ? `${employee.firstName} ${employee.lastName}` : '-'}</Typography>;\n};\n\nconst columns: GridColDef<AppointmentHistoryRow>[] = [\n  {\n    sortComparator: (a, b) => {\n      const createdA = DateTime.fromISO(a ?? '');\n      const createdB = DateTime.fromISO(b ?? '');\n      return createdA.diff(createdB).milliseconds;\n    },\n    field: 'dateTime',\n    headerName: 'Date & Time',\n    width: 150,\n    renderCell: ({ row: { dateTime, officeTimeZone } }) =>\n      dateTime ? formatISOStringToDateAndTime(dateTime, officeTimeZone) : '-',\n  },\n  {\n    sortable: false,\n    field: 'status',\n    headerName: 'Status',\n    width: 140,\n    renderCell: ({ row: { appointment, serviceMode: serviceType, encounter } }) => {\n      if (serviceType === ServiceMode.virtual) {\n        if (!encounter) {\n          return;\n        }\n        const status = mapStatusToTelemed(encounter.status, appointment.status);\n        return getTelemedAppointmentStatusChip(status);\n      } else {\n        if (!encounter) return;\n        const encounterStatus = getVisitStatus(appointment, encounter);\n        if (!encounterStatus) {\n          return;\n        }\n\n        return encounterStatus;\n      }\n    },\n  },\n  {\n    sortable: false,\n    field: 'type',\n    headerName: 'Type',\n    width: 150,\n    renderCell: ({ row: { typeLabel: type } }) => type || '-',\n  },\n  {\n    sortable: false,\n    field: 'reason',\n    headerName: 'Reason for visit',\n    width: 150,\n    renderCell: ({ row: { appointment } }) => (\n      <Typography variant=\"body2\">\n        {(appointment?.description ?? '')\n          .split(',')\n          .map((complaint) => complaint.trim())\n          .join(', ') || '-'}\n      </Typography>\n    ),\n  },\n  {\n    sortable: false,\n    field: 'provider',\n    headerName: 'Provider',\n    width: 150,\n    renderCell: ({ row: { encounter } }) => <ProviderCell encounter={encounter} />,\n  },\n  {\n    sortable: false,\n    field: 'office',\n    headerName: 'Office',\n    width: 150,\n    renderCell: ({ row: { office } }) => office || '-',\n  },\n  {\n    sortable: false,\n    field: 'los',\n    headerName: 'LOS',\n    width: 100,\n    renderCell: ({ row: { length } }) =>\n      length !== undefined ? `${formatMinutes(length)} ${length === 1 ? 'min' : 'mins'}` : '-',\n  },\n  {\n    sortable: false,\n    field: 'info',\n    headerName: 'Visit Info',\n    headerAlign: 'center',\n    width: 120,\n    renderCell: ({ row: { id, appointment } }) => {\n      // if it's a pre-booked telemed visit the text is just 'prebook' so use the TM tag instead to support both\n      const isTelemed = !!appointment.meta?.tag?.find((tag) => tag.code === OTTEHR_MODULE.TM);\n\n      return !isTelemed && <RoundedButton to={`/visit/${id}`}>Visit Info</RoundedButton>;\n    },\n  },\n  {\n    sortable: false,\n    field: 'note',\n    headerName: 'Progress Note',\n    width: 150,\n    renderCell: ({ row: { id, serviceMode: serviceType } }) => (\n      <RoundedButton\n        to={\n          serviceType === ServiceMode.virtual\n            ? `/telemed/appointments/${id}?tab=sign`\n            : `/in-person/${id}/progress-note`\n        }\n      >\n        Progress Note\n      </RoundedButton>\n    ),\n  },\n];\n\nexport const PatientEncountersGrid: FC<PatientEncountersGridProps> = (props) => {\n  const { appointments, loading } = props;\n\n  const [type, setType] = useState('all');\n  const [period, setPeriod] = useState(0);\n  const [status, setStatus] = useState('all');\n  const [hideCancelled, setHideCancelled] = useState(false);\n  const [hideNoShow, setHideNoShow] = useState(false);\n\n  const { oystehrZambda } = useApiClients();\n  useQuery(\n    ['patient-record-get-employees', { zambdaClient: oystehrZambda }],\n    () => (oystehrZambda ? getEmployees(oystehrZambda) : null),\n    {\n      onSuccess: (response) => {\n        useEmployeesStore.setState({ employees: response?.employees || [] });\n      },\n      enabled: !!oystehrZambda,\n    }\n  );\n\n  const filtered = useMemo(() => {\n    let filtered = appointments || [];\n\n    if (type !== 'all') {\n      filtered = filtered.filter((item) => item.typeLabel === type);\n    }\n\n    if (period) {\n      filtered = filtered.filter((item) => {\n        return -DateTime.fromISO(item.dateTime ?? '').diffNow('months').months < period;\n      });\n    }\n\n    if (status !== 'all') {\n      filtered = filtered.filter((item) => filterAppointmentForStatus(item, status));\n    }\n\n    if (hideCancelled) {\n      filtered = filtered.filter((item) => !filterAppointmentForStatus(item, 'cancelled'));\n    }\n\n    if (hideNoShow) {\n      filtered = filtered.filter(\n        (item) => item.serviceMode === ServiceMode.virtual || !filterAppointmentForStatus(item, 'no show')\n      );\n    }\n\n    return filtered;\n  }, [appointments, period, type, status, hideCancelled, hideNoShow]);\n\n  function filterAppointmentForStatus(appointmentHistory: AppointmentHistoryRow, filterStatus: string): boolean {\n    if (!appointmentHistory.encounter) return false;\n    const appointmentStatus =\n      appointmentHistory.serviceMode === ServiceMode.virtual\n        ? mapStatusToTelemed(appointmentHistory.encounter.status, appointmentHistory.appointment.status)\n        : getVisitStatus(appointmentHistory.appointment, appointmentHistory.encounter);\n    return filterStatus === appointmentStatus;\n  }\n\n  return (\n    <Paper sx={{ padding: 3 }} component={Stack} spacing={2}>\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n        <Typography variant=\"h4\" color=\"primary.dark\" sx={{ flexGrow: 1 }}>\n          Encounters - {appointments?.length || 0}\n        </Typography>\n        {appointments?.[0]?.dateTime && (\n          <Typography>\n            Latest visit: {formatISOStringToDateAndTime(appointments[0].dateTime, appointments[0].officeTimeZone)}\n          </Typography>\n        )}\n        <RoundedButton to=\"/visits/add\" target=\"_blank\" variant=\"contained\" startIcon={<AddIcon fontSize=\"small\" />}>\n          New Visit\n        </RoundedButton>\n      </Box>\n\n      <Box sx={{ display: 'flex', gap: 2 }}>\n        <TextField size=\"small\" fullWidth label=\"Type\" select value={type} onChange={(e) => setType(e.target.value)}>\n          <MenuItem value=\"all\">All</MenuItem>\n          <MenuItem value={VisitTypeToLabel['walk-in']}>{VisitTypeToLabel['walk-in']}</MenuItem>\n          <MenuItem value={VisitTypeToLabel['post-telemed']}>{VisitTypeToLabel['post-telemed']}</MenuItem>\n          <MenuItem value={VisitTypeToLabel['pre-booked']}>{VisitTypeToLabel['pre-booked']}</MenuItem>\n          <MenuItem value={VisitTypeToLabelTelemed['pre-booked']}>{VisitTypeToLabelTelemed['pre-booked']}</MenuItem>\n          <MenuItem value={VisitTypeToLabelTelemed['walk-in']}>{VisitTypeToLabelTelemed['walk-in']}</MenuItem>\n        </TextField>\n\n        <TextField\n          size=\"small\"\n          fullWidth\n          label=\"Visit Period\"\n          select\n          value={period}\n          onChange={(e) => setPeriod(+e.target.value)}\n        >\n          <MenuItem value={0}>All</MenuItem>\n          <MenuItem value={1}>Last month</MenuItem>\n          <MenuItem value={3}>Last 3 months</MenuItem>\n          <MenuItem value={6}>Last 6 months</MenuItem>\n          <MenuItem value={12}>Last year</MenuItem>\n        </TextField>\n\n        <TextField\n          size=\"small\"\n          fullWidth\n          label=\"Visit Status\"\n          select\n          value={status}\n          onChange={(e) => setStatus(e.target.value)}\n        >\n          <MenuItem value=\"all\">All</MenuItem>\n          {[...new Set([...TelemedCallStatusesArr, ...Visit_Status_Array.filter((item) => item !== 'cancelled')])].map(\n            (status) => (\n              <MenuItem key={status} value={status}>\n                {capitalize(status)}\n              </MenuItem>\n            )\n          )}\n        </TextField>\n\n        <FormControlLabel\n          sx={{\n            whiteSpace: 'nowrap',\n          }}\n          control={<Checkbox value={hideCancelled} onChange={(e) => setHideCancelled(e.target.checked)} />}\n          label=\"Hide “Cancelled”\"\n        />\n\n        <FormControlLabel\n          sx={{\n            whiteSpace: 'nowrap',\n          }}\n          control={<Checkbox value={hideNoShow} onChange={(e) => setHideNoShow(e.target.checked)} />}\n          label=\"Hide “No Show”\"\n        />\n      </Box>\n\n      <DataGridPro\n        rows={filtered}\n        columns={columns}\n        initialState={{\n          pagination: {\n            paginationModel: {\n              pageSize: 5,\n            },\n          },\n          sorting: {\n            sortModel: [{ field: 'dateTime', sort: 'desc' }],\n          },\n        }}\n        autoHeight\n        loading={loading}\n        pagination\n        disableColumnMenu\n        pageSizeOptions={[5]}\n        disableRowSelectionOnClick\n        sx={{\n          border: 0,\n          '.MuiDataGrid-columnHeaderTitle': {\n            fontWeight: 500,\n          },\n        }}\n      />\n    </Paper>\n  );\n};\n"]}