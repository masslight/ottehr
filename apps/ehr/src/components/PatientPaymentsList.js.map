{"version":3,"file":"PatientPaymentsList.js","sourceRoot":"","sources":["PatientPaymentsList.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,qCA0KC;AAjND,0CAcuB;AAEvB,+BAAiC;AACjC,+BAAyD;AACzD,2CAA0C;AAC1C,yDAAwD;AACxD,iFAAgF;AAChF,+BAA4G;AAC5G,yDAAoD;AACpD,qEAAkE;AAQlE,IAAM,eAAe,GAAG,UAAC,OAA0B;;IACjD,IAAI,OAAO,CAAC,aAAa,KAAK,MAAM,EAAE,CAAC;QACrC,OAAO,OAAO,CAAC,yBAAyB,CAAC;IAC3C,CAAC;SAAM,CAAC;QACN,OAAO,MAAA,OAAO,CAAC,yBAAyB,mCAAI,oBAAoB,CAAC,CAAC,wCAAwC;IAC5G,CAAC;AACH,CAAC,CAAC;AAEF,SAAwB,kBAAkB,CAAC,EAAmD;IAA9F,iBA0KC;;QA1K4C,OAAO,aAAA,EAAE,OAAO,aAAA,EAAE,WAAW,iBAAA;IACxE,IAAM,KAAK,GAAG,IAAA,mBAAQ,GAAE,CAAC;IACnB,IAAA,KAA4C,IAAA,gBAAQ,EAAC,KAAK,CAAC,EAA1D,iBAAiB,QAAA,EAAE,oBAAoB,QAAmB,CAAC;IAE5D,IAAA,KAIF,IAAA,qDAAyB,EAAC;QAC5B,SAAS,EAAE,MAAA,OAAO,CAAC,EAAE,mCAAI,EAAE;QAC3B,WAAW,aAAA;QACX,QAAQ,EAAE,CAAC,WAAW,IAAI,CAAC,OAAO,CAAC,EAAE;KACtC,CAAC,EAPM,WAAW,UAAA,EACR,kBAAkB,aAAA,EAC3B,YAAY,kBAKZ,CAAC;IACH,IAAM,QAAQ,GAAG,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,mCAAI,EAAE,CAAC,CAAC,8CAA8C;IAEpF,IAAe,OAAO,GAAK,IAAA,6BAAa,GAAE,cAApB,CAAqB;IAEnD,IAAM,kBAAkB,GAAG,UAAC,OAA0B;;QACpD,IAAI,OAAO,CAAC,aAAa,KAAK,MAAM,EAAE,CAAC;YACrC,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;gBACtB,OAAO,+BAAwB,OAAO,CAAC,SAAS,CAAE,CAAC;YACrD,CAAC;iBAAM,CAAC;gBACN,OAAO,CACL,CAAC,+CAAqB,CACpB,MAAM,CAAC,CAAC,eAAe,CAAC,CACxB,QAAQ,CAAC,CAAC;wBACR,GAAC,eAAe,IAAG;4BACjB,MAAM,EAAE;gCACN,QAAQ,EAAE,MAAM;gCAChB,UAAU,EAAE,QAAQ;gCACpB,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI;6BAClC;4BACD,OAAO,EAAE,aAAa;4BACtB,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI;yBACtC;2BACD,CACF,cAAc,CAAC,CAAC,EAAE,CAAC,CACnB,aAAa,CAAC,CAAC,kBAAkB,CAAC,CAClC,YAAY,CAAC,CAAC,YAAY,CAAC,CAC3B,aAAa,CAAC,KAAK,EACnB,CACH,CAAC;YACJ,CAAC;QACH,CAAC;aAAM,CAAC;YACN,OAAO,IAAA,qBAAU,EAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC,CAAC;IAEF,IAAM,gBAAgB,GAAG,IAAA,yBAAW,EAAC;QACnC,UAAU,EAAE,UAAO,KAA8B;;;gBAC/C,IAAI,OAAO,IAAI,KAAK,EAAE,CAAC;oBACrB,sBAAO,OAAO,CAAC,MAAM;6BAClB,OAAO,YACN,EAAE,EAAE,uBAAuB,IACxB,KAAK,EACR;6BACD,IAAI,CAAC;;;4CACJ,qBAAM,kBAAkB,EAAE,EAAA;;wCAA1B,SAA0B,CAAC;wCAC3B,oBAAoB,CAAC,KAAK,CAAC,CAAC;;;;6BAC7B,CAAC,EAAC;gBACP,CAAC;;;aACF;QACD,KAAK,EAAE,CAAC;KACT,CAAC,CAAC;IAEH,IAAM,YAAY,GAAG,CAAC;QACpB,IAAM,YAAY,GAAG,gBAAgB,CAAC,KAAK,CAAC;QAC5C,IAAI,YAAY,EAAE,CAAC;YACjB,IAAI,IAAA,kBAAU,EAAC,YAAY,CAAC,EAAE,CAAC;gBAC7B,OAAQ,YAAyB,CAAC,OAAO,CAAC;YAC5C,CAAC;YACD,OAAO,kDAAkD,CAAC;QAC5D,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,EAAE,CAAC;IAEL,OAAO,CACL,CAAC,gBAAK,CACJ,EAAE,CAAC,CAAC;YACF,SAAS,EAAE,CAAC;YACZ,OAAO,EAAE,CAAC;SACX,CAAC,CAEF;MAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAC3C;;MACF,EAAE,qBAAU,CACZ;MAAA,CAAC,gBAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,EAAE,OAAO,EAAE,CAAC,CAClD;QAAA,CAAC,oBAAS,CACR;UAAA,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAO;YACpB,IAAM,iBAAiB,GAAG,gBAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,gBAAQ,CAAC,UAAU,CAAC,CAAC;YAChG,OAAO,CACL,CAAC,gBAAQ,CAAC,GAAG,CAAC,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CACtC;gBAAA,CAAC,mBAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,iBAAiB,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC,CACvD;kBAAA,EACE;oBAAA,CAAC,oBAAS,CACR,EAAE,CAAC,CAAC;oBACF,KAAK,EAAE,KAAK;oBACZ,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI;oBACjC,WAAW,EAAE,CAAC;iBACf,CAAC,CAEF;sBAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAC/E;wBAAA,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAC9B;sBAAA,EAAE,cAAG,CACP;oBAAA,EAAE,oBAAS,CAEX;;oBAAA,CAAC,oBAAS,CACR,OAAO,CAAC,CAAC,CAAC,CAAC,CACX,EAAE,CAAC,CAAC;oBACF,SAAS,EAAE,QAAQ;oBACnB,QAAQ,EAAE,YAAY;oBACtB,YAAY,EAAE,CAAC;oBACf,UAAU,EAAE,CAAC;oBACb,QAAQ,EAAE,MAAM;iBACjB,CAAC,CAEF;sBAAA,CAAC,iBAAiB,CACpB;oBAAA,EAAE,oBAAS,CAEX;;oBAAA,CAAC,oBAAS,CACR,EAAE,CAAC,CAAC;oBACF,SAAS,EAAE,OAAO;oBAClB,QAAQ,EAAE,YAAY;oBACtB,YAAY,EAAE,CAAC;iBAChB,CAAC,CAEF;sBAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAC7E;wBAAA,CAAC,OAAO,CAAC,CAAC,CAAC,CACT,CAAC,mBAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAG,CAC1C,CAAC,CAAC,CAAC,CACF,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,WAAI,OAAO,CAAC,aAAa,GAAG,GAAG,CAAE,CAAC,EAAE,qBAAU,CAAC,CAC7E,CACH;sBAAA,EAAE,cAAG,CACP;oBAAA,EAAE,oBAAS,CACb;kBAAA,GACF;gBAAA,EAAE,mBAAQ,CACZ;cAAA,EAAE,gBAAQ,CAAC,CACZ,CAAC;QACJ,CAAC,CAAC,CACJ;QAAA,EAAE,oBAAS,CACb;MAAA,EAAE,gBAAK,CACP;MAAA,CAAC,iBAAM,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,cAAM,OAAA,oBAAoB,CAAC,IAAI,CAAC,EAA1B,CAA0B,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAC1G;;MACF,EAAE,iBAAM,CACR;MAAA,CAAC,uBAAa,CACZ,IAAI,CAAC,CAAC,iBAAiB,CAAC,CACxB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,WAAW,CAAC,CAAC,cAAM,OAAA,oBAAoB,CAAC,KAAK,CAAC,EAA3B,CAA2B,CAAC,CAC/C,YAAY,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC,CACzC,aAAa,CAAC,CAAC,UAAO,IAAuB;;;;gBACrC,SAAS,GAA4B;oBACzC,SAAS,EAAE,MAAA,OAAO,CAAC,EAAE,mCAAI,EAAE;oBAC3B,WAAW,aAAA;oBACX,cAAc,EAAE,IAAI;iBACrB,CAAC;gBACF,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;;;aACpC,CAAC,EAEJ;MAAA,CAAC,mBAAQ;IACP,0FAA0F;IAC1F,IAAI,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,CAC5B,gBAAgB,CAAC,CAAC,IAAI,CAAC,CACvB,OAAO,CAAC,CAAC,cAAM,OAAA,gBAAgB,CAAC,KAAK,EAAE,EAAxB,CAAwB,CAAC,CAExC;QAAA,CAAC,gBAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAM,OAAA,gBAAgB,CAAC,KAAK,EAAE,EAAxB,CAAwB,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CACrF;UAAA,CAAC,YAAY,CACf;QAAA,EAAE,gBAAK,CACT;MAAA,EAAE,mBAAQ,CACZ;IAAA,EAAE,gBAAK,CAAC,CACT,CAAC;AACJ,CAAC","sourcesContent":["import {\n  Alert,\n  Box,\n  Button,\n  capitalize,\n  Paper,\n  Skeleton,\n  Snackbar,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  Typography,\n  useTheme,\n} from '@mui/material';\nimport { Patient } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { Fragment, ReactElement, useState } from 'react';\nimport { useMutation } from 'react-query';\nimport { useApiClients } from 'src/hooks/useAppClients';\nimport { useGetPatientPaymentsList } from 'src/hooks/useGetPatientPaymentsList';\nimport { APIError, CashOrCardPayment, isApiError, PatientPaymentDTO, PostPatientPaymentInput } from 'utils';\nimport PaymentDialog from './dialogs/PaymentDialog';\nimport { RefreshableStatusChip } from './RefreshableStatusWidget';\n\nexport interface PaymentListProps {\n  patient: Patient;\n  encounterId: string;\n  loading?: boolean;\n}\n\nconst idForPaymentDTO = (payment: PatientPaymentDTO): string => {\n  if (payment.paymentMethod === 'card') {\n    return payment.fhirPaymentNotificationId;\n  } else {\n    return payment.fhirPaymentNotificationId ?? 'unknown-payment-id'; //todo: should get something from candid\n  }\n};\n\nexport default function PatientPaymentList({ loading, patient, encounterId }: PaymentListProps): ReactElement {\n  const theme = useTheme();\n  const [paymentDialogOpen, setPaymentDialogOpen] = useState(false);\n\n  const {\n    data: paymentData,\n    refetch: refetchPaymentList,\n    isRefetching,\n  } = useGetPatientPaymentsList({\n    patientId: patient.id ?? '',\n    encounterId,\n    disabled: !encounterId || !patient.id,\n  });\n  const payments = paymentData?.payments ?? []; // Replace with actual payments when available\n\n  const { oystehrZambda: oystehr } = useApiClients();\n\n  const getLabelForPayment = (payment: PatientPaymentDTO): string | ReactElement => {\n    if (payment.paymentMethod === 'card') {\n      if (payment.cardLast4) {\n        return `XXXX - XXXX - XXXX - ${payment.cardLast4}`;\n      } else {\n        return (\n          <RefreshableStatusChip\n            status={'processing...'}\n            styleMap={{\n              ['processing...']: {\n                textSX: {\n                  fontSize: '16px',\n                  fontWeight: 'normal',\n                  color: theme.palette.primary.dark,\n                },\n                bgColor: 'transparent',\n                textColor: theme.palette.primary.dark,\n              },\n            }}\n            lastRefreshISO={''}\n            handleRefresh={refetchPaymentList}\n            isRefreshing={isRefetching}\n            flexDirection=\"row\"\n          />\n        );\n      }\n    } else {\n      return capitalize(payment.paymentMethod);\n    }\n  };\n\n  const createNewPayment = useMutation({\n    mutationFn: async (input: PostPatientPaymentInput) => {\n      if (oystehr && input) {\n        return oystehr.zambda\n          .execute({\n            id: 'patient-payments-post',\n            ...input,\n          })\n          .then(async () => {\n            await refetchPaymentList();\n            setPaymentDialogOpen(false);\n          });\n      }\n    },\n    retry: 0,\n  });\n\n  const errorMessage = (() => {\n    const networkError = createNewPayment.error;\n    if (networkError) {\n      if (isApiError(networkError)) {\n        return (networkError as APIError).message;\n      }\n      return 'Something went wrong. Payment was not completed.';\n    }\n    return null;\n  })();\n\n  return (\n    <Paper\n      sx={{\n        marginTop: 2,\n        padding: 3,\n      }}\n    >\n      <Typography variant=\"h4\" color=\"primary.dark\">\n        Patient Payments\n      </Typography>\n      <Table size=\"small\" style={{ tableLayout: 'fixed' }}>\n        <TableBody>\n          {payments.map((payment) => {\n            const paymentDateString = DateTime.fromISO(payment.dateISO).toLocaleString(DateTime.DATE_SHORT);\n            return (\n              <Fragment key={idForPaymentDTO(payment)}>\n                <TableRow sx={{ '&:last-child td': { borderBottom: 0 } }}>\n                  <>\n                    <TableCell\n                      sx={{\n                        width: '50%',\n                        color: theme.palette.primary.dark,\n                        paddingLeft: 0,\n                      }}\n                    >\n                      <Box sx={{ display: 'flex', justifyContent: 'flex-start', alignItems: 'center' }}>\n                        {getLabelForPayment(payment)}\n                      </Box>\n                    </TableCell>\n\n                    <TableCell\n                      colSpan={2}\n                      sx={{\n                        textAlign: 'center',\n                        wordWrap: 'break-word',\n                        paddingRight: 0,\n                        paddingTop: 0,\n                        fontSize: '12px',\n                      }}\n                    >\n                      {paymentDateString}\n                    </TableCell>\n\n                    <TableCell\n                      sx={{\n                        textAlign: 'right',\n                        wordWrap: 'break-word',\n                        paddingRight: 0,\n                      }}\n                    >\n                      <Box sx={{ display: 'flex', justifyContent: 'flex-end', alignItems: 'center' }}>\n                        {loading ? (\n                          <Skeleton aria-busy=\"true\" width={200} />\n                        ) : (\n                          <Typography variant=\"body1\">{`$${payment.amountInCents / 100}`}</Typography>\n                        )}\n                      </Box>\n                    </TableCell>\n                  </>\n                </TableRow>\n              </Fragment>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <Button sx={{ marginTop: 2 }} onClick={() => setPaymentDialogOpen(true)} variant=\"contained\" color=\"primary\">\n        $ Add Payment\n      </Button>\n      <PaymentDialog\n        open={paymentDialogOpen}\n        patient={patient}\n        handleClose={() => setPaymentDialogOpen(false)}\n        isSubmitting={createNewPayment.isLoading}\n        submitPayment={async (data: CashOrCardPayment) => {\n          const postInput: PostPatientPaymentInput = {\n            patientId: patient.id ?? '',\n            encounterId,\n            paymentDetails: data,\n          };\n          createNewPayment.mutate(postInput);\n        }}\n      />\n      <Snackbar\n        // anchorOrigin={{ vertical: snackbarOpen.vertical, horizontal: snackbarOpen.horizontal }}\n        open={errorMessage !== null}\n        autoHideDuration={6000}\n        onClose={() => createNewPayment.reset()}\n      >\n        <Alert severity=\"error\" onClose={() => createNewPayment.reset()} sx={{ width: '100%' }}>\n          {errorMessage}\n        </Alert>\n      </Snackbar>\n    </Paper>\n  );\n}\n"]}