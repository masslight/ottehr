{"version":3,"file":"usePatientsSearch.js","sourceRoot":"","sources":["usePatientsSearch.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAA8C;AAE9C,uCAA4C;AAC5C,+BAAyD;AACzD,qDAAmD;AACnD,yCAA4C;AAW5C,mEAAkE;AAClE,uDAAsD;AACtD,6DAA4D;AAC5D,iEAAgE;AAEhE,IAAM,iBAAiB,GAAiB;IACtC,QAAQ,EAAE,EAAE;IACZ,UAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE;CACtD,CAAC;AAEF,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC;AAEtD,IAAI,CAAC,SAAS,EAAE,CAAC;IACf,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;AAC3C,CAAC;AAED,IAAM,aAAa,GAAG,iEAAO,EAU5B;;QATC,SAAS,eAAA,EACT,eAAe,qBAAA,EACf,qBAAqB,2BAAA,EACrB,sBAAsB,4BAAA;;;;gBAOtB,qBAAqB,CAAC,IAAI,CAAC,CAAC;;;;gBAEZ,qBAAM,sBAAsB,EAAE,EAAA;;gBAAtC,KAAK,GAAG,SAA8B;gBAEtC,OAAO,GAAG;oBACd,MAAM,EAAE,kBAAkB;oBAC1B,cAAc,EAAE,kBAAkB;oBAClC,aAAa,EAAE,iBAAU,KAAK,CAAE;oBAChC,qBAAqB,EAAE,SAAS;iBACjC,CAAC;gBAEe,qBAAM,KAAK,CAAC,SAAS,EAAE;wBACtC,MAAM,EAAE,KAAK;wBACb,OAAO,EAAE,OAAO;qBACjB,CAAC,EAAA;;gBAHI,QAAQ,GAAG,SAGf;gBAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;oBACjB,MAAM,IAAI,KAAK,CAAC,8BAAuB,QAAQ,CAAC,MAAM,CAAE,CAAC,CAAC;gBAC5D,CAAC;gBAE6B,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;gBAA7C,aAAa,GAAW,SAAqB;gBAC7C,kBAAkB,GAAG,IAAA,uCAAkB,EAAC,aAAa,CAAC,CAAC;gBAC7D,eAAe,CAAC,kBAAkB,CAAC,CAAC;;;;gBAEpC,eAAe,CAAC,iBAAiB,CAAC,CAAC;gBAC7B,OAAO,GAAG,OAAK,YAAY,KAAK,CAAC,CAAC,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mCAAmC,CAAC;gBAC7F,IAAA,2BAAe,EAAC,OAAO,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;;;gBAE/C,qBAAqB,CAAC,KAAK,CAAC,CAAC;;;;;KAEhC,CAAC;AAEF,IAAM,iBAAiB,GAAG,UAAC,YAA6B,IAA2B,OAAA,CAAC;IAClF,UAAU,EAAE,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE;IAChD,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE;IAC5C,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;IAClC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;IAClC,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE;IACtC,OAAO,EAAE,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE;IAC1C,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE;IACtC,gEAAgE;IAChE,MAAM,EAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAoC,IAAI,KAAK;IAC/E,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,KAAK;CAChD,CAAC,EAXiF,CAWjF,CAAC;AAEH,IAAM,cAAc,GAAG,UAAC,YAA6B,IAAwB,OAAA,CAAC;IAC5E,KAAK,EAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAe,IAAI,yBAAa,CAAC,YAAY,CAAC,KAAK;IACnF,KAAK,EAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAe,IAAI,yBAAa,CAAC,YAAY,CAAC,KAAK;CACpF,CAAC,EAH2E,CAG3E,CAAC;AAEH,IAAM,oBAAoB,GAAG,UAAC,YAA6B,IAA8B,OAAA,CAAC;IACxF,QAAQ,EAAE,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,yBAAa,CAAC,iBAAiB;IACjF,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;CAChD,CAAC,EAHuF,CAGvF,CAAC;AAEH,IAAM,oBAAoB,GAAuB;IAC/C,OAAO,EAAE;QACP,UAAU,EAAE,EAAE;QACd,QAAQ,EAAE,EAAE;QACZ,GAAG,EAAE,EAAE;QACP,GAAG,EAAE,EAAE;QACP,KAAK,EAAE,EAAE;QACT,OAAO,EAAE,EAAE;QACX,KAAK,EAAE,EAAE;QACT,wBAAwB;QACxB,MAAM,EAAE,KAAK;QACb,QAAQ,EAAE,KAAK;KAChB;IACD,IAAI,EAAE,yBAAa,CAAC,YAAY;IAChC,UAAU,EAAE,EAAE,QAAQ,EAAE,yBAAa,CAAC,iBAAiB,EAAE,MAAM,EAAE,CAAC,EAAE;CACrE,CAAC;AAEK,IAAM,iBAAiB,GAAG;IAQvB,IAAA,sBAAsB,GAAK,IAAA,sBAAQ,GAAE,uBAAf,CAAgB;IACxC,IAAA,KAAkC,IAAA,kCAAe,GAAE,EAAlD,YAAY,QAAA,EAAE,eAAe,QAAqB,CAAC;IACpD,IAAA,KAAkC,IAAA,gBAAQ,EAAe,iBAAiB,CAAC,EAA1E,YAAY,QAAA,EAAE,eAAe,QAA6C,CAAC;IAC5E,IAAA,KAA8C,IAAA,gBAAQ,EAAU,KAAK,CAAC,EAArE,kBAAkB,QAAA,EAAE,qBAAqB,QAA4B,CAAC;IAEvE,IAAA,KAAoC,IAAA,gBAAQ,EAAqB;QACrE,OAAO,EAAE,iBAAiB,CAAC,YAAY,CAAC;QACxC,IAAI,EAAE,cAAc,CAAC,YAAY,CAAC;QAClC,UAAU,EAAE,oBAAoB,CAAC,YAAY,CAAC;KAC/C,CAAC,EAJK,aAAa,QAAA,EAAE,gBAAgB,QAIpC,CAAC;IAEH,IAAM,cAAc,GAAG,IAAA,mBAAW,EAChC,UAAC,EAAsE;YAApE,KAAK,WAAA,EAAE,KAAK,WAAA;QACb,gBAAgB,CAAC,UAAC,IAAI;;YAAK,OAAA,uBACtB,IAAI,KACP,OAAO,wBAAO,IAAI,CAAC,OAAO,gBAAG,KAAK,IAAG,KAAK,UAC1C;QAHyB,CAGzB,CAAC,CAAC;IACN,CAAC,EACD,CAAC,gBAAgB,CAAC,CACnB,CAAC;IAEF,IAAM,YAAY,GAAG,IAAA,mBAAW,EAAC;QAC/B,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;IACzC,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAEvB,wCAAwC;IACxC,+FAA+F;IAC/F,iGAAiG;IACjG,8CAA8C;IAC9C,IAAM,MAAM,GAAG,IAAA,mBAAW,EACxB,UAAC,gBAA4C;QACnC,IAAA,OAAO,GAAuB,aAAa,QAApC,EAAE,IAAI,GAAiB,aAAa,KAA9B,EAAE,UAAU,GAAK,aAAa,WAAlB,CAAmB;QACpD,IAAM,UAAU,yBAAQ,OAAO,GAAK,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,OAAO,CAAE,CAAC;QAChE,IAAM,OAAO,yBAAQ,IAAI,GAAK,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,CAAE,CAAC;QACvD,IAAM,aAAa,yBAAQ,UAAU,GAAK,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,UAAU,CAAE,CAAC;QACzE,gBAAgB,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,CAAC,CAAC;QACpF,IAAM,eAAe,GAAG,IAAI,eAAe,CAAC,YAAY,CAAC,CAAC;QAE1D,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,EAAY;gBAAX,GAAG,QAAA,EAAE,KAAK,QAAA;YAC7C,IAAI,KAAK,EAAE,CAAC;gBACV,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC7C,CAAC;iBAAM,CAAC;gBACN,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAC,EAAY;gBAAX,GAAG,QAAA,EAAE,KAAK,QAAA;YAC1C,IAAI,KAAK,EAAE,CAAC;gBACV,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YAClC,CAAC;iBAAM,CAAC;gBACN,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,EAAY;gBAAX,GAAG,QAAA,EAAE,KAAK,QAAA;YAChD,IAAI,KAAK,EAAE,CAAC;gBACV,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC7C,CAAC;iBAAM,CAAC;gBACN,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,eAAe,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC,EACD,CAAC,aAAa,EAAE,YAAY,EAAE,eAAe,CAAC,CAC/C,CAAC;IAEF,kCAAkC;IAClC,IAAA,iBAAS,EAAC;QACR,IAAI,kBAAI,YAAY,CAAC,OAAO,EAAE,QAAE,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3C,IAAM,YAAY,GAAG;;;;;4BACnB,qBAAqB,CAAC,IAAI,CAAC,CAAC;;;;4BAEpB,MAAM,GAAkC,iBAAiB,CAAC,YAAY,CAAC,CAAC;4BACxE,IAAI,GAAsB,cAAc,CAAC,YAAY,CAAC,CAAC;4BACvD,UAAU,GAA4B,oBAAoB,CAAC,YAAY,CAAC,CAAC;4BAE3E,GAAG,GAAG,IAAA,mCAAgB,EAAC,MAAM,CAAC,CAAC;4BACnC,GAAG,GAAG,IAAA,6BAAa,EAAC,GAAG,EAAE,IAAI,CAAC,CAAC;4BAC/B,GAAG,GAAG,IAAA,yCAAmB,EAAC,GAAG,EAAE,UAAU,CAAC,CAAC;4BAC3C,GAAG,GAAG,UAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,cAAI,GAAG,CAAE,CAAC;4BAExD,qBAAM,aAAa,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,eAAe,iBAAA,EAAE,qBAAqB,uBAAA,EAAE,sBAAsB,wBAAA,EAAE,CAAC,EAAA;;4BAAvG,SAAuG,CAAC;;;;4BAExG,eAAe,CAAC,iBAAiB,CAAC,CAAC;4BAC7B,OAAO,GAAG,OAAK,YAAY,KAAK,CAAC,CAAC,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mCAAmC,CAAC;4BAC7F,IAAA,2BAAe,EAAC,OAAO,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;;;4BAE/C,qBAAqB,CAAC,KAAK,CAAC,CAAC;;;;;iBAEhC,CAAC;YACF,KAAK,YAAY,EAAE,CAAC;QACtB,CAAC;IACH,CAAC,EAAE,CAAC,sBAAsB,EAAE,YAAY,CAAC,CAAC,CAAC;IAE3C,OAAO;QACL,YAAY,cAAA;QACZ,kBAAkB,oBAAA;QAClB,aAAa,eAAA;QACb,MAAM,QAAA;QACN,cAAc,gBAAA;QACd,YAAY,cAAA;KACb,CAAC;AACJ,CAAC,CAAC;AA/GW,QAAA,iBAAiB,qBA+G5B","sourcesContent":["import { useAuth0 } from '@auth0/auth0-react';\nimport { Bundle } from 'fhir/r4b';\nimport { enqueueSnackbar } from 'notistack';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { SEARCH_CONFIG } from './constants';\nimport {\n  PartialSearchOptionsState,\n  SearchOptionsFilters,\n  SearchOptionsPagination,\n  SearchOptionsSort,\n  SearchOptionsState,\n  SearchResult,\n  SortField,\n  SortOrder,\n} from './types';\nimport { addSearchPagination } from './utils/addSearchPagination';\nimport { addSearchSort } from './utils/addSearchSort';\nimport { buildSearchQuery } from './utils/buildSearchQuery';\nimport { parseSearchResults } from './utils/parseSearchResults';\n\nconst emptySearchResult: SearchResult = {\n  patients: [],\n  pagination: { next: null, prev: null, totalItems: 0 },\n};\n\nconst projectId = import.meta.env.VITE_APP_PROJECT_ID;\n\nif (!projectId) {\n  throw new Error('PROJECT_ID is not set');\n}\n\nconst fetchPatients = async ({\n  searchUrl,\n  setSearchResult,\n  setArePatientsLoading,\n  getAccessTokenSilently,\n}: {\n  searchUrl: string;\n  setSearchResult: React.Dispatch<React.SetStateAction<SearchResult>>;\n  setArePatientsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  getAccessTokenSilently: () => Promise<string>;\n}): Promise<void> => {\n  setArePatientsLoading(true);\n  try {\n    const token = await getAccessTokenSilently();\n\n    const headers = {\n      accept: 'application/json',\n      'content-type': 'application/json',\n      Authorization: `Bearer ${token}`,\n      'x-zapehr-project-id': projectId,\n    };\n\n    const response = await fetch(searchUrl, {\n      method: 'GET',\n      headers: headers,\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const patientBundle: Bundle = await response.json();\n    const parsedSearchResult = parseSearchResults(patientBundle);\n    setSearchResult(parsedSearchResult);\n  } catch (error) {\n    setSearchResult(emptySearchResult);\n    const message = error instanceof Error ? error.message : 'An error occurred while searching';\n    enqueueSnackbar(message, { variant: 'error' });\n  } finally {\n    setArePatientsLoading(false);\n  }\n};\n\nconst getFiltersFromUrl = (searchParams: URLSearchParams): SearchOptionsFilters => ({\n  givenNames: searchParams.get('givenNames') || '',\n  lastName: searchParams.get('lastName') || '',\n  dob: searchParams.get('dob') || '',\n  pid: searchParams.get('pid') || '',\n  phone: searchParams.get('phone') || '',\n  address: searchParams.get('address') || '',\n  email: searchParams.get('email') || '',\n  // subscriberNumber: searchParams.get('subscriberNumber') || '',\n  status: (searchParams.get('status') as SearchOptionsFilters['status']) || 'All',\n  location: searchParams.get('location') || 'All',\n});\n\nconst getSortFromUrl = (searchParams: URLSearchParams): SearchOptionsSort => ({\n  field: (searchParams.get('field') as SortField) || SEARCH_CONFIG.DEFAULT_SORT.field,\n  order: (searchParams.get('order') as SortOrder) || SEARCH_CONFIG.DEFAULT_SORT.order,\n});\n\nconst getPaginationFromUrl = (searchParams: URLSearchParams): SearchOptionsPagination => ({\n  pageSize: Number(searchParams.get('pageSize')) || SEARCH_CONFIG.DEFAULT_PAGE_SIZE,\n  offset: Number(searchParams.get('offset')) || 0,\n});\n\nconst defaultSearchOptions: SearchOptionsState = {\n  filters: {\n    givenNames: '',\n    lastName: '',\n    dob: '',\n    pid: '',\n    phone: '',\n    address: '',\n    email: '',\n    // subscriberNumber: '',\n    status: 'All',\n    location: 'All',\n  },\n  sort: SEARCH_CONFIG.DEFAULT_SORT,\n  pagination: { pageSize: SEARCH_CONFIG.DEFAULT_PAGE_SIZE, offset: 0 },\n};\n\nexport const usePatientsSearch = (): {\n  searchResult: SearchResult;\n  arePatientsLoading: boolean;\n  searchOptions: SearchOptionsState;\n  setSearchField: ({ field, value }: { field: keyof SearchOptionsFilters; value: string }) => void;\n  resetFilters: () => void;\n  search: (params?: PartialSearchOptionsState) => void;\n} => {\n  const { getAccessTokenSilently } = useAuth0();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchResult, setSearchResult] = useState<SearchResult>(emptySearchResult);\n  const [arePatientsLoading, setArePatientsLoading] = useState<boolean>(false);\n\n  const [searchOptions, setSearchOptions] = useState<SearchOptionsState>({\n    filters: getFiltersFromUrl(searchParams),\n    sort: getSortFromUrl(searchParams),\n    pagination: getPaginationFromUrl(searchParams),\n  });\n\n  const setSearchField = useCallback(\n    ({ field, value }: { field: keyof SearchOptionsFilters; value: string }): void => {\n      setSearchOptions((prev) => ({\n        ...prev,\n        filters: { ...prev.filters, [field]: value },\n      }));\n    },\n    [setSearchOptions]\n  );\n\n  const resetFilters = useCallback((): void => {\n    setSearchOptions(defaultSearchOptions);\n  }, [setSearchOptions]);\n\n  // 1. update state with newSearchOptions\n  //      Note: if newSearchOptions is not provided, it will use the current searchOptions state,\n  //            if provided - it will merge and update current searchOptions with newSearchOptions.\n  // 2. set new search options params to the url\n  const search = useCallback(\n    (newSearchOptions?: PartialSearchOptionsState): void => {\n      const { filters, sort, pagination } = searchOptions;\n      const newFilters = { ...filters, ...newSearchOptions?.filters };\n      const newSort = { ...sort, ...newSearchOptions?.sort };\n      const newPagination = { ...pagination, ...newSearchOptions?.pagination };\n      setSearchOptions({ filters: newFilters, sort: newSort, pagination: newPagination });\n      const newSearchParams = new URLSearchParams(searchParams);\n\n      Object.entries(newFilters).forEach(([key, value]) => {\n        if (value) {\n          newSearchParams.set(key, value.toString());\n        } else {\n          newSearchParams.delete(key);\n        }\n      });\n\n      Object.entries(newSort).forEach(([key, value]) => {\n        if (value) {\n          newSearchParams.set(key, value);\n        } else {\n          newSearchParams.delete(key);\n        }\n      });\n\n      Object.entries(newPagination).forEach(([key, value]) => {\n        if (value) {\n          newSearchParams.set(key, value.toString());\n        } else {\n          newSearchParams.delete(key);\n        }\n      });\n\n      setSearchParams(newSearchParams);\n    },\n    [searchOptions, searchParams, setSearchParams]\n  );\n\n  // run search on url params change\n  useEffect(() => {\n    if ([...searchParams.entries()].length > 0) {\n      const loadPatients = async (): Promise<void> => {\n        setArePatientsLoading(true);\n        try {\n          const filter: Partial<SearchOptionsFilters> = getFiltersFromUrl(searchParams);\n          const sort: SearchOptionsSort = getSortFromUrl(searchParams);\n          const pagination: SearchOptionsPagination = getPaginationFromUrl(searchParams);\n\n          let url = buildSearchQuery(filter);\n          url = addSearchSort(url, sort);\n          url = addSearchPagination(url, pagination);\n          url = `${import.meta.env.VITE_APP_FHIR_API_URL}/${url}`;\n\n          await fetchPatients({ searchUrl: url, setSearchResult, setArePatientsLoading, getAccessTokenSilently });\n        } catch (error) {\n          setSearchResult(emptySearchResult);\n          const message = error instanceof Error ? error.message : 'An error occurred while searching';\n          enqueueSnackbar(message, { variant: 'error' });\n        } finally {\n          setArePatientsLoading(false);\n        }\n      };\n      void loadPatients();\n    }\n  }, [getAccessTokenSilently, searchParams]);\n\n  return {\n    searchResult,\n    arePatientsLoading,\n    searchOptions,\n    search,\n    setSearchField,\n    resetFilters,\n  };\n};\n"]}