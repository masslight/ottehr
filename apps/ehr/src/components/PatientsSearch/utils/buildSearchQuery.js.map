{"version":3,"file":"buildSearchQuery.js","sourceRoot":"","sources":["buildSearchQuery.ts"],"names":[],"mappings":";;;AAEO,IAAM,gBAAgB,GAAG,UAAC,MAAqC;IACpE,IAAM,OAAO,GAAG,YAAY,CAAC;IAC7B,IAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,KAAK,KAAK,EAAE,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,gEAAyD,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAE,CAAC,CAAC;IAC9G,CAAC;IACD,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IAC/C,MAAM,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;IAE3D,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QACjB,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAI,CACT,yBAAkB,MAAM,wDAA8C,MAAM,yEAA+D,MAAM,CAAE,CACpJ,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC,0BAAmB,kBAAkB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAE,CAAC,CAAC;IACxE,CAAC;IACD,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;QACtB,IAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAClD,MAAM,CAAC,IAAI,CAAC,yBAAkB,kBAAkB,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC;IAC7D,CAAC;IAED,IAAI,MAAM,CAAC,MAAM,KAAK,QAAQ;QAAE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SACtD,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU;QAAE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SAC/D,IAAI,MAAM,CAAC,MAAM,KAAK,UAAU;QAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAEnE,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,MAAM,CAAC,IAAI,CAAC,2BAAoB,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAE,CAAC,CAAC;IACxE,CAAC;IAED,IAAI,MAAM,CAAC,GAAG;QAAE,MAAM,CAAC,IAAI,CAAC,oBAAa,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAE,CAAC,CAAC;IAC3E,IAAI,MAAM,CAAC,KAAK;QAAE,MAAM,CAAC,IAAI,CAAC,yBAAkB,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAE,CAAC,CAAC;IAEpF,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAE/B,OAAO,UAAG,OAAO,cAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAE,CAAC;AAC1C,CAAC,CAAC;AAzCW,QAAA,gBAAgB,oBAyC3B","sourcesContent":["import { SearchOptionsFilters } from '../types';\n\nexport const buildSearchQuery = (filter: Partial<SearchOptionsFilters>): string => {\n  const baseUrl = 'r4/Patient';\n  const params: string[] = [];\n\n  if (filter.location && filter.location !== 'All') {\n    params.push(`_has:Appointment:patient:actor:Location.name:contains=${encodeURIComponent(filter.location)}`);\n  }\n  params.push('_revinclude=Appointment:patient');\n  params.push('_include:iterate=Appointment:actor:Location');\n\n  if (filter.phone) {\n    const digits = filter.phone.replace(/\\D/g, '');\n    params.push(\n      `phone:contains=${digits},_has:RelatedPerson:patient:phone:contains=${digits},_has:RelatedPerson:patient:_has:Person:link:phone:contains=${digits}`\n    );\n    params.push('_revinclude=RelatedPerson:patient');\n    params.push('_revinclude:iterate=Person:link');\n  }\n\n  if (filter.lastName) {\n    params.push(`family:contains=${encodeURIComponent(filter.lastName)}`);\n  }\n  if (filter.givenNames) {\n    const names = filter.givenNames.replace(' ', ',');\n    params.push(`given:contains=${encodeURIComponent(names)}`);\n  }\n\n  if (filter.status === 'Active') params.push('active=true');\n  else if (filter.status === 'Deceased') params.push('deceased=true');\n  else if (filter.status === 'Inactive') params.push('active=false');\n\n  if (filter.address) {\n    params.push(`address:contains=${encodeURIComponent(filter.address)}`);\n  }\n\n  if (filter.dob) params.push(`birthdate=${encodeURIComponent(filter.dob)}`);\n  if (filter.email) params.push(`email:contains=${encodeURIComponent(filter.email)}`);\n\n  params.push('_total=accurate');\n\n  return `${baseUrl}?${params.join('&')}`;\n};\n"]}