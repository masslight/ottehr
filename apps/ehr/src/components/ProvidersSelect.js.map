{"version":3,"file":"ProvidersSelect.js","sourceRoot":"","sources":["ProvidersSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Autocomplete, TextField } from '@mui/material';\nimport { Practitioner } from 'fhir/r4b';\nimport { ReactElement } from 'react';\nimport { useApiClients } from '../hooks/useAppClients';\n\ntype CustomFormEventHandler = (event: React.FormEvent<HTMLFormElement>, value: any, field: string) => void;\n\ninterface LocationSelectProps {\n  providers: string[];\n  practitioners?: Practitioner[];\n  handleSubmit?: CustomFormEventHandler;\n}\n\nexport default function ProvidersSelect({ providers, practitioners, handleSubmit }: LocationSelectProps): ReactElement {\n  const { oystehr } = useApiClients();\n  const practitionerIDToName: { [id: string]: string } = {};\n  practitioners?.map((practitioner) => {\n    if (practitioner.id && practitioner.name != undefined) {\n      practitionerIDToName[practitioner.id] = oystehr?.fhir.formatHumanName(practitioner.name[0]) || 'Unknown provider';\n    }\n  });\n  return (\n    <Autocomplete\n      id=\"providers\"\n      value={providers.map((provider) => ({\n        value: provider,\n        label: practitionerIDToName[provider] == undefined ? 'Loading...' : practitionerIDToName[provider],\n      }))}\n      isOptionEqualToValue={(option, tempValue) => option.value === tempValue.value}\n      options={\n        practitioners\n          ? practitioners\n              // .filter((practitioner) => practitioner.name != undefined)\n              .map((practitioner) => ({\n                value: practitioner.id,\n                label: practitioner.name != undefined ? oystehr?.fhir.formatHumanName(practitioner.name[0]) : 'Unknown',\n              }))\n          : []\n      }\n      renderOption={(props, option) => {\n        return (\n          <li {...props} key={option.value}>\n            {option.label}\n          </li>\n        );\n      }}\n      // getOptionLabel={(option) => option.label}\n      onChange={(event, providers) => {\n        const providerIDs = providers.map((provider) => provider.value);\n        if (providerIDs) {\n          localStorage.setItem('selectedProviders', JSON.stringify(providerIDs));\n        } else {\n          localStorage.removeItem('selectedProviders');\n        }\n\n        if (handleSubmit) {\n          handleSubmit(event as any, providerIDs, 'providers');\n        }\n      }}\n      multiple\n      renderInput={(params) => <TextField name=\"providers\" {...params} label=\"Providers\" required={false} />}\n    />\n  );\n}\n"]}