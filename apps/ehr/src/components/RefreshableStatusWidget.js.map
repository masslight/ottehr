{"version":3,"file":"RefreshableStatusWidget.js","sourceRoot":"","sources":["RefreshableStatusWidget.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,sDAAqD;AACrD,0CAAoF;AACpF,+BAAiC;AAEjC,uDAAuC;AAEvC,IAAM,UAAU,GAAG,IAAA,2BAAM,EAAC,eAAI,CAAC,CAAC,cAAM,OAAA,CAAC;IACrC,YAAY,EAAE,KAAK;IACnB,OAAO,EAAE,OAAO;IAChB,MAAM,EAAE,CAAC;IACT,MAAM,EAAE,MAAM;CACf,CAAC,EALoC,CAKpC,CAAC,CAAC;AAiBG,IAAM,qBAAqB,GAAG,UAAqC,EAO5C;;QAN5B,MAAM,YAAA,EACN,QAAQ,cAAA,EACR,cAAc,oBAAA,EACd,oBAAoB,EAApB,YAAY,mBAAG,KAAK,KAAA,EACpB,qBAAwB,EAAxB,aAAa,mBAAG,QAAQ,KAAA,EACxB,aAAa,mBAAA;IAEb,IAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;IAEpC,IAAM,qBAAqB,GAAW,CAAC;QACrC,IAAM,EAAE,GAAG,gBAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC5C,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YACf,OAAO,wBAAiB,gBAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAE,CAAC;QACpF,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC,EAAE,CAAC;IAEL,OAAO,CACL,CAAC,cAAG,CACF,EAAE,CAAC,CAAC;YACF,OAAO,EAAE,MAAM;YACf,aAAa,eAAA;YACb,cAAc,EAAE,eAAe;YAC/B,UAAU,EAAE,aAAa,KAAK,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ;SAC/D,CAAC,CAEF;MAAA,CAAC,UAAU,CACT,KAAK,CAAC,CAAC,MAAM,CAAC,CACd,EAAE,CAAC,CAAC;YACF,eAAe,EAAE,UAAU,CAAC,OAAO;YACnC,KAAK,EAAE,UAAU,CAAC,SAAS;YAC3B,kBAAkB,aAChB,OAAO,EAAE,CAAC,EACV,UAAU,EAAE,MAAM,EAClB,QAAQ,EAAE,QAAQ,IACf,CAAC,MAAA,UAAU,CAAC,MAAM,mCAAI,EAAE,CAAC,CAC7B;SACF,CAAC,EAEJ;MAAA,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CACzB,CAAC,cAAG,CACF,EAAE,CAAC,CAAC;gBACF,OAAO,EAAE,MAAM;gBACf,aAAa,EAAE,KAAK;gBACpB,cAAc,EAAE,eAAe;gBAC/B,UAAU,EAAE,QAAQ;aACrB,CAAC,CAEF;UAAA,CAAC,qBAAU,CACT,EAAE,CAAC,CAAC;gBACF,UAAU,EAAE,OAAO;gBACnB,KAAK,EAAE,oBAAoB;gBAC3B,QAAQ,EAAE,MAAM;gBAChB,UAAU,EAAE,MAAM;gBAClB,UAAU,EAAE,KAAK;aAClB,CAAC,CAEF;YAAA,CAAC,qBAAqB,CACxB;UAAA,EAAE,qBAAU,CACZ;UAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAC9C;YAAA,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,2BAAgB,CAAC,IAAI,CAAC,MAAM,EAAG,CAAC,CAAC,CAAC,CAAC,+BAAc,CAAC,KAAK,CAAC,SAAS,EAAG,CACvF;UAAA,EAAE,qBAAU,CACd;QAAA,EAAE,cAAG,CAAC,CACP,CACH;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAnEW,QAAA,qBAAqB,yBAmEhC","sourcesContent":["import { RefreshRounded } from '@mui/icons-material';\nimport { Box, Chip, CircularProgress, IconButton, Typography } from '@mui/material';\nimport { DateTime } from 'luxon';\nimport { ReactElement } from 'react';\nimport styled from 'styled-components';\n\nconst StyledChip = styled(Chip)(() => ({\n  borderRadius: '8px',\n  padding: '0 9px',\n  margin: 0,\n  height: '24px',\n}));\n\nexport interface StatusStyleObject {\n  bgColor: string;\n  textColor: string;\n  textSX?: React.CSSProperties;\n}\n\ninterface StatusChipProps<StatusType extends string | number> {\n  status: StatusType;\n  styleMap: Record<StatusType, StatusStyleObject>;\n  lastRefreshISO: string;\n  isRefreshing?: boolean;\n  flexDirection?: 'row' | 'column';\n  handleRefresh?: () => void;\n}\n\nexport const RefreshableStatusChip = <StatusType extends string | number>({\n  status,\n  styleMap,\n  lastRefreshISO,\n  isRefreshing = false,\n  flexDirection = 'column',\n  handleRefresh,\n}: StatusChipProps<StatusType>): ReactElement => {\n  const chipColors = styleMap[status];\n\n  const lastRefreshDateString: string = (() => {\n    const dt = DateTime.fromISO(lastRefreshISO);\n    if (dt.isValid) {\n      return `Last checked: ${DateTime.fromISO(lastRefreshISO).toFormat('MM/dd/yyyy')}`;\n    }\n    return '';\n  })();\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection,\n        justifyContent: 'space-between',\n        alignItems: flexDirection === 'column' ? 'flex-end' : 'center',\n      }}\n    >\n      <StyledChip\n        label={status}\n        sx={{\n          backgroundColor: chipColors.bgColor,\n          color: chipColors.textColor,\n          '& .MuiChip-label': {\n            padding: 0,\n            fontWeight: 'bold',\n            fontSize: '0.7rem',\n            ...(chipColors.textSX ?? {}),\n          },\n        }}\n      />\n      {Boolean(handleRefresh) && (\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <Typography\n            sx={{\n              fontFamily: 'Rubik',\n              color: 'rgba(0, 0, 0, 0.6)',\n              fontSize: '12px',\n              lineHeight: '15px',\n              fontWeight: '400',\n            }}\n          >\n            {lastRefreshDateString}\n          </Typography>\n          <IconButton onClick={handleRefresh} size=\"small\">\n            {isRefreshing ? <CircularProgress size=\"24px\" /> : <RefreshRounded color=\"primary\" />}\n          </IconButton>\n        </Box>\n      )}\n    </Box>\n  );\n};\n"]}