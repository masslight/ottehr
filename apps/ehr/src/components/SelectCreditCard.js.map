{"version":3,"file":"SelectCreditCard.js","sourceRoot":"","sources":["SelectCreditCard.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  Alert,\n  Autocomplete,\n  AutocompleteRenderInputParams,\n  CircularProgress,\n  FormHelperText,\n  Snackbar,\n  TextField,\n} from '@mui/material';\nimport { Box } from '@mui/system';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js/dist';\nimport { Patient } from 'fhir/r4b';\nimport { FC, useState } from 'react';\nimport { useGetPaymentMethods } from 'src/hooks/useGetPaymentMethods';\nimport { useSetDefaultPaymentMethod } from 'src/hooks/useSetDefaultPaymentMethod';\nimport { useSetupStripe } from 'src/hooks/useSetupStripe';\nimport { AddCreditCardForm } from 'ui-components';\nimport { CreditCardInfo } from 'utils';\n\ninterface CreditCardContentProps {\n  patient: Patient;\n  selectedCardId: string;\n  handleCardSelected: (newVal: string | undefined) => void;\n  error?: string;\n}\n\nlet stripePromise = loadStripe(import.meta.env.VITE_APP_STRIPE_KEY);\n\nconst labelForCard = (card: CreditCardInfo): string => {\n  return `XXXX - XXXX - XXXX - ${card.lastFour}${card.default ? ' (Primary)' : ''}`;\n};\n\nconst NEW_CARD = { id: 'new', label: 'Add new card' };\n\nconst CreditCardContent: FC<CreditCardContentProps> = (props) => {\n  const { patient, selectedCardId, handleCardSelected, error } = props;\n  const [cards, setCards] = useState<CreditCardInfo[]>([]);\n\n  const [errorMessage, setErrorMessage] = useState<string | undefined>(undefined);\n\n  const {\n    data: setupData,\n    isFetching: isSetupDataFetching,\n    isLoading: isSetupDataLoading,\n    refetch: refetchSetupData,\n    isRefetching: isSetupDataRefetching,\n  } = useSetupStripe(patient?.id);\n\n  const { mutate: setDefault } = useSetDefaultPaymentMethod(patient?.id);\n\n  const {\n    isFetching: cardsAreLoading,\n    isFetched: cardsFetched,\n    refetch: refetchPaymentMethods,\n  } = useGetPaymentMethods({\n    beneficiaryPatientId: patient?.id,\n    setupCompleted: Boolean(setupData),\n    onSuccess: (data) => {\n      setCards(data.cards ?? []);\n      const defaultCard = data.cards.find((card) => card.default);\n      if (defaultCard && !selectedCardId) {\n        handleCardSelected(defaultCard.id);\n      }\n      void refetchSetupData();\n    },\n  });\n\n  const showNewCard = (() => {\n    const hasNone = cardsFetched && !cardsAreLoading && cards.length === 0;\n    const addingOne = selectedCardId === NEW_CARD.id;\n    return hasNone || addingOne;\n  })();\n\n  const initializing = isSetupDataFetching || isSetupDataLoading;\n\n  const cardOptions = [\n    ...cards.map((card) => ({ id: card.id, label: labelForCard(card) })),\n    { id: 'new', label: 'Add new card' },\n  ];\n\n  const selectedCard = cardOptions.find((card) => card.id === selectedCardId);\n  const someDefault = cards.some((card) => card.default);\n\n  const handleNewPaymentMethod = async (id: string, makeDefault: boolean): Promise<void> => {\n    if (makeDefault) {\n      setDefault({\n        paymentMethodId: id,\n        onSuccess: async () => {\n          await refetchPaymentMethods();\n        },\n        onError: (error) => {\n          console.error('setDefault error', error);\n          setErrorMessage('Unable to set default payment method. Please try again later or select a card.');\n        },\n      });\n    } else {\n      await refetchPaymentMethods();\n    }\n    handleCardSelected(id);\n    stripePromise = loadStripe(import.meta.env.VITE_APP_STRIPE_KEY);\n  };\n\n  if (initializing) {\n    return (\n      <Box\n        sx={{\n          width: '100%',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <CircularProgress />\n      </Box>\n    );\n  }\n  const currentValue = selectedCard;\n  const showCardList = cards.length > 0;\n  return (\n    <>\n      <Autocomplete\n        size=\"small\"\n        aria-label=\"Default card selection radio group\"\n        fullWidth\n        sx={{\n          '.MuiFormControlLabel-label': {\n            width: '100%',\n          },\n          gap: 1,\n          display: showCardList ? 'initial' : 'none',\n          marginBottom: 2,\n        }}\n        options={cardOptions}\n        renderOption={(props, option) => (\n          <li {...props} key={option.id}>\n            {option.label}\n          </li>\n        )}\n        value={currentValue ?? null}\n        renderInput={(params: AutocompleteRenderInputParams) => {\n          return (\n            <Box>\n              <TextField\n                {...params}\n                fullWidth\n                required\n                label=\"Credit card\"\n                variant=\"outlined\"\n                error={Boolean(error)}\n                InputLabelProps={{ shrink: true }}\n                inputProps={{\n                  ...params.inputProps,\n                  autoComplete: 'off',\n                }}\n              />\n              {error && <FormHelperText error={Boolean(error)}>{error}</FormHelperText>}\n            </Box>\n          );\n        }}\n        onChange={(_event, value) => {\n          handleCardSelected(value?.id);\n        }}\n      />\n\n      <Elements stripe={stripePromise} options={{ clientSecret: setupData }}>\n        <Box\n          sx={{\n            width: '100%',\n            display: showNewCard ? 'flex' : 'none',\n            justifyContent: 'center',\n            alignItems: 'flex-start',\n            flexDirection: 'column',\n            marginTop: 2,\n          }}\n        >\n          <AddCreditCardForm\n            clientSecret={setupData ?? ''}\n            isLoading={false}\n            disabled={false}\n            selectPaymentMethod={(id) => {\n              void handleNewPaymentMethod(id, !someDefault);\n            }}\n            condition=\"I have obtained the consent to add a card on file from the patient\"\n          />\n          {error && !showCardList && <FormHelperText error={Boolean(error)}>{error}</FormHelperText>}\n        </Box>\n      </Elements>\n\n      <Snackbar\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n        open={errorMessage !== undefined}\n        autoHideDuration={5000}\n        onClose={() => setErrorMessage(undefined)}\n      >\n        <Alert onClose={() => setErrorMessage(undefined)} severity=\"error\" variant=\"filled\">\n          {errorMessage}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default CreditCardContent;\n"]}