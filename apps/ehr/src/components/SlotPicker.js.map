{"version":3,"file":"SlotPicker.js","sourceRoot":"","sources":["SlotPicker.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Button, Tab, Tabs, Typography, useTheme } from '@mui/material';\nimport { Slot } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { ReactNode, SyntheticEvent, useCallback, useEffect, useMemo, useState } from 'react';\nimport { nextAvailableFrom } from 'utils';\nimport { Slots } from './Slots';\n\ninterface TabPanelProps {\n  children?: ReactNode;\n  dir?: string;\n  index: number;\n  value: number;\n}\n\nconst DATETIME_FULL_NO_YEAR = 'MMMM d, h:mm a ZZZZ';\nconst DATE_FULL_NO_YEAR = 'EEEE, MMMM d';\nfunction createLocalDateTime(dateTime: DateTime | undefined, timezone: string): DateTime | undefined {\n  let localDateTime: DateTime | undefined;\n  if (dateTime !== undefined) {\n    localDateTime = dateTime.setZone(timezone);\n  }\n  return localDateTime;\n}\n\nconst TabPanel = (props: TabPanelProps): JSX.Element => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`appointment-picker-tabpanel-${index}`}\n      aria-labelledby={`appointment-picker-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ pt: 3, pb: 3 }}>{children}</Box>}\n    </div>\n  );\n};\n\nconst tabProps = (\n  index: number\n): {\n  id: string;\n  'aria-controls': string;\n} => {\n  return {\n    id: `appointment-picker-tab-${index}`,\n    'aria-controls': `appointment-picker-tabpanel-${index}`,\n  };\n};\ninterface SlotPickerProps {\n  slotData: Slot[] | undefined;\n  slotsLoading: boolean;\n  timezone: string;\n  selectedSlot: Slot | undefined;\n  setSelectedSlot: (slot: Slot | undefined) => void;\n}\n\nconst SlotPicker = ({\n  slotData,\n  slotsLoading,\n  timezone,\n  selectedSlot,\n  setSelectedSlot,\n}: SlotPickerProps): JSX.Element => {\n  const theme = useTheme();\n  const [currentTab, setCurrentTab] = useState(0);\n  const [nextDay, setNextDay] = useState<boolean>(false);\n\n  const [slotsList, daySlotsMap] = useMemo(() => {\n    if (slotData) {\n      const slots = [...slotData];\n\n      // This maps days to an array of slots\n      const map: { [ord: number]: Slot[] } = slots.reduce(\n        (accumulator, current) => {\n          const dateOfCurrent = DateTime.fromISO(current.start, { zone: timezone });\n          const existing = accumulator[dateOfCurrent.ordinal];\n          if (existing) {\n            existing.push(current);\n          } else {\n            accumulator[dateOfCurrent.ordinal] = [current];\n          }\n          return accumulator;\n        },\n        {} as { [ord: number]: Slot[] }\n      );\n\n      return [slots, map];\n    }\n    return [[], {}];\n  }, [timezone, slotData]);\n\n  const { firstAvailableDay, secondAvailableDay } = useMemo(() => {\n    let firstAvailableDay: DateTime | undefined = undefined;\n    let secondAvailableDay: DateTime | undefined = undefined;\n    const currentTime = DateTime.now().setZone(timezone);\n    if (slotsList == null || slotsList.length === 0) {\n      return { firstAvailableDay, secondAvailableDay, lastSlot: undefined };\n    }\n\n    firstAvailableDay = createLocalDateTime(DateTime.fromISO(slotsList[0].start), timezone);\n    const firstSlot = slotsList[0];\n    const firstTime = DateTime.fromISO(firstSlot.start)?.setZone(timezone).toISODate();\n    const currentExistingTime = currentTime?.setZone(timezone)?.toISODate();\n    if (!firstTime || !currentExistingTime) {\n      return { firstAvailableDay, secondAvailableDay, lastSlot: undefined };\n    } else if (firstTime > currentExistingTime) {\n      setNextDay(true);\n    }\n    if (firstAvailableDay) {\n      secondAvailableDay = nextAvailableFrom(firstAvailableDay, slotsList, timezone);\n      if (secondAvailableDay) {\n        setNextDay(false);\n      }\n    }\n    return { firstAvailableDay, secondAvailableDay };\n  }, [slotsList, timezone]);\n\n  const isFirstAppointment = useMemo(() => {\n    return slotsList && slotsList[0] ? selectedSlot === slotsList[0] : false;\n  }, [selectedSlot, slotsList]);\n\n  const handleChange = (_: SyntheticEvent, newCurrentTab: number): void => {\n    setCurrentTab(newCurrentTab);\n  };\n\n  const [selectedOtherDate, setSelectedOtherDate] = useState<DateTime | undefined>();\n\n  useEffect(() => {\n    if (selectedOtherDate === undefined && secondAvailableDay != undefined) {\n      setSelectedOtherDate(nextAvailableFrom(secondAvailableDay, slotsList, timezone));\n    }\n  }, [secondAvailableDay, selectedOtherDate, slotsList, timezone]);\n\n  const selectedDate = useMemo(() => {\n    if (currentTab === 0) {\n      return firstAvailableDay;\n    } else if (currentTab === 1) {\n      return secondAvailableDay;\n    } else {\n      return selectedOtherDate;\n    }\n  }, [currentTab, firstAvailableDay, secondAvailableDay, selectedOtherDate]);\n\n  const getSlotsForDate = useCallback(\n    (date: DateTime | undefined): Slot[] => {\n      if (date === undefined) {\n        return [];\n      }\n      return daySlotsMap[date.ordinal] ?? [];\n    },\n    [daySlotsMap]\n  );\n\n  const slotsExist = getSlotsForDate(firstAvailableDay).length > 0 || getSlotsForDate(secondAvailableDay).length > 0;\n  return (\n    <Box sx={{ backgroundColor: theme.palette.background.default, padding: 2, borderRadius: 2, marginTop: 2 }}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: { xs: 'column', md: 'row' },\n          justifyContent: 'space-between',\n          alignItems: { xs: 'flex-start', md: 'center' },\n        }}\n      >\n        <Typography variant=\"h3\" color=\"primary\" fontSize=\"20px\">\n          Select check-in date and time\n        </Typography>\n        {selectedDate?.offsetNameShort && (\n          <Typography color=\"theme.palette.text.secondary\" sx={{ pt: { xs: 1.5, md: 0.5 } }}>\n            Time Zone: {selectedDate.setLocale('en-us')?.offsetNameShort}\n          </Typography>\n        )}\n      </Box>\n      {slotsList && selectedDate != undefined && slotsExist ? (\n        <Button\n          variant={isFirstAppointment ? 'contained' : 'outlined'}\n          sx={{\n            color: isFirstAppointment ? theme.palette.primary.contrastText : theme.palette.text.primary,\n            border: isFirstAppointment\n              ? `1px solid ${theme.palette.primary.main}`\n              : `1px solid ${theme.palette.divider}`,\n            p: 1,\n            borderRadius: '8px',\n            textAlign: 'center',\n            mt: 2.5,\n            mb: 1.5,\n            width: '100%',\n            textTransform: 'none',\n            fontWeight: 400,\n            display: { xs: 'block', md: 'inline' },\n          }}\n          onClick={() => setSelectedSlot(slotsList[0])}\n          type=\"button\"\n          className=\"first-button\"\n        >\n          <span style={{ fontWeight: 500 }}>First available time:&nbsp;</span>\n          {firstAvailableDay?.toFormat(DATETIME_FULL_NO_YEAR)}\n        </Button>\n      ) : (\n        <Box\n          sx={{\n            border: `1px solid ${theme.palette.divider}`,\n            p: 1,\n            borderRadius: '8px',\n            textAlign: 'center',\n            mt: 1,\n            display: slotsExist ? 'inherit' : 'none',\n          }}\n        >\n          <Typography variant=\"body2\">Calculating...</Typography>\n        </Box>\n      )}\n      {!slotsLoading ? (\n        <>\n          {firstAvailableDay ? (\n            <Box>\n              <Box sx={{ width: '100%' }}>\n                <Tabs\n                  value={currentTab}\n                  onChange={handleChange}\n                  TabIndicatorProps={{\n                    style: {\n                      // background: otherColors.borderLightBlue,\n                      background: theme.palette.secondary.main,\n                      height: '5px',\n                      borderRadius: '2.5px',\n                    },\n                  }}\n                  variant=\"fullWidth\"\n                  aria-label=\"Appointment tabs for switching between appointments slots for today and tomorrow\"\n                >\n                  <Tab\n                    label={nextDay ? 'Tomorrow' : 'Today'}\n                    {...tabProps(0)}\n                    sx={{\n                      color: currentTab == 0 ? theme.palette.secondary.main : theme.palette.text.secondary,\n                      opacity: 1,\n                      textTransform: 'capitalize',\n                      fontWeight: 500,\n                    }}\n                  />\n                  {secondAvailableDay && (\n                    <Tab\n                      label=\"Tomorrow\"\n                      {...tabProps(1)}\n                      sx={{\n                        color: currentTab == 1 ? theme.palette.secondary.main : theme.palette.text.secondary,\n                        opacity: 1,\n                        textTransform: 'capitalize',\n                        fontWeight: 500,\n                      }}\n                    />\n                  )}\n                </Tabs>\n              </Box>\n              <Box>\n                <TabPanel value={currentTab} index={0} dir={theme.direction}>\n                  <Typography\n                    variant=\"h3\"\n                    color=\"#000000\"\n                    sx={{ textAlign: 'center', fontSize: '20px', color: theme.palette.primary.main }}\n                  >\n                    {firstAvailableDay?.toFormat(DATE_FULL_NO_YEAR)}\n                  </Typography>\n                  <Slots\n                    slots={getSlotsForDate(firstAvailableDay)}\n                    timezone={timezone}\n                    selectedSlot={selectedSlot}\n                    setSelectedSlot={setSelectedSlot}\n                  />\n                </TabPanel>\n                <TabPanel value={currentTab} index={1} dir={theme.direction}>\n                  <Typography\n                    variant=\"h3\"\n                    color=\"#000000\"\n                    sx={{ textAlign: 'center', fontSize: '20px', color: theme.palette.primary.main }}\n                  >\n                    {secondAvailableDay?.toFormat(DATE_FULL_NO_YEAR)}\n                  </Typography>\n                  <Slots\n                    slots={getSlotsForDate(secondAvailableDay)}\n                    timezone={timezone}\n                    selectedSlot={selectedSlot}\n                    setSelectedSlot={setSelectedSlot}\n                  />\n                </TabPanel>\n              </Box>\n            </Box>\n          ) : (\n            <Typography variant=\"body2\" color=\"#000000\" sx={{ textAlign: 'center', marginTop: '30px' }}>\n              There are no slots available, please come in when we are open.\n            </Typography>\n          )}\n        </>\n      ) : (\n        <Typography variant=\"body2\" m={1} textAlign={'center'}>\n          Loading...\n        </Typography>\n      )}\n    </Box>\n  );\n};\n\nexport default SlotPicker;\n"]}