{"version":3,"file":"Slots.js","sourceRoot":"","sources":["Slots.tsx"],"names":[],"mappings":";;AAYA,sBAqCC;AAjDD,0CAAmE;AAEnE,+BAAiC;AACjC,4DAAyD;AASzD,SAAgB,KAAK,CAAC,EAA8D;QAA5D,KAAK,WAAA,EAAE,QAAQ,cAAA,EAAE,YAAY,kBAAA,EAAE,eAAe,qBAAA;IACpE,IAAM,KAAK,GAAG,IAAA,mBAAQ,GAAE,CAAC;IAEzB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,OAAO,CACL,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,CAC7D;;MACF,EAAE,qBAAU,CAAC,CACd,CAAC;IACJ,CAAC;IAED,OAAO,CACL,CAAC,eAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAC1D;MAAA,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,GAAG;YACnB,IAAM,SAAS,GAAG,gBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAM,yBAAyB,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAM,UAAU,GAAG,YAAY,KAAK,IAAI,CAAC;YACzC,OAAO,CACL,CAAC,eAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAClB;YAAA,CAAC,iBAAM,CACL,EAAE,CAAC,CAAC;oBACF,KAAK,EAAE,OAAO;oBACd,WAAW,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO;oBAClC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG;iBACnC,CAAC,CACF,OAAO,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,CAAC,CAC/C,KAAK,CAAC,SAAS,CACf,OAAO,CAAC,CAAC,cAAM,OAAA,eAAe,CAAC,IAAI,CAAC,EAArB,CAAqB,CAAC,CACrC,WAAW,CAAC,CAAC,2BAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAEpC;cAAA,CAAC,yBAAyB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAC/C;YAAA,EAAE,iBAAM,CACV;UAAA,EAAE,eAAI,CAAC,CACR,CAAC;QACJ,CAAC,CAAC,CACJ;IAAA,EAAE,eAAI,CAAC,CACR,CAAC;AACJ,CAAC","sourcesContent":["import { Button, Grid, Typography, useTheme } from '@mui/material';\nimport { Slot } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { dataTestIds } from '../constants/data-test-ids';\n\ninterface SlotsProps {\n  slots: Slot[];\n  timezone: string;\n  selectedSlot: Slot | undefined;\n  setSelectedSlot: (slot: Slot | undefined) => void;\n}\n\nexport function Slots({ slots, timezone, selectedSlot, setSelectedSlot }: SlotsProps): JSX.Element {\n  const theme = useTheme();\n\n  if (slots.length === 0) {\n    return (\n      <Typography variant=\"body2\" sx={{ mt: 1, textAlign: 'center' }}>\n        There are no slots available, please walk-in.\n      </Typography>\n    );\n  }\n\n  return (\n    <Grid container spacing={1} justifyContent={'center'} mt={1}>\n      {slots.map((slot, idx) => {\n        const startDate = DateTime.fromISO(slot.start);\n        const startDateTimezoneAdjusted = startDate.setZone(timezone);\n        const isSelected = selectedSlot === slot;\n        return (\n          <Grid key={idx} item>\n            <Button\n              sx={{\n                width: '110px',\n                borderColor: theme.palette.divider,\n                fontWeight: isSelected ? 700 : 400,\n              }}\n              variant={isSelected ? 'contained' : 'outlined'}\n              color=\"primary\"\n              onClick={() => setSelectedSlot(slot)}\n              data-testid={dataTestIds.slots.slot}\n            >\n              {startDateTimezoneAdjusted.toFormat('h:mm a')}\n            </Button>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n}\n"]}