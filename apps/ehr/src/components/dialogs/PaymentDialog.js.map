{"version":3,"file":"PaymentDialog.js","sourceRoot":"","sources":["PaymentDialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup';\nimport LoadingButton from '@mui/lab/LoadingButton';\nimport {\n  Box,\n  Button,\n  capitalize,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  InputLabel,\n  OutlinedInput,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@mui/material';\nimport { Patient } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { ReactElement, useEffect } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport {\n  CashOrCardPayment,\n  DOB_DATE_FORMAT,\n  formatPhoneNumberDisplay,\n  getFirstName,\n  getLastName,\n  getMiddleName,\n  getPhoneNumberForIndividual,\n  sleep,\n} from 'utils';\nimport * as yup from 'yup';\nimport { dataTestIds } from '../../constants/data-test-ids';\nimport SelectCreditCard from '../SelectCreditCard';\n\ninterface PaymentDialogProps {\n  handleClose: () => void;\n  submitPayment: (data: CashOrCardPayment) => Promise<void>;\n  isSubmitting: boolean;\n  open: boolean;\n  patient: Patient;\n}\n\nconst PatientHeader = (props: { patient: Patient }): ReactElement => {\n  const { patient } = props;\n  const patientFirstName = getFirstName(patient);\n  const patientLastName = getLastName(patient);\n  const middleName = getMiddleName(patient);\n  const nameElements = [patientLastName, patientFirstName, middleName].filter(Boolean);\n  const patientDOB = patient.birthDate ? DateTime.fromISO(patient.birthDate).toFormat(DOB_DATE_FORMAT) : 'Unknown';\n  const dobString = `DOB: ${patientDOB}`;\n  const genderString = capitalize(patient.gender ?? '');\n  const phoneNumber = formatPhoneNumberDisplay(getPhoneNumberForIndividual(patient) ?? '');\n\n  return (\n    <Grid container direction=\"column\" sx={{ marginBottom: 2 }} spacing={0.5}>\n      <Grid item xs={12}>\n        <Typography variant=\"body1\" color=\"rgba(0, 0, 0, 0.87)\" fontWeight={500}>\n          {`${nameElements.join(', ')}`}\n        </Typography>\n      </Grid>\n      <Grid container item direction=\"row\" spacing={2}>\n        <Grid item>\n          <Typography variant=\"body2\" color=\"rgba(0, 0, 0, 0.87)\">\n            {dobString}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body2\" color=\"rgba(0, 0, 0, 0.87)\">\n            {genderString}\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"body2\" color=\"rgba(0, 0, 0, 0.87)\">\n            {phoneNumber}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst paymentSchema = yup.object().shape({\n  amount: yup\n    .number()\n    .typeError('Amount must be a number')\n    .required('Amount is required')\n    .positive('Amount must be greater than 0'),\n  paymentMethod: yup\n    .string()\n    .oneOf(['card', 'cash', 'check'], 'Invalid payment method')\n    .required('Payment method is required'),\n  creditCard: yup.string().when('paymentMethod', {\n    is: (val: string) => val === 'card',\n    then: (schema) =>\n      schema\n        .required('Credit card selection required')\n        .matches(RegExp('pm_[a-zA-Z0-9]{24,24}'), 'Credit card selection required')\n        .required(),\n    otherwise: (schema) => schema.notRequired().nullable(),\n  }),\n});\n\nexport default function ({\n  submitPayment,\n  handleClose,\n  open,\n  patient,\n  isSubmitting,\n}: PaymentDialogProps): ReactElement {\n  const buttonSx = {\n    fontWeight: 500,\n    textTransform: 'none',\n    borderRadius: 6,\n  };\n\n  const { handleSubmit, register, watch, formState, control, setValue, reset } = useForm({\n    defaultValues: {\n      amount: 0,\n      paymentMethod: 'card',\n      creditCard: '',\n    },\n    resolver: yupResolver(paymentSchema),\n    mode: 'onBlur',\n  });\n\n  useEffect(() => {\n    const resetFormAfterDelay = async (): Promise<void> => {\n      await sleep(250);\n      reset();\n    };\n    if (!open) {\n      void resetFormAfterDelay();\n    }\n  }, [open, reset]);\n\n  const paymentMethod = watch('paymentMethod'); // Default to 'card'\n  const creditCard = watch('creditCard');\n\n  const structureDataAndSubmit = async (data: any): Promise<void> => {\n    const amount = parseFloat(data.amount);\n    const paymentMethod = data.paymentMethod;\n    const creditCard = data.creditCard;\n    const paymentData: CashOrCardPayment = {\n      amountInCents: Math.round(amount * 100),\n      paymentMethod,\n      paymentMethodId: creditCard || undefined,\n    };\n    await submitPayment(paymentData);\n  };\n\n  const handleDialogClose = (): void => {\n    handleClose();\n  };\n\n  return (\n    <Dialog\n      open={open}\n      onClose={handleDialogClose}\n      disableScrollLock\n      sx={{\n        '.MuiPaper-root': {\n          padding: 1,\n          width: '700px',\n          maxWidth: 'initial',\n        },\n      }}\n    >\n      <form onSubmit={handleSubmit(structureDataAndSubmit)} noValidate>\n        <DialogTitle variant=\"h4\" color=\"primary.dark\" sx={{ width: '100%' }}>\n          Payment\n        </DialogTitle>\n        <DialogContent>\n          <Grid container direction=\"column\" spacing={2} sx={{ marginBottom: 2 }}>\n            <Grid item>\n              <PatientHeader patient={patient} />\n            </Grid>\n            <Grid item sx={{ marginBottom: 1 }}>\n              <FormControl variant=\"outlined\" fullWidth required>\n                <InputLabel shrink required error={Boolean(formState.errors.amount)}>\n                  Amount\n                </InputLabel>\n                <OutlinedInput\n                  id=\"amount\"\n                  label=\"Amount, $\"\n                  placeholder=\"Enter amount in dollars\"\n                  size=\"small\"\n                  notched\n                  error={Boolean(formState.errors.amount)}\n                  {...register('amount', { required: true })}\n                />\n                {formState.errors.amount && (\n                  <FormHelperText error={true}>{formState.errors.amount?.message}</FormHelperText>\n                )}\n              </FormControl>\n            </Grid>\n            <Grid item>\n              <FormControl variant=\"outlined\" fullWidth required>\n                <InputLabel shrink id=\"payment-method-radio-group\">\n                  Payment method\n                </InputLabel>\n                <Controller\n                  name=\"paymentMethod\"\n                  control={control}\n                  aria-labelledby=\"payment-method-radio-group\"\n                  render={({ field }) => (\n                    <RadioGroup row {...field}>\n                      <FormControlLabel value=\"card\" control={<Radio />} label=\"Card\" />\n                      <FormControlLabel value=\"cash\" control={<Radio />} label=\"Cash\" />\n                      <FormControlLabel value=\"check\" control={<Radio />} label=\"Check\" />\n                    </RadioGroup>\n                  )}\n                />\n              </FormControl>\n            </Grid>\n          </Grid>\n          <Grid\n            item\n            sx={{\n              minHeight: '150px',\n            }}\n          >\n            <Box\n              sx={{\n                display: paymentMethod === 'card' ? 'initial' : 'none',\n              }}\n            >\n              <SelectCreditCard\n                patient={patient}\n                selectedCardId={creditCard ?? ''}\n                handleCardSelected={(newVal: string | undefined) => {\n                  setValue('creditCard', newVal ?? '');\n                }}\n                error={formState.errors.creditCard?.message}\n              />\n            </Box>\n          </Grid>\n        </DialogContent>\n        <DialogActions sx={{ justifyContent: 'space-between', marginLeft: 1 }}>\n          <Button variant=\"text\" onClick={handleDialogClose} size=\"medium\" sx={buttonSx}>\n            Cancel\n          </Button>\n          <LoadingButton\n            data-testid={dataTestIds.visitDetailsPage.cancelVisitDialogue}\n            loading={isSubmitting}\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"medium\"\n            sx={buttonSx}\n          >\n            Process Payment\n          </LoadingButton>\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n}\n"]}