{"version":3,"file":"FormAutocomplete.js","sourceRoot":"","sources":["FormAutocomplete.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAA2E;AAE3E,mDAA6F;AAmBtF,IAAM,gBAAgB,GAAG,UAAwB,EAU7B;IATzB,IAAA,IAAI,UAAA,EACJ,OAAO,aAAA,EACP,OAAO,aAAA,EACP,oBAAiB,EAAjB,YAAY,mBAAG,EAAE,KAAA,EACjB,KAAK,WAAA,EACL,QAAQ,cAAA,EACR,eAAe,qBAAA,EACf,UAAU,gBAAA,EACP,iBAAiB,cATkC,oGAUvD,CADqB;IACwB,OAAA,CAC5C,CAAC,4BAAU,CACT,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,YAAY,CAAC,CAAC,YAAmB,CAAC,CAClC,KAAK,CAAC,CAAC,WACL,QAAQ,UAAA,EACR,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,CAAC,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,KAAK,KAAK,KAAK,EAAtB,CAAsB,CAAC,EAA1D,CAA0D,IAC5E,KAAK,EACR,CACF,MAAM,CAAC,CAAC,UAAC,EAAqD;;gBAAnD,aAA0B,EAAjB,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAkB,KAAK,sBAAA;YAAS,OAAA,CACjE,CAAC,uBAAY,CACX,IAAI,iBAAiB,CAAC,CACtB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,KAAK,CAAC,CAAC,MAAA,OAAO,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,KAAK,KAAK,KAAK,EAAtB,CAAsB,CAAC,mCAAI,SAAS,CAAC,CACrE,QAAQ,CAAC,CAAC,UAAC,CAAC,EAAE,QAAQ;oBACpB,IAAM,cAAc,GAAG,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,KAAI,EAAE,CAAC;oBAC7C,QAAQ,CAAC,cAAqB,CAAC,CAAC;oBAChC,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,IAAI,EAAE,cAAc,CAAC,CAAC;gBAC1C,CAAC,CAAC,CACF,gBAAgB,CAAC,CAAC,IAAI,CAAC,CACvB,WAAW,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,CACvB,CAAC,oBAAS,CACR,IAAI,MAAM,CAAC,CACX,OAAO,CAAC,UAAU,CAClB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CACf,SAAS,CACT,UAAU,CAAC,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,KAAI,UAAU,CAAC,EACzC,CACH,EARwB,CAQxB,CAAC,EACF,CACH,CAAA;SAAA,CAAC,EACF,CACH,CAAA;CAAA,CAAC;AA3CW,QAAA,gBAAgB,oBA2C3B","sourcesContent":["import { Autocomplete, AutocompleteProps, TextField } from '@mui/material';\nimport { ReactElement } from 'react';\nimport { Control, Controller, FieldValues, Path, UseControllerProps } from 'react-hook-form';\n\nexport interface Option {\n  label: string;\n  value: string;\n}\n\ninterface FormAutocompleteProps<T extends FieldValues>\n  extends Omit<AutocompleteProps<Option, false, true, false>, 'renderInput' | 'onChange' | 'value' | 'defaultValue'> {\n  name: Path<T>;\n  control: Control<T>;\n  options: Option[];\n  defaultValue?: string;\n  rules?: UseControllerProps<T, Path<T>>['rules'];\n  required?: boolean;\n  onChangeHandler?: (name: string, value: string) => void;\n  helperText?: string;\n}\n\nexport const FormAutocomplete = <T extends FieldValues>({\n  name,\n  control,\n  options,\n  defaultValue = '',\n  rules,\n  required,\n  onChangeHandler,\n  helperText,\n  ...autocompleteProps\n}: FormAutocompleteProps<T>): ReactElement => (\n  <Controller\n    name={name}\n    control={control}\n    defaultValue={defaultValue as any}\n    rules={{\n      required,\n      validate: (value) => !value || options.some((option) => option.value === value),\n      ...rules,\n    }}\n    render={({ field: { onChange, value }, fieldState: { error } }) => (\n      <Autocomplete<Option, false, true, false>\n        {...autocompleteProps}\n        options={options}\n        value={options.find((option) => option.value === value) ?? undefined}\n        onChange={(_, newValue) => {\n          const newStringValue = newValue?.value || '';\n          onChange(newStringValue as any);\n          onChangeHandler?.(name, newStringValue);\n        }}\n        disableClearable={true}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"standard\"\n            error={!!error}\n            fullWidth\n            helperText={error?.message || helperText}\n          />\n        )}\n      />\n    )}\n  />\n);\n"]}