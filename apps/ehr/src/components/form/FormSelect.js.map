{"version":3,"file":"FormSelect.js","sourceRoot":"","sources":["FormSelect.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,0CAA8E;AAC9E,sCAAkC;AAClC,+BAA4C;AAC5C,mDAA6F;AAgBtF,IAAM,UAAU,GAAG,UAAwB,EAQ7B;IAPnB,IAAA,IAAI,UAAA,EACJ,OAAO,aAAA,EACP,OAAO,aAAA,EACP,oBAAiB,EAAjB,YAAY,mBAAG,EAAE,KAAA,EACjB,KAAK,WAAA,EACL,eAAe,qBAAA,EACZ,WAAW,cAPkC,0EAQjD,CADe;IACwB,OAAA,CACtC,CAAC,4BAAU,CACT,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,YAAY,CAAC,CAAC,YAAmB,CAAC,CAClC,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,MAAM,CAAC,CAAC,UAAC,EAAgC;;gBAA9B,KAAK,WAAA,EAAgB,KAAK,sBAAA;YAAS,OAAA,CAC5C,CAAC,YAAG,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CACzB;QAAA,CAAC,iBAAM,CACL,IAAI,KAAK,CAAC,CACV,IAAI,WAAW,CAAC,CAChB,OAAO,CAAC,CAAC,MAAA,WAAW,CAAC,OAAO,mCAAI,UAAU,CAAC,CAC3C,SAAS,CACT,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CACf,QAAQ,CAAC,CAAC,UAAC,CAAC;oBACV,KAAK,CAAC,QAAQ,CAAC,CAAQ,CAAC,CAAC;oBACzB,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,CAAQ,CAAC,CAAC;gBAC9B,CAAC,CAAC,CAEF;UAAA,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,CACvB,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAC/C;cAAA,CAAC,MAAM,CAAC,KAAK,CACf;YAAA,EAAE,mBAAQ,CAAC,CACZ,EAJwB,CAIxB,CAAC,CACJ;QAAA,EAAE,iBAAM,CACR;QAAA,CAAC,KAAK,IAAI,CAAC,yBAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAC,EAAE,yBAAc,CAAC,CAC1E;MAAA,EAAE,YAAG,CAAC,CACP,CAAA;SAAA,CAAC,EACF,CACH,CAAA;CAAA,CAAC;AArCW,QAAA,UAAU,cAqCrB","sourcesContent":["import { FormHelperText, MenuItem, Select, SelectProps } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React, { ReactElement } from 'react';\nimport { Control, Controller, FieldValues, Path, UseControllerProps } from 'react-hook-form';\n\ninterface SelectOption {\n  label: string;\n  value: string | number;\n}\n\ninterface FormSelectProps<T extends FieldValues> extends Omit<SelectProps, 'name'> {\n  name: Path<T>;\n  control: Control<T>;\n  options: SelectOption[];\n  defaultValue?: string;\n  rules?: UseControllerProps<T, Path<T>>['rules'];\n  onChangeHandler?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport const FormSelect = <T extends FieldValues>({\n  name,\n  control,\n  options,\n  defaultValue = '',\n  rules,\n  onChangeHandler,\n  ...selectProps\n}: FormSelectProps<T>): ReactElement => (\n  <Controller\n    name={name}\n    control={control}\n    defaultValue={defaultValue as any}\n    rules={rules}\n    render={({ field, fieldState: { error } }) => (\n      <Box sx={{ width: '100%' }}>\n        <Select\n          {...field}\n          {...selectProps}\n          variant={selectProps.variant ?? 'standard'}\n          fullWidth\n          error={!!error}\n          onChange={(e) => {\n            field.onChange(e as any);\n            onChangeHandler?.(e as any);\n          }}\n        >\n          {options.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </Select>\n        {error && <FormHelperText error={true}>{error?.message}</FormHelperText>}\n      </Box>\n    )}\n  />\n);\n"]}