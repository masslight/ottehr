{"version":3,"file":"FormTextField.js","sourceRoot":"","sources":["FormTextField.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,0CAA0D;AAC1D,+BAA4C;AAC5C,mDAA6F;AAWtF,IAAM,aAAa,GAAG,UAAwB,EAS7B;IARtB,IAAA,IAAI,UAAA,EACJ,OAAO,aAAA,EACP,oBAAiB,EAAjB,YAAY,mBAAG,EAAE,KAAA,EACjB,KAAK,WAAA,EACL,EAAE,QAAA,EACF,eAAe,qBAAA,EACf,UAAU,gBAAA,EACP,cAAc,cARkC,mFASpD,CADkB;IACwB,OAAA,CACzC,CAAC,4BAAU,CACT,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,YAAY,CAAC,CAAC,YAAmB,CAAC,CAClC,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,MAAM,CAAC,CAAC,UAAC,EAAgC;;gBAA9B,KAAK,WAAA,EAAgB,KAAK,sBAAA;YAAS,OAAA,CAC5C,CAAC,oBAAS,CACR,IAAI,KAAK,CAAC,CACV,IAAI,cAAc,CAAC,CACnB,EAAE,CAAC,CAAC,EAAE,CAAC,CACP,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CACf,OAAO,CAAC,CAAC,MAAA,cAAc,CAAC,OAAO,mCAAI,UAAU,CAAC,CAC9C,SAAS,CACT,QAAQ,CAAC,CAAC,UAAC,CAAsC;oBAC/C,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAClB,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,CAAC,CAAC,CAAC;gBACvB,CAAC,CAAC,CACF,UAAU,CAAC,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,KAAI,UAAU,CAAC,EACzC,CACH,CAAA;SAAA,CAAC,EACF,CACH,CAAA;CAAA,CAAC;AA/BW,QAAA,aAAa,iBA+BxB","sourcesContent":["import { TextField, TextFieldProps } from '@mui/material';\nimport React, { ReactElement } from 'react';\nimport { Control, Controller, FieldValues, Path, UseControllerProps } from 'react-hook-form';\n\ninterface FormTextFieldProps<T extends FieldValues> extends Omit<TextFieldProps, 'name'> {\n  name: Path<T>;\n  control: Control<T>;\n  defaultValue?: string;\n  rules?: UseControllerProps<T, Path<T>>['rules'];\n  onChangeHandler?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  helperText?: string;\n}\n\nexport const FormTextField = <T extends FieldValues>({\n  name,\n  control,\n  defaultValue = '',\n  rules,\n  id,\n  onChangeHandler,\n  helperText,\n  ...textFieldProps\n}: FormTextFieldProps<T>): ReactElement => (\n  <Controller\n    name={name}\n    control={control}\n    defaultValue={defaultValue as any}\n    rules={rules}\n    render={({ field, fieldState: { error } }) => (\n      <TextField\n        {...field}\n        {...textFieldProps}\n        id={id}\n        error={!!error}\n        variant={textFieldProps.variant ?? 'standard'}\n        fullWidth\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n          field.onChange(e);\n          onChangeHandler?.(e);\n        }}\n        helperText={error?.message || helperText}\n      />\n    )}\n  />\n);\n"]}