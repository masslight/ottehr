{"version":3,"file":"Navbar.js","sourceRoot":"","sources":["Navbar.tsx"],"names":[],"mappings":"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","sourcesContent":["import { otherColors } from '@ehrTheme/colors';\nimport { logo } from '@ehrTheme/icons';\nimport { TabList } from '@mui/lab';\nimport { AppBar, Container, Tab, Toolbar, useMediaQuery, useTheme } from '@mui/material';\nimport { ReactElement, SyntheticEvent, useEffect, useMemo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { adjustTopForBannerHeight } from 'src/helpers/misc.helper';\nimport { PROJECT_NAME, RoleType } from 'utils';\nimport useEvolveUser from '../../hooks/useEvolveUser';\nimport { AppTab, useNavStore } from '../../state/nav.store';\nimport MobileMenu from './MobileMenu';\nimport { UserMenu } from './UserMenu';\n\nconst { VITE_APP_ORGANIZATION_NAME_SHORT: ORGANIZATION_NAME_SHORT } = import.meta.env;\nif (ORGANIZATION_NAME_SHORT == null) {\n  throw new Error('Could not load env variable');\n}\n\nexport type NavbarItems = {\n  [key in AppTab]?: { urls: string[] };\n};\n\nconst administratorNavbarItems: NavbarItems = {\n  'In Person': { urls: ['/visits', '/visit'] },\n  Schedules: { urls: ['/schedules', '/schedule'] },\n  Patients: { urls: ['/patients', '/patient'] },\n  Employees: { urls: ['/employees', '/employee'] },\n  'Telemedicine:Admin': { urls: ['/telemed-admin'] },\n  Telemedicine: { urls: ['/telemed/appointments', '/telemed', '/video-call'] },\n};\n\nconst managerNavbarItems: NavbarItems = {\n  'In Person': { urls: ['/visits', '/visit'] },\n  Schedules: { urls: ['/schedules', '/schedule'] },\n  Patients: { urls: ['/patients', '/patient'] },\n  Employees: { urls: ['/employees', '/employee'] },\n  'Telemedicine:Admin': { urls: ['/telemed-admin'] },\n  Telemedicine: { urls: ['/telemed/appointments', '/telemed', '/video-call'] },\n};\n\nconst staffNavbarItems: NavbarItems = {\n  'In Person': { urls: ['/visits', '/visit'] },\n  Patients: { urls: ['/patients', '/patient'] },\n};\n\nconst providerNavbarItems: NavbarItems = {\n  'In Person': { urls: ['/visits', '/visit'] },\n  Patients: { urls: ['/patients', '/patient'] },\n  Telemedicine: { urls: ['/telemed/appointments', '/telemed', '/video-call'] },\n};\n\nconst hideNavbarPathPatterns = [/^\\/telemed\\/appointments\\//, /^\\/patient\\/[^/]+\\/info$/];\n\nexport default function Navbar(): ReactElement | null {\n  const location = useLocation();\n  const currentTab = useNavStore((state) => state.currentTab);\n  const user = useEvolveUser();\n  const theme = useTheme();\n\n  const navbarItems: NavbarItems = useMemo(() => {\n    let navItems = {};\n\n    if (user) {\n      if (user.hasRole([RoleType.Administrator])) {\n        navItems = { ...navItems, ...administratorNavbarItems };\n      }\n      if (user.hasRole([RoleType.Manager])) {\n        navItems = { ...navItems, ...managerNavbarItems };\n      }\n      if (user.hasRole([RoleType.Staff])) {\n        navItems = { ...navItems, ...staffNavbarItems };\n      }\n      if (user.hasRole([RoleType.Provider])) {\n        navItems = { ...navItems, ...providerNavbarItems };\n      }\n    }\n    return navItems;\n  }, [user]);\n\n  // on page load set the tab to the opened page\n  const currentUrl = '/' + location.pathname.substring(1).split('/')[0];\n\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n  useEffect(() => {\n    if (!currentTab) {\n      useNavStore.setState({ currentTab: 'In Person' });\n    }\n\n    (Object.keys(navbarItems) as AppTab[]).forEach((navbarItem) => {\n      if (navbarItems[navbarItem]!.urls.includes(currentUrl)) {\n        useNavStore.setState({ currentTab: navbarItem });\n      }\n    });\n  }, [currentTab, currentUrl, location.pathname, navbarItems]);\n\n  if (hideNavbarPathPatterns.some((pattern) => pattern.test(location.pathname))) {\n    return null;\n  }\n\n  return (\n    <AppBar\n      position=\"sticky\"\n      color=\"transparent\"\n      sx={{\n        boxShadow: 'none',\n        borderBottom: `1px solid ${otherColors.lightDivider}`,\n        backgroundColor: theme.palette.background.paper,\n        top: adjustTopForBannerHeight(0),\n      }}\n    >\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters variant=\"dense\">\n          <Link to=\"/\">\n            <img\n              src={logo}\n              alt={`${PROJECT_NAME} logo`}\n              style={{\n                marginRight: 20,\n                marginTop: 10,\n                width: 158,\n              }}\n            />\n          </Link>\n          {isMobile ? (\n            <MobileMenu navbarItems={navbarItems}></MobileMenu>\n          ) : (\n            <TabList\n              onChange={(_: SyntheticEvent, value: string) => {\n                useNavStore.setState({ currentTab: value });\n              }}\n              sx={{\n                mt: 2.5,\n                minHeight: 60,\n                flexGrow: 1,\n              }}\n            >\n              {currentTab &&\n                (Object.keys(navbarItems) as AppTab[]).map((navbarItem, index) => (\n                  <Tab\n                    key={navbarItem}\n                    label={navbarItem}\n                    value={navbarItem}\n                    id={`navbar-tab-${index}`}\n                    aria-controls={`hello-${index}`} // `tabpanel-${index}`\n                    component={Link}\n                    to={navbarItems[navbarItem]!.urls?.[0]}\n                    sx={{\n                      fontSize: 16,\n                      fontWeight: 500,\n                      textTransform: 'capitalize',\n                    }}\n                  />\n                ))}\n            </TabList>\n          )}\n\n          {/* <IconButton color=\"primary\" sx={{ mr: 2 }}>\n            <Settings />\n          </IconButton> */}\n          <UserMenu />\n        </Toolbar>\n      </Container>\n    </AppBar>\n  );\n}\n"]}