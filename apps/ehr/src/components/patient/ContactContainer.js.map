{"version":3,"file":"ContactContainer.js","sourceRoot":"","sources":["ContactContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Autocomplete, Box, TextField } from '@mui/material';\nimport { FC } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { emailRegex, isPhoneNumberValid, isPostalCodeValid, REQUIRED_FIELD_ERROR_MESSAGE } from 'utils';\nimport { STATE_OPTIONS } from '../../constants';\nimport { FormFields as AllFormFields } from '../../constants';\nimport { dataTestIds } from '../../constants/data-test-ids';\nimport { FormTextField } from '../form';\nimport InputMask from '../InputMask';\nimport { Row, Section } from '../layout';\n\nconst FormFields = AllFormFields.patientContactInformation;\n\nexport const ContactContainer: FC = () => {\n  const { control, setValue } = useFormContext();\n\n  return (\n    <Section title=\"Contact information\">\n      <Row label=\"Street address\" inputId={FormFields.streetAddress.key} required>\n        <FormTextField\n          name={FormFields.streetAddress.key}\n          data-testid={dataTestIds.contactInformationContainer.streetAddress}\n          control={control}\n          rules={{ required: REQUIRED_FIELD_ERROR_MESSAGE }}\n          id={FormFields.streetAddress.key}\n        />\n      </Row>\n      <Row label=\"Address line 2\" inputId={FormFields.addressLine2.key}>\n        <FormTextField\n          name={FormFields.addressLine2.key}\n          control={control}\n          id={FormFields.addressLine2.key}\n          data-testid={dataTestIds.contactInformationContainer.addressLineOptional}\n        />\n      </Row>\n      <Row label=\"City, State, ZIP\" required>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <FormTextField\n            name={FormFields.city.key}\n            control={control}\n            rules={{\n              required: REQUIRED_FIELD_ERROR_MESSAGE,\n            }}\n            data-testid={dataTestIds.contactInformationContainer.city}\n          />\n          <Controller\n            name={FormFields.state.key}\n            control={control}\n            rules={{\n              required: REQUIRED_FIELD_ERROR_MESSAGE,\n            }}\n            render={({ field: { value }, fieldState: { error } }) => {\n              return (\n                <Autocomplete\n                  options={STATE_OPTIONS.map((option) => option.value)}\n                  value={value ?? ''}\n                  data-testid={dataTestIds.contactInformationContainer.state}\n                  onChange={(_, newValue) => {\n                    if (newValue) {\n                      setValue(FormFields.state.key, newValue);\n                    } else {\n                      setValue(FormFields.state.key, '');\n                    }\n                  }}\n                  disableClearable\n                  fullWidth\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"standard\" error={!!error} required helperText={error?.message} />\n                  )}\n                />\n              );\n            }}\n          />\n          <FormTextField\n            name={FormFields.zip.key}\n            control={control}\n            rules={{\n              required: REQUIRED_FIELD_ERROR_MESSAGE,\n              validate: (value: string) => isPostalCodeValid(value) || 'Must be 5 digits',\n            }}\n            data-testid={dataTestIds.contactInformationContainer.zip}\n          />\n        </Box>\n      </Row>\n      <Row label=\"Patient email\" required={true}>\n        <FormTextField\n          id={FormFields.email.key}\n          name={FormFields.email.key}\n          data-testid={dataTestIds.contactInformationContainer.patientEmail}\n          control={control}\n          rules={{\n            required: REQUIRED_FIELD_ERROR_MESSAGE,\n            pattern: {\n              value: emailRegex,\n              message: 'Must be in the format \"email@example.com\"',\n            },\n          }}\n        />\n      </Row>\n      <Row label=\"Patient mobile\" required={true}>\n        <FormTextField\n          id={FormFields.phone.key}\n          name={FormFields.phone.key}\n          control={control}\n          inputProps={{ mask: '(000) 000-0000' }}\n          InputProps={{\n            inputComponent: InputMask as any,\n          }}\n          rules={{\n            required: REQUIRED_FIELD_ERROR_MESSAGE,\n            validate: (value: string) =>\n              isPhoneNumberValid(value) ||\n              'Phone number must be 10 digits in the format (xxx) xxx-xxxx and a valid number',\n          }}\n          data-testid={dataTestIds.contactInformationContainer.patientMobile}\n        />\n      </Row>\n    </Section>\n  );\n};\n"]}