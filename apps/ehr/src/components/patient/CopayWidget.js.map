{"version":3,"file":"CopayWidget.js","sourceRoot":"","sources":["CopayWidget.tsx"],"names":[],"mappings":"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","sourcesContent":["import HowToRegIcon from '@mui/icons-material/HowToReg';\nimport PersonRemoveIcon from '@mui/icons-material/PersonRemove';\nimport { Box, Grid, Typography, useTheme } from '@mui/material';\nimport { FC, useMemo } from 'react';\nimport { PatientPaymentBenefit } from 'utils';\n\ninterface CopayWidgetProps {\n  copay: PatientPaymentBenefit[];\n}\n\n// This set contains the service codes that are supported by the CopayWidget.\n// Currently, it only includes 'UC' (Urgent Care), but can be overwritten to include any from\n// the enumeration defined as BenefitCoverageCodes in packages/utils/lib/types/data/telemed/eligibility.types.ts\nconst supportedServiceCodes = new Set(['UC']);\n\nexport const CopayWidget: FC<CopayWidgetProps> = ({ copay }) => {\n  const { inNetworkList, outOfNetworkList } = useMemo(() => {\n    const filteredByService = copay.filter((b) => supportedServiceCodes.has(b.code));\n    const inNetworkList = filteredByService.filter((b) => b.inNetwork);\n    const outOfNetworkList = filteredByService.filter((b) => !b.inNetwork);\n    return { inNetworkList, outOfNetworkList };\n  }, [copay]);\n  const theme = useTheme();\n\n  return (\n    <Grid\n      sx={{\n        backgroundColor: 'rgba(244, 246, 248, 1)',\n        padding: 1,\n      }}\n      container\n      spacing={2}\n    >\n      <Grid item>\n        <Typography variant=\"h5\" color={theme.palette.primary.dark} fontWeight={theme.typography.fontWeightBold}>\n          Patient payment\n        </Typography>\n      </Grid>\n      <BenefitSection\n        title={'Patient is In-Network'}\n        titleIcon={<HowToRegIcon sx={{ color: theme.palette.success.main, fontSize: 20 }} />}\n        emptyMessage={'No in-network benefits available.'}\n        benefits={inNetworkList}\n      />\n      <BenefitSection\n        title={'Patient is Out-of-Network'}\n        titleIcon={<PersonRemoveIcon sx={{ color: theme.palette.error.main, fontSize: 20 }} />}\n        emptyMessage={'No out-of-network benefits available.'}\n        benefits={outOfNetworkList}\n      />\n    </Grid>\n  );\n};\n\ninterface BenefitSectionProps {\n  title: string;\n  titleIcon?: React.ReactNode;\n  emptyMessage: string;\n  benefits: PatientPaymentBenefit[];\n}\n\nconst BenefitSection: FC<BenefitSectionProps> = ({ title, titleIcon, emptyMessage, benefits }) => {\n  const theme = useTheme();\n  return (\n    <Grid container item direction=\"column\" spacing={1}>\n      <Grid item>\n        <Box sx={{ display: 'flex', flexDirection: 'row', gap: 1 }}>\n          {titleIcon ?? <></>}\n          <Typography variant=\"h6\" color={theme.palette.primary.dark}>\n            {title}\n          </Typography>\n        </Box>\n      </Grid>\n      {benefits.length > 0 ? (\n        benefits.map((benefit) => (\n          <Grid\n            container\n            sx={{\n              borderTop: '1px solid  rgba(0, 0, 0, 0.12)',\n            }}\n            item\n            key={`${JSON.stringify(benefit)}`}\n            direction=\"row\"\n          >\n            <Grid item xs={5}>\n              <Typography variant=\"body1\" color={theme.palette.primary.dark}>\n                {benefit.description}\n              </Typography>\n            </Grid>\n            <Grid item xs={5}>\n              <Typography variant=\"body1\" color={theme.palette.primary.dark}>\n                {benefit.coverageCode === 'A' ? 'Co-Insurance' : 'Co-Pay'}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Typography\n                variant=\"body1\"\n                fontWeight={theme.typography.fontWeightMedium}\n                color={theme.palette.text.primary}\n                textAlign=\"right\"\n              >\n                {amountStringForBenefit(benefit)}\n              </Typography>\n            </Grid>\n          </Grid>\n        ))\n      ) : (\n        <p>{emptyMessage}</p>\n      )}\n    </Grid>\n  );\n};\n\nconst amountStringForBenefit = (benefit: PatientPaymentBenefit): string => {\n  const amountInUSD = benefit.amountInUSD;\n  const percentage = benefit.percentage;\n\n  if (benefit.coverageCode === 'A') {\n    if (percentage > 0) {\n      return `${percentage}%`;\n    } else if (amountInUSD > 0) {\n      return `$${amountInUSD}`;\n    } else {\n      return '0%';\n    }\n  } else {\n    if (amountInUSD > 0) {\n      return `$${amountInUSD}`;\n    } else if (percentage > 0) {\n      return `${percentage}%`;\n    } else {\n      return '$0';\n    }\n  }\n};\n"]}