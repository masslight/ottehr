{"version":3,"file":"PrimaryCareContainer.js","sourceRoot":"","sources":["PrimaryCareContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Checkbox, FormControlLabel, Typography } from '@mui/material';\nimport { FC } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { isPhoneNumberValid, REQUIRED_FIELD_ERROR_MESSAGE } from 'utils';\nimport { FormFields as AllFormFields } from '../../constants';\nimport { dataTestIds } from '../../constants/data-test-ids';\nimport { FormTextField } from '../form';\nimport InputMask from '../InputMask';\nimport { Row, Section } from '../layout';\n\nconst FormFields = AllFormFields.primaryCarePhysician;\nexport const PrimaryCareContainer: FC = () => {\n  const { control, watch, setValue } = useFormContext();\n\n  const isActive = watch(FormFields.active.key, true);\n\n  return (\n    <Section title=\"Primary care physician\">\n      <Controller\n        name={FormFields.active.key}\n        control={control}\n        render={({ field: { value } }) => (\n          <FormControlLabel\n            control={\n              <Checkbox\n                data-testid={dataTestIds.primaryCarePhysicianContainer.pcpCheckbox}\n                checked={!value}\n                onClick={(e) => {\n                  const checked = (e.target as HTMLInputElement).checked;\n                  setValue(FormFields.active.key, !checked, { shouldDirty: true });\n                }}\n              />\n            }\n            label={<Typography>Patient doesn't have a PCP at this time</Typography>}\n          />\n        )}\n      />\n      <Box sx={{ display: isActive ? 'contents' : 'none' }}>\n        <Row label=\"First name\" inputId={FormFields.firstName.key} required={isActive}>\n          <FormTextField\n            name={FormFields.firstName.key}\n            control={control}\n            rules={{\n              validate: (value: string) => {\n                if (isActive && !value) return REQUIRED_FIELD_ERROR_MESSAGE;\n                return true;\n              },\n            }}\n            id={FormFields.firstName.key}\n            data-testid={dataTestIds.primaryCarePhysicianContainer.firstName}\n          />\n        </Row>\n        <Row label=\"Last name\" inputId={FormFields.lastName.key} required={isActive}>\n          <FormTextField\n            name={FormFields.lastName.key}\n            control={control}\n            rules={{\n              validate: (value: string) => {\n                if (isActive && !value) return REQUIRED_FIELD_ERROR_MESSAGE;\n                return true;\n              },\n            }}\n            id={FormFields.lastName.key}\n            data-testid={dataTestIds.primaryCarePhysicianContainer.lastName}\n          />\n        </Row>\n        <Row label=\"Practice name\" inputId={FormFields.practiceName.key} required={isActive}>\n          <FormTextField\n            name={FormFields.practiceName.key}\n            control={control}\n            rules={{\n              validate: (value: string) => {\n                if (isActive && !value) return REQUIRED_FIELD_ERROR_MESSAGE;\n                return true;\n              },\n            }}\n            id={FormFields.practiceName.key}\n            data-testid={dataTestIds.primaryCarePhysicianContainer.practiceName}\n          />\n        </Row>\n        <Row label=\"Address\" inputId={FormFields.address.key} required={isActive}>\n          <FormTextField\n            name={FormFields.address.key}\n            control={control}\n            rules={{\n              validate: (value: string) => {\n                if (isActive && !value) return REQUIRED_FIELD_ERROR_MESSAGE;\n                return true;\n              },\n            }}\n            id={FormFields.address.key}\n            data-testid={dataTestIds.primaryCarePhysicianContainer.address}\n          />\n        </Row>\n        <Row label=\"Mobile\" inputId={FormFields.phone.key} required={isActive}>\n          <FormTextField\n            data-testid={dataTestIds.primaryCarePhysicianContainer.mobile}\n            name={FormFields.phone.key}\n            control={control}\n            rules={{\n              validate: (value: string) => {\n                if (!isActive) return true;\n                if (!value) return REQUIRED_FIELD_ERROR_MESSAGE;\n                return (\n                  isPhoneNumberValid(value) ||\n                  'Phone number must be 10 digits in the format (xxx) xxx-xxxx and a valid number'\n                );\n              },\n            }}\n            id={FormFields.phone.key}\n            inputProps={{ mask: '(000) 000-0000' }}\n            InputProps={{\n              inputComponent: InputMask as any,\n            }}\n          />\n        </Row>\n      </Box>\n    </Section>\n  );\n};\n"]}