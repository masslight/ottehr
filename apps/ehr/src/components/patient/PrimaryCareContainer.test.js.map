{"version":3,"file":"PrimaryCareContainer.test.js","sourceRoot":"","sources":["PrimaryCareContainer.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport type { InputHTMLAttributes } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { FormFields } from 'src/constants';\nimport { dataTestIds } from 'src/constants/data-test-ids';\nimport { describe, expect, it, vi } from 'vitest';\nimport { PrimaryCareContainer } from './PrimaryCareContainer';\n\nvi.mock('../InputMask', async () => {\n  const React = await import('react');\n  return {\n    default: React.forwardRef<HTMLInputElement, InputHTMLAttributes<HTMLInputElement>>(\n      ({ onChange, value, ...rest }, ref) => {\n        return <input ref={ref} {...rest} onChange={onChange} value={value} />;\n      }\n    ),\n  };\n});\n\nconst TestWrapper = ({\n  children,\n  defaultValues = {},\n}: {\n  children: React.ReactNode;\n  defaultValues?: Record<string, any>;\n}): JSX.Element => {\n  const TestForm = (): JSX.Element => {\n    const methods = useForm({\n      defaultValues: {\n        [FormFields.primaryCarePhysician.active.key]: true,\n        [FormFields.primaryCarePhysician.firstName.key]: '',\n        [FormFields.primaryCarePhysician.lastName.key]: '',\n        [FormFields.primaryCarePhysician.practiceName.key]: '',\n        [FormFields.primaryCarePhysician.address.key]: '',\n        [FormFields.primaryCarePhysician.phone.key]: '',\n        ...defaultValues,\n      },\n    });\n\n    return <FormProvider {...methods}>{children}</FormProvider>;\n  };\n\n  return <TestForm />;\n};\n\nconst getFieldInput = (fieldTestId: string): HTMLInputElement =>\n  screen.getByTestId(fieldTestId).querySelector('input') as HTMLInputElement;\n\ndescribe('PrimaryCareContainer', () => {\n  const user = userEvent.setup();\n\n  const filledFieldValues = {\n    [FormFields.primaryCarePhysician.active.key]: true,\n    [FormFields.primaryCarePhysician.firstName.key]: 'Dr. Jane',\n    [FormFields.primaryCarePhysician.lastName.key]: 'Smith',\n    [FormFields.primaryCarePhysician.practiceName.key]: 'Family Medical Center',\n    [FormFields.primaryCarePhysician.address.key]: '123 Main St, AnyTown, ST 12345',\n    [FormFields.primaryCarePhysician.phone.key]: '5551234567',\n  };\n\n  it('should display correct checkbox label', () => {\n    render(\n      <TestWrapper>\n        <PrimaryCareContainer />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText(\"Patient doesn't have a PCP at this time\")).toBeInTheDocument();\n  });\n\n  it('should show and hide PCP form fields based on checkbox state', async () => {\n    render(\n      <TestWrapper>\n        <PrimaryCareContainer />\n      </TestWrapper>\n    );\n\n    const pcpCheckbox = getFieldInput(dataTestIds.primaryCarePhysicianContainer.pcpCheckbox);\n\n    expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.firstName)).toBeVisible();\n    expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.lastName)).toBeVisible();\n    expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.practiceName)).toBeVisible();\n    expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.address)).toBeVisible();\n    expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.mobile)).toBeVisible();\n\n    await user.click(pcpCheckbox);\n\n    await waitFor(() => {\n      expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.firstName)).not.toBeVisible();\n      expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.lastName)).not.toBeVisible();\n      expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.practiceName)).not.toBeVisible();\n      expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.address)).not.toBeVisible();\n      expect(screen.getByTestId(dataTestIds.primaryCarePhysicianContainer.mobile)).not.toBeVisible();\n    });\n  });\n\n  it('should preserve field values when checkbox is checked and unchecked', async () => {\n    render(\n      <TestWrapper defaultValues={filledFieldValues}>\n        <PrimaryCareContainer />\n      </TestWrapper>\n    );\n\n    const pcpCheckbox = getFieldInput(dataTestIds.primaryCarePhysicianContainer.pcpCheckbox);\n\n    expect(pcpCheckbox).toBeInTheDocument();\n    expect(pcpCheckbox).not.toBeChecked();\n\n    const firstNameInput = getFieldInput(dataTestIds.primaryCarePhysicianContainer.firstName);\n    const lastNameInput = getFieldInput(dataTestIds.primaryCarePhysicianContainer.lastName);\n    const practiceNameInput = getFieldInput(dataTestIds.primaryCarePhysicianContainer.practiceName);\n    const addressInput = getFieldInput(dataTestIds.primaryCarePhysicianContainer.address);\n    const mobileInput = getFieldInput(dataTestIds.primaryCarePhysicianContainer.mobile);\n\n    expect(firstNameInput).toHaveValue(filledFieldValues[FormFields.primaryCarePhysician.firstName.key] as string);\n    expect(lastNameInput).toHaveValue(filledFieldValues[FormFields.primaryCarePhysician.lastName.key] as string);\n    expect(practiceNameInput).toHaveValue(\n      filledFieldValues[FormFields.primaryCarePhysician.practiceName.key] as string\n    );\n    expect(addressInput).toHaveValue(filledFieldValues[FormFields.primaryCarePhysician.address.key] as string);\n    expect(mobileInput).toHaveValue(filledFieldValues[FormFields.primaryCarePhysician.phone.key] as string);\n\n    await user.click(pcpCheckbox);\n    expect(pcpCheckbox).toBeChecked();\n\n    await waitFor(() => {\n      expect(firstNameInput).not.toBeVisible();\n      expect(lastNameInput).not.toBeVisible();\n      expect(practiceNameInput).not.toBeVisible();\n      expect(addressInput).not.toBeVisible();\n      expect(mobileInput).not.toBeVisible();\n    });\n\n    await user.click(pcpCheckbox);\n    expect(pcpCheckbox).not.toBeChecked();\n\n    await waitFor(() => {\n      expect(firstNameInput).toBeVisible();\n      expect(lastNameInput).toBeVisible();\n      expect(practiceNameInput).toBeVisible();\n      expect(addressInput).toBeVisible();\n      expect(mobileInput).toBeVisible();\n    });\n\n    expect(firstNameInput).toHaveValue(filledFieldValues[FormFields.primaryCarePhysician.firstName.key] as string);\n    expect(lastNameInput).toHaveValue(filledFieldValues[FormFields.primaryCarePhysician.lastName.key] as string);\n    expect(practiceNameInput).toHaveValue(\n      filledFieldValues[FormFields.primaryCarePhysician.practiceName.key] as string\n    );\n    expect(addressInput).toHaveValue(filledFieldValues[FormFields.primaryCarePhysician.address.key] as string);\n    expect(mobileInput).toHaveValue(filledFieldValues[FormFields.primaryCarePhysician.phone.key] as string);\n  });\n});\n"]}