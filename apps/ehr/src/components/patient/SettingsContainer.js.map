{"version":3,"file":"SettingsContainer.js","sourceRoot":"","sources":["SettingsContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Box,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  MenuItem,\n  Radio,\n  RadioGroup,\n  Select,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { FC } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport {\n  createLocalDateTime,\n  PATIENT_DECEASED_NOTE_URL,\n  PATIENT_RELEASE_OF_INFO_URL,\n  PATIENT_RX_HISTORY_CONSENT_STATUS_URL,\n  patientFieldPaths,\n  REQUIRED_FIELD_ERROR_MESSAGE,\n} from 'utils';\nimport { RX_HISTORY_CONSENT_OPTIONS } from '../../constants';\nimport { dataTestIds } from '../../constants/data-test-ids';\nimport { usePatientStore } from '../../state/patient.store';\nimport { BasicDatePicker as DatePicker, FormSelect } from '../form';\nimport { Row, Section } from '../layout';\n\nexport const SettingsContainer: FC = () => {\n  const { patient } = usePatientStore();\n  const { control, watch, setValue } = useFormContext();\n\n  if (!patient) return null;\n\n  const releaseOfInfo = patient?.extension?.find((e: { url: string }) => e.url === PATIENT_RELEASE_OF_INFO_URL)\n    ?.valueBoolean;\n\n  const rxHistoryConsentStatus = patient?.extension?.find(\n    (e: { url: string }) => e.url === PATIENT_RX_HISTORY_CONSENT_STATUS_URL\n  )?.valueString;\n\n  const deceasedNote = patient?.extension?.find((e: { url: string }) => e.url === PATIENT_DECEASED_NOTE_URL)\n    ?.valueString;\n\n  const deceased = watch(patientFieldPaths.deceased);\n  const deceasedDate = watch(patientFieldPaths.deceasedDate);\n\n  return (\n    <Section title=\"User settings\">\n      <Row label=\"Release of info\" required>\n        <Controller\n          name={patientFieldPaths.releaseOfInfo}\n          control={control}\n          defaultValue={releaseOfInfo === undefined ? '' : String(releaseOfInfo)}\n          rules={{ required: REQUIRED_FIELD_ERROR_MESSAGE }}\n          render={({ field, fieldState: { error } }) => (\n            <Box sx={{ width: '100%' }}>\n              <Select\n                data-testid={dataTestIds.userSettingsContainer.releaseOfInfoDropdown}\n                {...field}\n                value={field.value || ''}\n                variant=\"standard\"\n                sx={{ width: '100%' }}\n              >\n                {[\n                  { value: true, label: 'Yes, Release Allowed' },\n                  { value: false, label: 'No, Release Not Allowed' },\n                ].map((option) => (\n                  <MenuItem key={String(option.value)} value={String(option.value)}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </Select>\n              {error && <FormHelperText error={true}>{error?.message}</FormHelperText>}\n            </Box>\n          )}\n        />\n      </Row>\n      <Row label=\"Rx History Consent\" required>\n        <FormSelect\n          data-testid={dataTestIds.userSettingsContainer.RxHistoryConsentDropdown}\n          name={patientFieldPaths.rxHistoryConsentStatus}\n          control={control}\n          defaultValue={rxHistoryConsentStatus}\n          options={RX_HISTORY_CONSENT_OPTIONS}\n          rules={{\n            required: REQUIRED_FIELD_ERROR_MESSAGE,\n            validate: (value: string) => RX_HISTORY_CONSENT_OPTIONS.some((option) => option.value === value),\n          }}\n        />\n      </Row>\n      <Box\n        sx={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          gap: '5px',\n        }}\n      >\n        <Controller\n          name={patientFieldPaths.active}\n          control={control}\n          defaultValue={patient?.active ?? true}\n          render={({ field: { onChange, value, ...field } }) => (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  {...field}\n                  checked={!value}\n                  onChange={(e) => {\n                    const newActiveValue = !e.target.checked;\n                    onChange(newActiveValue);\n                  }}\n                />\n              }\n              label={<Typography>Inactive</Typography>}\n            />\n          )}\n        />\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 1,\n        }}\n      >\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            gap: '5px',\n          }}\n        >\n          <Controller\n            name={patientFieldPaths.deceased}\n            control={control}\n            defaultValue={patient?.deceasedBoolean || Boolean(patient?.deceasedDateTime)}\n            render={({ field: { onChange, value, ...field } }) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    {...field}\n                    checked={value}\n                    onChange={(e) => {\n                      const isChecked = e.target.checked;\n                      onChange(isChecked);\n\n                      if (!isChecked) {\n                        if (deceasedDate) {\n                          setValue(patientFieldPaths.deceasedDate, '');\n                        }\n                      } else {\n                        setValue('deceasedDateType', 'unknown');\n                      }\n                    }}\n                  />\n                }\n                label={<Typography>Deceased</Typography>}\n              />\n            )}\n          />\n        </Box>\n        {deceased && (\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, px: 3 }}>\n            <FormControl>\n              <Controller\n                name=\"deceasedDateType\"\n                control={control}\n                defaultValue={patient?.deceasedDateTime ? 'known' : 'unknown'}\n                render={({ field }) => (\n                  <RadioGroup\n                    {...field}\n                    value={field.value}\n                    onChange={(e) => {\n                      field.onChange(e);\n                      /*\n                      const isDateKnown = e.target.value === 'known';\n                      if (isDateKnown) {\n                        updatePatientField(patientFieldPaths.deceasedDate, '');\n                      } else {\n                        updatePatientField(patientFieldPaths.deceasedDate, '');\n                        updatePatientField(patientFieldPaths.deceased, true);\n                        setValue(patientFieldPaths.deceasedDate, '');\n                      }*/\n                    }}\n                  >\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                      <FormControlLabel\n                        value=\"known\"\n                        control={<Radio />}\n                        label={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            <Typography sx={{ flex: 'none' }}>Deceased Date</Typography>\n                            <DatePicker\n                              name={patientFieldPaths.deceasedDate}\n                              control={control}\n                              rules={{ required: field.value === 'known' ? REQUIRED_FIELD_ERROR_MESSAGE : false }}\n                              disabled={field.value === 'unknown'}\n                              variant=\"outlined\"\n                              defaultValue={patient?.deceasedDateTime}\n                              onChange={(dateStr) => {\n                                const isoDateTime = createLocalDateTime(dateStr)?.toISO?.();\n                                if (isoDateTime) {\n                                  /*\n                                  updatePatientField(patientFieldPaths.deceased, '');\n                                  updatePatientField(patientFieldPaths.deceasedDate, isoDateTime);\n                                  */\n                                }\n                              }}\n                            />\n                          </Box>\n                        }\n                      />\n                    </Box>\n                    <FormControlLabel\n                      value=\"unknown\"\n                      control={<Radio />}\n                      label={<Typography>Date Unknown</Typography>}\n                    />\n                  </RadioGroup>\n                )}\n              />\n            </FormControl>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: '5px' }}>\n              <Controller\n                name={patientFieldPaths.deceasedNote}\n                control={control}\n                defaultValue={deceasedNote || ''}\n                render={({ field }) => (\n                  <TextField\n                    {...field}\n                    value={field.value}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      field.onChange(e);\n                      // handleChange(e);\n                    }}\n                    label=\"Note\"\n                    fullWidth\n                    InputLabelProps={{\n                      shrink: true,\n                      sx: {\n                        fontWeight: 'bold',\n                      },\n                    }}\n                  />\n                )}\n              />\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </Section>\n  );\n};\n"]}