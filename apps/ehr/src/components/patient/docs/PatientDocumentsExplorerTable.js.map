{"version":3,"file":"PatientDocumentsExplorerTable.js","sourceRoot":"","sources":["PatientDocumentsExplorerTable.tsx"],"names":[],"mappings":"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","sourcesContent":["// import ErrorIcon from '@mui/icons-material/Error';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport { IconButton, useTheme } from '@mui/material';\nimport { Box } from '@mui/material';\nimport { DataGridPro, GridColDef } from '@mui/x-data-grid-pro';\nimport { DateTime } from 'luxon';\nimport { FC, useCallback, useMemo } from 'react';\nimport { formatISOStringToDateAndTime } from '../../../helpers/formatDateTime';\nimport { PatientDocumentInfo } from '../../../hooks/useGetPatientDocs';\n\nexport enum DocumentTableActionType {\n  ActionDownload = 'ActionDownload',\n}\n\nexport type DocumentTableActions = {\n  isActionAllowed: (documentId: string, actionType: DocumentTableActionType) => boolean;\n  onDocumentDownload: (documentId: string) => Promise<void>;\n};\n\nconst DocActionsCell: FC<{ docInfo: PatientDocumentInfo; actions: DocumentTableActions }> = ({ docInfo, actions }) => {\n  const { isActionAllowed, onDocumentDownload } = actions;\n  const theme = useTheme();\n  const lineColor = theme.palette.primary.main;\n\n  const handleDocDownload = useCallback(async (): Promise<void> => {\n    await onDocumentDownload(docInfo.id);\n  }, [docInfo.id, onDocumentDownload]);\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'row',\n      }}\n    >\n      {/* <Typography variant=\"body2\" color=\"error.main\" sx={{ fontWeight: 600 }}>\n        TODO\n      </Typography>\n      DownloadIcon\n      <ErrorIcon fontSize=\"small\" sx={{ ml: 0.5, verticalAlign: 'middle', color: lineColor }} /> */}\n\n      {isActionAllowed(docInfo.id, DocumentTableActionType.ActionDownload) && (\n        <IconButton aria-label=\"Download\" onClick={handleDocDownload}>\n          <DownloadIcon fontSize=\"small\" sx={{ verticalAlign: 'middle', color: lineColor }} />\n        </IconButton>\n      )}\n\n      {/* {isActionAllowed(docInfo.id, DocumentTableActionType.ActionDownload) && (\n        <IconButton aria-label=\"Download\" onClick={() => onDocumentDownload(docInfo.id)}>\n          <DownloadIcon fontSize=\"small\" sx={{ ml: 0.5, verticalAlign: 'middle', color: lineColor }} />\n        </IconButton>\n      )} */}\n    </Box>\n  );\n};\n\nconst configureTableColumns = (actions: DocumentTableActions): GridColDef<PatientDocumentInfo>[] => {\n  return [\n    {\n      sortable: false,\n      field: 'docName',\n      headerName: 'Doc Name',\n      width: 400,\n      renderCell: ({ row: { docName } }) => docName,\n    },\n    {\n      sortComparator: (a, b) => {\n        console.log(`[When added] sortComparator() a=${a} :: b=${b}`);\n        const createdA = DateTime.fromISO(a ?? '');\n        const createdB = DateTime.fromISO(b ?? '');\n        return createdA.diff(createdB).milliseconds;\n      },\n      sortable: true,\n      field: 'whenAddedDate',\n      headerName: 'When added',\n      width: 150,\n      renderCell: ({ row: { whenAddedDate } }) => (whenAddedDate ? formatISOStringToDateAndTime(whenAddedDate) : '-'),\n    },\n    {\n      sortable: true,\n      field: 'whoAdded',\n      headerName: 'Who added',\n      width: 150,\n      renderCell: ({ row: { whoAdded } }) => whoAdded ?? '-',\n    },\n    {\n      sortable: false,\n      field: 'actions',\n      headerName: 'Action',\n      width: 150,\n      renderCell: ({ row }) => <DocActionsCell docInfo={row} actions={actions} />,\n    },\n  ];\n};\n\nexport type PatientDocumentsExplorerTableProps = {\n  isLoadingDocs: boolean;\n  documents?: PatientDocumentInfo[];\n  documentTableActions: DocumentTableActions;\n};\n\nexport const PatientDocumentsExplorerTable: FC<PatientDocumentsExplorerTableProps> = (props) => {\n  const { isLoadingDocs, documents, documentTableActions } = props;\n\n  const filteredDocs = documents ?? [];\n\n  const tableColumns = useMemo(() => {\n    return configureTableColumns(documentTableActions);\n  }, [documentTableActions]);\n\n  return (\n    <DataGridPro\n      rows={filteredDocs}\n      columns={tableColumns}\n      initialState={{\n        pagination: {\n          paginationModel: {\n            pageSize: 10,\n          },\n        },\n        sorting: {\n          sortModel: [{ field: 'whenAdded', sort: 'desc' }],\n        },\n      }}\n      autoHeight\n      loading={isLoadingDocs}\n      pagination\n      disableColumnMenu\n      pageSizeOptions={[10]}\n      disableRowSelectionOnClick\n      sx={{\n        border: 0,\n        '.MuiDataGrid-columnHeaderTitle': {\n          fontWeight: 500,\n        },\n      }}\n    />\n  );\n};\n"]}