{"version":3,"file":"Avatar.js","sourceRoot":"","sources":["Avatar.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,0CAAuD;AACvD,+BAA8C;AAC9C,gFAA2G;AAC3G,8DAA6D;AAC7D,yEAAoE;AAO7D,IAAM,aAAa,GAAc,UAAC,EAAU;QAAR,EAAE,QAAA,EAAE,EAAE,QAAA;IACzC,IAAA,KAAwD,IAAA,gBAAQ,EAAU,KAAK,CAAC,EAA/E,wBAAwB,QAAA,EAAE,yBAAyB,QAA4B,CAAC;IACjF,IAAA,KAAwC,IAAA,gBAAQ,EAAqB,SAAS,CAAC,EAA9E,eAAe,QAAA,EAAE,kBAAkB,QAA2C,CAAC;IAEhF,IAAA,KAA0B,IAAA,6BAAa,EAAC,EAAE,CAAC,EAAzC,OAAO,aAAA,EAAE,UAAU,gBAAsB,CAAC;IAElD,IAAM,YAAY,GAAG,IAAA,eAAO,EAAC;;QAC3B,OAAO,CAAA,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,0CAAG,CAAC,CAAC,0CAAE,GAAG,KAAI,EAAE,CAAC;IACxC,CAAC,EAAE,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAC,CAAC,CAAC;IAErB,IAAA,qDAAuC,EAAC,YAAY,EAAE,UAAC,oBAAoB;QACjE,IAAA,iBAAiB,GAAK,oBAAoB,kBAAzB,CAA0B;QACnD,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,OAAO,CACL,EACE;MAAA,CAAC,iBAAM,CACL,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,CAChD,GAAG,CAAC,SAAS,CACb,EAAE,CAAC,CAAC,WAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,IAAK,EAAE,EAAG,CAChF,OAAO,CAAC,CAAC,cAAM,OAAA,OAAO,IAAI,yBAAyB,CAAC,IAAI,CAAC,EAA1C,CAA0C,CAAC,EAE5D;MAAA,CAAC,wBAAwB,IAAI,CAC3B,CAAC,iCAAuB,CACtB,IAAI,CAAC,CAAC,wBAAwB,CAAC,CAC/B,OAAO,CAAC,CAAC,yBAAyB,CAAC,CACnC,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,QAAQ,CAAC,CAAC,UAAU,CAAC,EACrB,CACH,CACH;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC;AAjCW,QAAA,aAAa,iBAiCxB","sourcesContent":["import { Avatar, SxProps, Theme } from '@mui/material';\nimport { FC, useMemo, useState } from 'react';\nimport { useGetSignedPatientProfilePhotoUrlQuery } from '../../../features/css-module/queries/css.queries';\nimport { useGetPatient } from '../../../hooks/useGetPatient';\nimport ProfilePhotoImagePicker from '../../ProfilePhotoImagePicker';\n\ntype Props = {\n  id?: string;\n  sx?: SxProps<Theme>;\n};\n\nexport const PatientAvatar: FC<Props> = ({ id, sx }) => {\n  const [isProfileImagePickerOpen, setProfileImagePickerOpen] = useState<boolean>(false);\n  const [profilePhotoUrl, setProfilePhotoUrl] = useState<string | undefined>(undefined);\n\n  const { patient, setPatient } = useGetPatient(id);\n\n  const patientPhoto = useMemo(() => {\n    return patient?.photo?.[0]?.url || '';\n  }, [patient?.photo]);\n\n  useGetSignedPatientProfilePhotoUrlQuery(patientPhoto, (profilePhotoResponse) => {\n    const { presignedImageUrl } = profilePhotoResponse;\n    setProfilePhotoUrl(presignedImageUrl);\n  });\n\n  return (\n    <>\n      <Avatar\n        src={patientPhoto ? profilePhotoUrl : undefined}\n        alt=\"Patient\"\n        sx={{ width: 150, height: 150, cursor: patient ? 'pointer' : 'inherit', ...sx }}\n        onClick={() => patient && setProfileImagePickerOpen(true)}\n      />\n      {isProfileImagePickerOpen && (\n        <ProfilePhotoImagePicker\n          open={isProfileImagePickerOpen}\n          setOpen={setProfileImagePickerOpen}\n          patient={patient}\n          onUpdate={setPatient}\n        />\n      )}\n    </>\n  );\n};\n"]}