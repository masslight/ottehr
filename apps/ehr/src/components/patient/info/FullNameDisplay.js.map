{"version":3,"file":"FullNameDisplay.js","sourceRoot":"","sources":["FullNameDisplay.tsx"],"names":[],"mappings":";;;AAAA,0CAAqD;AAGrD,+BAAoC;AACpC,kDAA+F;AAC/F,kEAA+D;AAC/D,wEAAuE;AAQhE,IAAM,eAAe,GAAc,UAAC,EAAoC;QAAlC,OAAO,aAAA,EAAE,OAAO,aAAA,EAAE,eAAc,EAAd,OAAO,mBAAG,IAAI,KAAA;IACrE,IAAA,KAAgD,IAAA,eAAO,EAAC;QAC5D,IAAI,CAAC,OAAO;YAAE,OAAO,EAAE,CAAC;QACxB,OAAO;YACL,SAAS,EAAE,IAAA,sBAAY,EAAC,OAAO,CAAC;YAChC,QAAQ,EAAE,IAAA,qBAAW,EAAC,OAAO,CAAC;YAC9B,UAAU,EAAE,IAAA,uBAAa,EAAC,OAAO,CAAC;YAClC,QAAQ,EAAE,IAAA,qBAAW,EAAC,OAAO,CAAC;SAC/B,CAAC;IACJ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,EARL,SAAS,eAAA,EAAE,QAAQ,cAAA,EAAE,UAAU,gBAAA,EAAE,QAAQ,cAQpC,CAAC;IAEd,IAAM,wBAAwB,GAAG,IAAA,eAAO,EAAC;QACvC,OAAO,QAAQ,IAAI,SAAS,IAAI,IAAA,qCAAiB,EAAC,EAAE,QAAQ,UAAA,EAAE,SAAS,WAAA,EAAE,UAAU,YAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,CAAC;IACnG,CAAC,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;IAEhD,OAAO,CACL,CAAC,qBAAU,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,2BAAW,CAAC,aAAa,CAAC,WAAW,CAAC,CACpG;MAAA,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,mBAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAG,CAAC,CAAC,CAAC,wBAAwB,CAChE;IAAA,EAAE,qBAAU,CAAC,CACd,CAAC;AACJ,CAAC,CAAC;AApBW,QAAA,eAAe,mBAoB1B","sourcesContent":["import { Skeleton, Typography } from '@mui/material';\nimport { Variant } from '@mui/material/styles/createTypography';\nimport { Patient } from 'fhir/r4b';\nimport { FC, useMemo } from 'react';\nimport { getFirstName, getLastName, getMiddleName, getNickname } from 'utils/lib/fhir/patient';\nimport { dataTestIds } from '../../../constants/data-test-ids';\nimport { formatPatientName } from '../../../helpers/formatPatientName';\n\ntype Props = {\n  patient: Patient | undefined;\n  loading?: boolean;\n  variant?: Variant;\n};\n\nexport const FullNameDisplay: FC<Props> = ({ patient, loading, variant = 'h3' }) => {\n  const { firstName, lastName, middleName, nickname } = useMemo(() => {\n    if (!patient) return {};\n    return {\n      firstName: getFirstName(patient),\n      lastName: getLastName(patient),\n      middleName: getMiddleName(patient),\n      nickname: getNickname(patient),\n    };\n  }, [patient]);\n\n  const formattedPatientFullName = useMemo(() => {\n    return lastName && firstName && formatPatientName({ lastName, firstName, middleName, nickname });\n  }, [firstName, lastName, middleName, nickname]);\n\n  return (\n    <Typography variant={variant} color=\"primary.dark\" data-testid={dataTestIds.patientHeader.patientName}>\n      {loading ? <Skeleton width={300} /> : formattedPatientFullName}\n    </Typography>\n  );\n};\n"]}