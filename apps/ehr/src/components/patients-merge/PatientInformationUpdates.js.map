{"version":3,"file":"PatientInformationUpdates.js","sourceRoot":"","sources":["PatientInformationUpdates.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Button,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Stack,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material';\nimport { Patient, Task } from 'fhir/r4b';\nimport React, { FC, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { InnerStateDialog } from '../../telemed';\nimport { RoundedButton } from '../RoundedButton';\nimport { useGetPatientForUpdate } from './queries';\n\ntype PatientInformationUpdatesProps = {\n  patientId?: string;\n};\n\nconst getTableValues: Record<\n  string,\n  {\n    label: string;\n  }\n> = {\n  '/name/0/given/0': {\n    label: 'First Name',\n  },\n  '/name/0/family': {\n    label: 'Last Name',\n  },\n  '/gender': {\n    label: 'Gender',\n  },\n  '/contact/0/telecom/0/value': {\n    label: 'Phone number',\n  },\n};\n\nexport const PatientInformationUpdates: FC<PatientInformationUpdatesProps> = (props) => {\n  const { patientId } = props;\n\n  const [patient, setPatient] = useState<Patient>();\n  const [task, setTask] = useState<Task>();\n\n  useGetPatientForUpdate({ patientId }, (data) => {\n    const patient = data.find((resource) => (resource as unknown as Patient).resourceType === 'Patient');\n    const task = (data as unknown as Task[]).find((item) => item.resourceType === 'Task');\n\n    setPatient(patient as unknown as Patient);\n    setTask(task);\n\n    reset(\n      task?.input\n        ?.filter((item) => item.valueString)\n        ?.map((item) => JSON.parse(item.valueString!))\n        ?.reduce(\n          (prev, curr) => {\n            prev[curr.path] = 'current';\n            return prev;\n          },\n          {} as Record<string, string>\n        )\n    );\n  });\n\n  const methods = useForm();\n  const { control, handleSubmit, reset } = methods;\n\n  const onSubmit = (data: Record<string, string>): void => {\n    console.log(data);\n  };\n\n  return (\n    <InnerStateDialog\n      DialogProps={{ maxWidth: 'lg' }}\n      showCloseButton\n      title={\n        <Stack spacing={1} sx={{ p: 3, pb: 0 }}>\n          <Typography variant=\"h4\" color=\"primary.dark\">\n            Review Patient Information Updates\n          </Typography>\n          <Typography>\n            Please select which information should carry over to the record after confirmation. You will be able to edit\n            information after that, if needed.\n          </Typography>\n        </Stack>\n      }\n      content={\n        <TableContainer sx={{ maxHeight: '60vh' }}>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow sx={{ '& .MuiTableCell-head': { fontWeight: 'bold' } }}>\n                <TableCell variant=\"head\">Parameter</TableCell>\n                <TableCell variant=\"head\">Current Information</TableCell>\n                <TableCell variant=\"head\">New Information</TableCell>\n              </TableRow>\n            </TableHead>\n\n            <TableBody>\n              {patient &&\n                task?.input\n                  ?.filter((item) => item.valueString)\n                  ?.map((item) => {\n                    const action = JSON.parse(item.valueString || '') as {\n                      op: string;\n                      path: string;\n                      value?: string;\n                    };\n                    const path = action.path;\n                    const oldValue = path\n                      .split('/')\n                      .filter(Boolean)\n                      .reduce((prev, curr) => prev?.[curr], patient as any) as unknown as string | undefined;\n\n                    return (\n                      <TableRow key={action.path}>\n                        <TableCell>{getTableValues[action.path].label}</TableCell>\n                        <TableCell>\n                          <Controller\n                            render={({ field: { onChange, value } }) => (\n                              <RadioGroup value={value} onChange={onChange}>\n                                <FormControlLabel value=\"current\" control={<Radio />} label={oldValue || '-'} />\n                              </RadioGroup>\n                            )}\n                            name={action.path}\n                            control={control}\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Controller\n                            render={({ field: { onChange, value } }) => (\n                              <RadioGroup value={value} onChange={onChange}>\n                                <FormControlLabel value=\"new\" control={<Radio />} label={action?.value || '-'} />\n                              </RadioGroup>\n                            )}\n                            name={action.path}\n                            control={control}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      }\n      actions={(hideDialog) => (\n        <Stack direction=\"row\" spacing={2} justifyContent=\"space-between\">\n          <RoundedButton onClick={hideDialog}>Cancel</RoundedButton>\n          <Stack direction=\"row\" spacing={2}>\n            <RoundedButton variant=\"contained\" color=\"error\" onClick={hideDialog}>\n              Dismiss All Updates\n            </RoundedButton>\n            <RoundedButton variant=\"contained\" onClick={handleSubmit(onSubmit)}>\n              Confirm Updates\n            </RoundedButton>\n          </Stack>\n        </Stack>\n      )}\n    >\n      {(showDialog) => (\n        <Button disabled={!patientId} onClick={showDialog}>\n          Patient information updates\n        </Button>\n      )}\n    </InnerStateDialog>\n  );\n};\n"]}