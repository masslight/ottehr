{"version":3,"file":"ProtectedRoute.js","sourceRoot":"","sources":["ProtectedRoute.tsx"],"names":[],"mappings":";;;AAAA,kDAA8C;AAE9C,kDAAiD;AAM1C,IAAM,cAAc,GAA4B,UAAC,KAA0B;IAC1E,IAAA,KAAoD,IAAA,sBAAQ,GAAE,EAA5D,eAAe,qBAAA,EAAE,SAAS,eAAA,EAAE,iBAAiB,uBAAe,CAAC;IAErE,IAAI,CAAC,eAAe,IAAI,SAAS,EAAE,CAAC;QAClC,OAAO,CAAC,6BAAa,CAAC,AAAD,EAAG,CAAC;IAC3B,CAAC;IAED,IAAI,CAAC,eAAe,IAAI,CAAC,SAAS,EAAE,CAAC;QACnC,iBAAiB,EAAE,CAAC,KAAK,CAAC,UAAC,KAAK;YAC9B,MAAM,IAAI,KAAK,CAAC,gDAAyC,KAAK,CAAE,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,KAAK,CAAC,qBAAqB,CAAC;AACrC,CAAC,CAAC;AAdW,QAAA,cAAc,kBAczB","sourcesContent":["import { useAuth0 } from '@auth0/auth0-react';\nimport { FC, ReactElement } from 'react';\nimport { LoadingScreen } from '../LoadingScreen';\n\ninterface ProtectedRouteProps {\n  showWhenAuthenticated: ReactElement;\n}\n\nexport const ProtectedRoute: FC<ProtectedRouteProps> = (props: ProtectedRouteProps) => {\n  const { isAuthenticated, isLoading, loginWithRedirect } = useAuth0();\n\n  if (!isAuthenticated && isLoading) {\n    return <LoadingScreen />;\n  }\n\n  if (!isAuthenticated && !isLoading) {\n    loginWithRedirect().catch((error) => {\n      throw new Error(`Error calling loginWithRedirect Auth0 ${error}`);\n    });\n  }\n\n  return props.showWhenAuthenticated;\n};\n"]}