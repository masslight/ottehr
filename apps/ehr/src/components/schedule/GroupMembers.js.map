{"version":3,"file":"GroupMembers.js","sourceRoot":"","sources":["GroupMembers.tsx"],"names":[],"mappings":";;AAkCA,+BAkBC;AApDD,0CAAoE;AAUpE,CAAC;IACC;;;;;;;;;;;;;;;;;;;;SAoBK;AACP,CAAC;AAED,SAAwB,YAAY,CAAC,EAAwD;QAAtD,MAAM,YAAA,EAAE,OAAO,aAAA,EAAE,MAAM,YAAA,EAAE,QAAQ,cAAA;IACtE,OAAO,CACL,CAAC,uBAAY,CACX,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,WAAW,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,CACvB,CAAC,oBAAS,CAAC,WAAW,CAAC,CAAC,IAAA,qBAAU,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,IAAA,qBAAU,EAAC,MAAM,CAAC,CAAC,EAAG,CACpG,EAFwB,CAExB,CAAC,CACF,oBAAoB,CAAC,CAAC,UAAC,MAAM,EAAE,SAAS,IAAK,OAAA,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,EAAhC,CAAgC,CAAC,CAC9E,KAAK,CAAC,CAAC,MAAM,CAAC,CACd,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,QAAQ,CACR,YAAY,CAAC,CAAC,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,CAC/B,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAC/B;UAAA,CAAC,MAAM,CAAC,KAAK,CACf;QAAA,EAAE,EAAE,CAAC,CACN,EAJgC,CAIhC,CAAC,EACF,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { Autocomplete, capitalize, TextField } from '@mui/material';\nimport { ReactElement } from 'react';\n\ninterface GroupMembersProps {\n  option: 'locations' | 'providers';\n  options: { label: string; value: string }[];\n  values: { label: string; value: string }[];\n  onChange: (event: React.SyntheticEvent, value: any, field: string) => void;\n}\n\n{\n  /* <Autocomplete\n      disabled={renderInputProps?.disabled}\n      value={\n        location ? { label: `${location.address?.state?.toUpperCase()} - ${location.name}`, value: location?.id } : null\n      }\n      onChange={handleLocationChange}\n      isOptionEqualToValue={(option, tempValue) => option.value === tempValue.value}\n      options={options}\n      renderOption={(props, option) => {\n        return (\n          <li {...props} key={option.value}>\n            {option.label}\n          </li>\n        );\n      }}\n      fullWidth\n      renderInput={(params) => (\n        <TextField placeholder=\"Search office\" name=\"location\" {...params} label=\"Office\" required={required} />\n      )}\n    />\n  ); */\n}\n\nexport default function GroupMembers({ option, options, values, onChange }: GroupMembersProps): ReactElement {\n  return (\n    <Autocomplete\n      options={options}\n      renderInput={(params) => (\n        <TextField placeholder={capitalize(option)} name={option} {...params} label={capitalize(option)} />\n      )}\n      isOptionEqualToValue={(option, tempValue) => option.value === tempValue.value}\n      value={values}\n      onChange={onChange}\n      multiple\n      renderOption={(props, option) => (\n        <li {...props} key={option.value}>\n          {option.label}\n        </li>\n      )}\n    />\n  );\n}\n"]}