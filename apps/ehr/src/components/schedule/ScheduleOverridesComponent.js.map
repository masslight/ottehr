{"version":3,"file":"ScheduleOverridesComponent.js","sourceRoot":"","sources":["ScheduleOverridesComponent.tsx"],"names":[],"mappings":"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","sourcesContent":["import DeleteIcon from '@mui/icons-material/Delete';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport {\n  AlertColor,\n  Box,\n  Button,\n  FormControl,\n  IconButton,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material';\nimport { DateTime } from 'luxon';\nimport React, { Fragment, ReactElement, useEffect, useMemo, useState } from 'react';\nimport { HourOfDay, ScheduleExtension, ScheduleOverrides } from 'utils';\nimport { datesCompareFn, OVERRIDE_DATE_FORMAT } from '../../helpers/formatDateTime';\nimport { Closure, ClosureType, Day, DOW } from '../../types/types';\nimport DateSearch from '../DateSearch';\nimport OfficeClosures from './OfficeClosures';\nimport { ScheduleCapacity } from './ScheduleCapacity';\nimport ScheduleOverridesDialog from './ScheduleOverridesDialog';\n\nexport interface UpdateOverridesInput {\n  scheduleOverrides: ScheduleOverrides;\n  closures: Closure[];\n}\ninterface ScheduleOverridesProps {\n  model: ScheduleExtension;\n  dayOfWeek: string;\n  loading: boolean;\n  update: (data: UpdateOverridesInput) => Promise<void>;\n  setToastMessage: React.Dispatch<React.SetStateAction<string | undefined>>;\n  setToastType: React.Dispatch<React.SetStateAction<AlertColor | undefined>>;\n  setSnackbarOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport function ScheduleOverridesComponent({\n  model,\n  loading,\n  update,\n  setToastMessage,\n  setToastType,\n  setSnackbarOpen,\n}: ScheduleOverridesProps): ReactElement {\n  const [isScheduleOverridesDialogOpen, setIsScheduleOverridesDialogOpen] = useState<boolean>(false);\n  const [overridesOpen, setOverridesOpen] = React.useState<{ [index: string]: boolean }>({});\n  const [overrides, setOverrides] = React.useState<ScheduleOverrides | undefined>(model.scheduleOverrides);\n  const [closures, setClosures] = React.useState<Closure[] | undefined>(model.closures ?? []);\n\n  useEffect(() => {\n    setOverrides(model.scheduleOverrides);\n    setClosures(model.closures ?? []);\n  }, [model]);\n\n  const setToastWarning = (message: string): void => {\n    setToastMessage(message);\n    setToastType('warning');\n    setSnackbarOpen(true);\n  };\n\n  const timeMenuItems = useMemo(\n    () =>\n      Array.from({ length: 24 }, (_, i) => (\n        <MenuItem key={i} value={i}>\n          {i % 12 || 12} {i < 12 ? 'AM' : 'PM'}\n        </MenuItem>\n      )),\n    []\n  );\n\n  const handleOverridesSave = (event: any): void => {\n    event.preventDefault();\n\n    // validate closures\n    if (closures) {\n      const startDates = closures.map((closure) => closure.start);\n      const startDatesSet = new Set(startDates);\n      if (startDates.length !== startDatesSet.size) {\n        setToastWarning('Closed times cannot start on the same day');\n        return;\n      }\n\n      for (const closure of closures) {\n        if (\n          closure.type === ClosureType.Period &&\n          DateTime.fromFormat(closure.end, OVERRIDE_DATE_FORMAT) <\n            DateTime.fromFormat(closure.start, OVERRIDE_DATE_FORMAT)\n        ) {\n          setToastWarning('Closed time end date must be after start date');\n          return;\n        }\n      }\n    }\n\n    // confirm schedule changes before saving\n    setIsScheduleOverridesDialogOpen(true);\n  };\n\n  const createOpenCloseSelectField = (type: 'Open' | 'Close', override: string): ReactElement => {\n    return (\n      <FormControl sx={{ width: '100%' }}>\n        {type === 'Open' ? (\n          <InputLabel id=\"open-label\">Open</InputLabel>\n        ) : (\n          <InputLabel id=\"close-label\">Close</InputLabel>\n        )}\n        <Select\n          id={type === 'Open' ? 'open' : 'close'}\n          labelId={type === 'Open' ? 'open-label' : 'close-label'}\n          label={type === 'Open' ? 'Open' : 'Close'}\n          required\n          value={type === 'Open' ? overrides?.[override].open : overrides?.[override].close}\n          onChange={(updatedFrom) => {\n            const overridesTemp = { ...overrides };\n            if (type === 'Open') {\n              overridesTemp[override].open = Number(updatedFrom.target.value) as HourOfDay;\n            } else if (type === 'Close') {\n              overridesTemp[override].close = Number(updatedFrom.target.value) as HourOfDay;\n            }\n            setOverrides(overridesTemp);\n          }}\n          size=\"small\"\n        >\n          {type === 'Open' && <MenuItem value={0}>12 AM</MenuItem>}\n          {timeMenuItems}\n          {type === 'Close' && <MenuItem value={24}>12 AM</MenuItem>}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  return (\n    <>\n      <Paper>\n        <form onSubmit={handleOverridesSave}>\n          <Box paddingY={2} paddingX={3} marginTop={4}>\n            {/* Schedule overrides title */}\n            <Typography variant=\"h4\" color=\"primary.dark\">\n              Schedule Overrides\n            </Typography>\n\n            {/* Schedule overrides subtext */}\n            <Typography variant=\"body1\" color=\"black\" marginTop={2}>\n              One-time deviations from standing working hours. Any changes made will override the standard working hours\n              set above for the date(s) selected.\n            </Typography>\n            {/* Schedule overrides table */}\n            {/* Headers: Date, From, Opening buffer, To, Closing Buffer, Capacity, Trash */}\n\n            <Table sx={{ marginTop: 3, tableLayout: 'fixed' }}>\n              <TableHead>\n                <TableRow key=\"headRow\" sx={{ height: '40px' }}>\n                  <TableCell sx={{ fontWeight: 'bold', width: '19%' }}>Date</TableCell>\n                  <TableCell sx={{ fontWeight: 'bold', width: '14%' }}>Open</TableCell>\n                  <TableCell sx={{ fontWeight: 'bold', width: '14%' }}>Opening buffer</TableCell>\n                  <TableCell sx={{ fontWeight: 'bold', width: '14%' }}>Close</TableCell>\n                  <TableCell sx={{ fontWeight: 'bold', width: '14%' }}>Closing buffer</TableCell>\n                  <TableCell sx={{ fontWeight: 'bold', width: '17%' }}>Capacity</TableCell>\n                  <TableCell sx={{ fontWeight: 'bold', width: '6%' }}>Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {overrides &&\n                  Object.keys(overrides)\n                    .sort(datesCompareFn(OVERRIDE_DATE_FORMAT))\n                    .map((dateString) => (\n                      <Fragment key={`override-${dateString}`}>\n                        <TableRow>\n                          <TableCell>\n                            {/* Date Select */}\n                            <DateSearch\n                              date={DateTime.fromFormat(dateString, 'D')}\n                              setDate={(date) => {\n                                // get default override values from schedule for selected day\n                                const overridesTemp = { ...overrides };\n                                const dateFormatted = date?.toLocaleString(DateTime.DATE_SHORT);\n                                if (dateFormatted) {\n                                  const schedule = model.schedule;\n                                  const currentDayOfWeek = date?.toFormat('cccc').toLowerCase() as DOW;\n                                  const currentDayInfo = currentDayOfWeek && schedule?.[currentDayOfWeek as DOW];\n                                  if (currentDayInfo) {\n                                    overridesTemp[dateFormatted] = {\n                                      open: currentDayInfo.open,\n                                      close: currentDayInfo.close,\n                                      openingBuffer: currentDayInfo.openingBuffer,\n                                      closingBuffer: currentDayInfo.closingBuffer,\n                                      hours: currentDayInfo.hours || [],\n                                    };\n                                  } else {\n                                    overridesTemp[dateFormatted] = overridesTemp[dateString];\n                                  }\n                                  delete overridesTemp[dateString];\n                                }\n                                setOverrides(overridesTemp);\n                              }}\n                              required\n                              closeOnSelect\n                              small\n                            ></DateSearch>\n                          </TableCell>\n                          <TableCell>\n                            {/* Open Select */}\n                            {createOpenCloseSelectField('Open', dateString)}\n                          </TableCell>\n                          <TableCell>\n                            {/* Opening Buffer Select */}\n                            <FormControl sx={{ width: '100%' }}>\n                              <InputLabel id=\"opening-buffer-label\">Opening buffer</InputLabel>\n                              <Select\n                                labelId=\"opening-buffer-label\"\n                                label=\"Opening buffer\"\n                                id=\"opening-buffer\"\n                                value={overrides[dateString].openingBuffer}\n                                onChange={(updatedFrom) => {\n                                  const overridesTemp = { ...overrides };\n                                  overridesTemp[dateString].openingBuffer = Number(updatedFrom.target.value);\n                                  setOverrides(overridesTemp);\n                                }}\n                                sx={{\n                                  display: 'flex',\n                                  height: '40px',\n                                  flexShrink: 1,\n                                }}\n                                size=\"small\"\n                              >\n                                <MenuItem value={0}>0 mins</MenuItem>\n                                <MenuItem value={15}>15 mins</MenuItem>\n                                <MenuItem value={30}>30 mins</MenuItem>\n                                <MenuItem value={60}>60 mins</MenuItem>\n                                <MenuItem value={90}>90 mins</MenuItem>\n                              </Select>\n                            </FormControl>\n                          </TableCell>\n                          <TableCell>\n                            {/* Close Select */}\n                            {createOpenCloseSelectField('Close', dateString)}\n                          </TableCell>\n                          <TableCell>\n                            {/* closing buffer select */}\n                            <FormControl sx={{ width: '100%' }}>\n                              <InputLabel id=\"closing-buffer-label\">Closing buffer</InputLabel>\n                              <Select\n                                labelId=\"closing-buffer-label\"\n                                label=\"Closing buffer\"\n                                id=\"closing-buffer\"\n                                value={overrides[dateString].closingBuffer}\n                                onChange={(updatedClosing) => {\n                                  const overridesTemp = { ...overrides };\n                                  overridesTemp[dateString].closingBuffer = Number(updatedClosing.target.value);\n                                  setOverrides(overridesTemp);\n                                }}\n                                size=\"small\"\n                              >\n                                <MenuItem value={0}>0 mins</MenuItem>\n                                <MenuItem value={15}>15 mins</MenuItem>\n                                <MenuItem value={30}>30 mins</MenuItem>\n                                <MenuItem value={60}>60 mins</MenuItem>\n                                <MenuItem value={90}>90 mins</MenuItem>\n                              </Select>\n                            </FormControl>\n                          </TableCell>\n                          <TableCell>\n                            {/* button that opens the override capacity section */}\n                            <Button\n                              variant=\"text\"\n                              color=\"primary\"\n                              endIcon={<ExpandMoreIcon />}\n                              sx={{\n                                borderRadius: '50px',\n                                textTransform: 'none',\n                                height: 36,\n                                fontWeight: 'bold',\n                                display: 'inline-flex',\n                              }}\n                              onClick={() => {\n                                const overridesOpenTemp = { ...overridesOpen };\n                                overridesOpenTemp[dateString] = !overridesOpenTemp[dateString];\n                                setOverridesOpen(overridesOpenTemp);\n                              }}\n                            >\n                              Override capacity\n                            </Button>\n                          </TableCell>\n                          <TableCell>\n                            <IconButton\n                              color=\"error\"\n                              onClick={() => {\n                                const overridesTemp = { ...overrides };\n                                delete overridesTemp[dateString];\n                                setOverrides(overridesTemp);\n                              }}\n                            >\n                              <DeleteIcon />\n                            </IconButton>\n                          </TableCell>\n                        </TableRow>\n\n                        {overridesOpen[dateString] && (\n                          <TableRow>\n                            <TableCell colSpan={7}>\n                              <ScheduleCapacity\n                                day={overrides[dateString]}\n                                setDay={(dayTemp: Day) => {\n                                  overrides[dateString] = {\n                                    ...dayTemp,\n                                    open: dayTemp.open as HourOfDay,\n                                    close: dayTemp.close as HourOfDay,\n                                  };\n                                }}\n                                openingHour={overrides[dateString].open}\n                                closingHour={overrides[dateString].close}\n                                openingBuffer={overrides[dateString].openingBuffer}\n                                closingBuffer={overrides[dateString].closingBuffer}\n                              />\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </Fragment>\n                    ))}\n              </TableBody>\n            </Table>\n\n            {/* Add new override button */}\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              sx={{\n                borderRadius: '50px',\n                textTransform: 'none',\n                height: 36,\n                fontWeight: 'bold',\n                marginTop: 3,\n              }}\n              onClick={() => {\n                const overridesTemp = { ...overrides };\n                if (overridesTemp['override-new']) {\n                  setToastWarning('Cannot have two overrides for the same day');\n                } else {\n                  overridesTemp['override-new'] = {\n                    open: 8,\n                    close: 17,\n                    openingBuffer: 0,\n                    closingBuffer: 0,\n                    hours: [],\n                  };\n                }\n                setOverrides(overridesTemp);\n              }}\n            >\n              Add override rule\n            </Button>\n\n            <OfficeClosures closures={closures} setClosures={setClosures} />\n\n            {/* save changes and cancel buttons */}\n            <Box marginTop={5}>\n              <Button\n                variant=\"contained\"\n                type=\"submit\"\n                sx={{\n                  borderRadius: '50px',\n                  textTransform: 'none',\n                  height: 36,\n                  fontWeight: 'bold',\n                }}\n              >\n                Save Changes\n              </Button>\n            </Box>\n          </Box>\n        </form>\n        <ScheduleOverridesDialog\n          loading={loading}\n          handleClose={() => setIsScheduleOverridesDialogOpen(false)}\n          open={isScheduleOverridesDialogOpen}\n          handleConfirm={() => {\n            void update({ scheduleOverrides: overrides ?? {}, closures: closures ?? [] });\n            setIsScheduleOverridesDialogOpen(false);\n          }}\n        />\n      </Paper>\n    </>\n  );\n}\n"]}