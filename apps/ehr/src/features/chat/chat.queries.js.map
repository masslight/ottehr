{"version":3,"file":"chat.queries.js","sourceRoot":"","sources":["chat.queries.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransactionalSMSSendResponse } from '@oystehr/sdk';\nimport { useMutation, UseMutationResult, useQuery, UseQueryResult } from 'react-query';\nimport { ConversationMessage, SMSRecipient } from 'utils';\nimport { getConversation } from '../../api/api';\nimport { useApiClients } from '../../hooks/useAppClients';\nimport { MessageModel } from './ChatModal';\n\nexport const useFetchChatMessagesQuery = (\n  timezone: string,\n  numbersToSendTo?: string[],\n  onSuccess?: (data: ConversationMessage[]) => void\n): UseQueryResult<ConversationMessage[], unknown> => {\n  const { oystehrZambda } = useApiClients();\n  return useQuery(\n    ['chat-messages', numbersToSendTo, timezone],\n    async () => {\n      return await getConversation(oystehrZambda!, { smsNumbers: numbersToSendTo!, timezone });\n    },\n    {\n      onSuccess,\n      enabled: Boolean(oystehrZambda && numbersToSendTo?.length && timezone),\n    }\n  );\n};\n\nexport const useSendMessagesMutation = (\n  recipients: SMSRecipient[],\n  message: string,\n  onSuccess: (data: MessageModel) => void,\n  onError: (error: any) => void\n): UseMutationResult<MessageModel, unknown, MessageModel> => {\n  const { oystehr } = useApiClients();\n  return useMutation(\n    ['chat-messages'],\n    async (pendingMessage: MessageModel): Promise<MessageModel> => {\n      if (oystehr === undefined) {\n        throw new Error(`Message send failed. OystehrUndefined`);\n      }\n      const messageSends = recipients.map(\n        (recipient): Promise<TransactionalSMSSendResponse> =>\n          oystehr?.transactionalSMS.send({\n            message,\n            resource: recipient.recipientResourceUri,\n          })\n      );\n      const outputs = await Promise.allSettled(messageSends);\n      const firstSuccess = outputs.find((result) => {\n        if (result.status === 'fulfilled') {\n          return true;\n        }\n        return false;\n      });\n      if (firstSuccess) {\n        const result = (firstSuccess as PromiseFulfilledResult<TransactionalSMSSendResponse>).value;\n        return { ...pendingMessage, resolvedId: result.resourceId, id: result.resourceId! };\n      } else {\n        const firstFailure = outputs.find((result) => {\n          if (result.status === 'rejected') {\n            return true;\n          }\n          return false;\n        }) as PromiseRejectedResult | undefined;\n\n        if (firstFailure) {\n          throw new Error(`Message send failed: ${firstFailure.reason}`);\n        } else {\n          throw new Error(`Message send failed.`);\n        }\n      }\n    },\n    { onSuccess, onError }\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useGetMessagingConfigQuery = (onSuccess?: (data: any) => void, onError?: () => void) => {\n  const { oystehr } = useApiClients();\n  return useQuery(\n    'messaging-config',\n    async () => {\n      if (!oystehr) {\n        throw new Error('API client not available');\n      }\n\n      return await oystehr.messaging.getMessagingConfig();\n    },\n    {\n      onSuccess,\n      onError,\n      enabled: !!oystehr,\n    }\n  );\n};\n"]}