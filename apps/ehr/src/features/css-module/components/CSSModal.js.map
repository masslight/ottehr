{"version":3,"file":"CSSModal.js","sourceRoot":"","sources":["CSSModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import WarningIcon from '@mui/icons-material/Warning';\nimport { Box, Typography } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { useState } from 'react';\nimport { CustomDialog, CustomDialogProps } from '../../../components/dialogs/CustomDialog';\nimport { dataTestIds } from '../../../constants/data-test-ids';\n\ntype CSSModalProps<Entity = undefined> = {\n  handleConfirm: (entity: Entity) => any;\n  entity?: Entity;\n  errorMessage?: string;\n  icon?: React.ReactNode;\n  showEntityPreview?: boolean;\n  getEntityPreviewText?: (entity: Entity) => string;\n  color?: string;\n  ContentComponent?: React.FC;\n  description?: React.ReactNode;\n  disabled?: boolean;\n};\n\nexport function CSSModal<T = undefined>({\n  handleConfirm: _handleConfirm,\n  entity,\n  errorMessage,\n  icon = <WarningIcon sx={{ mr: 1 }} />,\n  showEntityPreview = true,\n  getEntityPreviewText = (entity: T | undefined) => (entity !== undefined ? JSON.stringify(entity) : ''),\n  open,\n  handleClose,\n  title,\n  description,\n  closeButtonText,\n  closeButton,\n  confirmText,\n  error,\n  color = 'error.main',\n  ContentComponent = React.Fragment,\n  disabled,\n}: CSSModalProps<T> & Omit<CustomDialogProps, 'handleConfirm' | 'confirmLoading'>): React.ReactElement {\n  const [isPerformingAction, setIsPerformingAction] = useState(false);\n  const [errorFromAction, setError] = useState<string | undefined>(undefined);\n\n  const handleConfirm = async (): Promise<void> => {\n    setIsPerformingAction(true);\n    setError(undefined);\n    try {\n      await _handleConfirm(entity as T);\n      handleClose();\n    } catch {\n      setError(errorMessage);\n      enqueueSnackbar(errorMessage, { variant: 'error' });\n    } finally {\n      setIsPerformingAction(false);\n    }\n  };\n\n  const dialogTitle = (\n    <Box display=\"flex\" alignItems=\"center\" color={color} data-testid={dataTestIds.cssModal.confirmationDialogue}>\n      {icon}\n      <Typography variant=\"h4\">{title}</Typography>\n    </Box>\n  );\n\n  const dialogContent = (\n    <>\n      <Typography>{description}</Typography>\n      {showEntityPreview && entity !== undefined && (\n        <Box mt={2} p={2} bgcolor=\"grey.100\" borderRadius={1}>\n          <Typography variant=\"body1\" color=\"text.main\">\n            {getEntityPreviewText(entity)}\n          </Typography>\n        </Box>\n      )}\n      <ContentComponent />\n    </>\n  );\n\n  return (\n    <CustomDialog\n      open={open}\n      handleClose={handleClose}\n      title={dialogTitle}\n      description={dialogContent}\n      closeButton={closeButton}\n      closeButtonText={closeButtonText}\n      handleConfirm={handleConfirm}\n      confirmText={confirmText}\n      confirmLoading={isPerformingAction}\n      error={error || errorFromAction}\n      disabled={disabled}\n    />\n  );\n}\n"]}