{"version":3,"file":"ProfileAvatar.js","sourceRoot":"","sources":["ProfileAvatar.tsx"],"names":[],"mappings":"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","sourcesContent":["import EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport { Avatar, Box, IconButton, useTheme } from '@mui/material';\nimport React, { FC, useEffect, useState } from 'react';\nimport { EditPatientDialog } from '../../../components/dialogs';\nimport ProfilePhotoImagePicker from '../../../components/ProfilePhotoImagePicker';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../telemed';\nimport { useAppointment } from '../hooks/useAppointment';\nimport { useGetSignedPatientProfilePhotoUrlQuery } from '../queries/css.queries';\n\ntype ProfileAvatarProps = {\n  appointmentID?: string;\n  embracingSquareSize?: number;\n  hasEditableInfo?: boolean;\n};\n\nexport const ProfileAvatar: React.FC<ProfileAvatarProps> = ({\n  appointmentID,\n  embracingSquareSize,\n  hasEditableInfo,\n}): JSX.Element => {\n  const { mappedData } = useAppointment(appointmentID);\n\n  const theme = useTheme();\n\n  const [isProfileImagePickerOpen, setProfileImagePickerOpen] = useState<boolean>(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState<boolean>(false);\n  const [profilePhotoUrl, setProfilePhotoUrl] = useState<string | undefined>(undefined);\n\n  const patientPhoto = mappedData?.patientAvatarPhotoUrl;\n\n  useEffect(() => {\n    if (!patientPhoto) {\n      setProfilePhotoUrl(undefined);\n    }\n  }, [patientPhoto]);\n\n  useGetSignedPatientProfilePhotoUrlQuery(patientPhoto, (profilePhotoResponse) => {\n    const { presignedImageUrl } = profilePhotoResponse;\n    setProfilePhotoUrl(presignedImageUrl);\n  });\n\n  const avatarSquareSize = embracingSquareSize ?? 50;\n  const editBubbleSize = Math.floor(0.3 * avatarSquareSize);\n\n  return (\n    <>\n      {isProfileImagePickerOpen && (\n        <ProfilePhotoImagePickerForCSS open={isProfileImagePickerOpen} setOpen={setProfileImagePickerOpen} />\n      )}\n      {hasEditableInfo && isEditDialogOpen && (\n        <EditPatientDialog modalOpen={isEditDialogOpen} onClose={() => setIsEditDialogOpen(false)} />\n      )}\n      <Box sx={{ position: 'relative' }}>\n        <Avatar\n          src={profilePhotoUrl}\n          sx={{ width: avatarSquareSize, height: avatarSquareSize }}\n          alt=\"Patient\"\n          onClick={() => {\n            setProfileImagePickerOpen(true);\n          }}\n        />\n        {hasEditableInfo && (\n          <IconButton\n            size=\"small\"\n            aria-label=\"edit\"\n            sx={{\n              position: 'absolute',\n              bottom: 0,\n              right: 0,\n              backgroundColor: theme.palette.primary.main,\n              color: 'white',\n              width: editBubbleSize,\n              height: editBubbleSize,\n              '&:hover': {\n                backgroundColor: theme.palette.primary.dark,\n              },\n            }}\n            onClick={() => {\n              setIsEditDialogOpen(true);\n            }}\n          >\n            <EditOutlinedIcon fontSize=\"small\" />\n          </IconButton>\n        )}\n      </Box>\n    </>\n  );\n};\n\ntype ProfilePhotoImagePickerForCSSProps = {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst ProfilePhotoImagePickerForCSS: FC<ProfilePhotoImagePickerForCSSProps> = (props) => {\n  const { open, setOpen } = props;\n\n  const { patient } = getSelectors(useAppointmentStore, ['patient']);\n\n  return (\n    <ProfilePhotoImagePicker\n      open={open}\n      setOpen={setOpen}\n      patient={patient}\n      onUpdate={(patientData) =>\n        useAppointmentStore.setState({\n          patient: { ...patientData },\n        })\n      }\n    />\n  );\n};\n"]}