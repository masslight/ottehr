{"version":3,"file":"BreadcrumbsView.js","sourceRoot":"","sources":["BreadcrumbsView.tsx"],"names":[],"mappings":";;;AAAA,0CAA0D;AAC1D,+BAA0B;AAC1B,qDAA2C;AAapC,IAAM,eAAe,GAAmC,UAAC,EAAS;QAAP,KAAK,WAAA;IACrE,IAAM,KAAK,GAAG,IAAA,mBAAQ,GAAE,CAAC;IAEzB,OAAO,CACL,CAAC,cAAG,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAC7D;MAAA,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK;YACrB,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC;YAC7F,OAAO,CACL,CAAC,eAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAC7B;YAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CACf,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CACzD;gBAAA,CAAC,IAAI,CAAC,IAAI,CACZ;cAAA,EAAE,qBAAU,CAAC,CACd,CAAC,CAAC,CAAC,CACF,CAAC,0BAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,EAAE,MAAM,EAAE,CAAC,CACxD;gBAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CACvC;kBAAA,CAAC,IAAI,CAAC,IAAI,CACZ;gBAAA,EAAE,qBAAU,CACd;cAAA,EAAE,0BAAO,CAAC,CACX,CACD;YAAA,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,qBAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,qBAAU,CAAC,CAClG;UAAA,EAAE,eAAK,CAAC,QAAQ,CAAC,CAClB,CAAC;QACJ,CAAC,CAAC,CACJ;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AA1BW,QAAA,eAAe,mBA0B1B","sourcesContent":["import { Box, Typography, useTheme } from '@mui/material';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\ninterface BreadcrumbItem {\n  text: string;\n  link: string;\n  isHighlighted?: boolean;\n  isActive?: boolean;\n}\n\ninterface BreadcrumbsViewProps {\n  items: BreadcrumbItem[];\n}\n\nexport const BreadcrumbsView: React.FC<BreadcrumbsViewProps> = ({ items }) => {\n  const theme = useTheme();\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\" gap={1} flexWrap=\"wrap\">\n      {items.map((item, index) => {\n        const color = item.isHighlighted ? theme.palette.primary.main : theme.palette.text.secondary;\n        return (\n          <React.Fragment key={item.text}>\n            {item.isActive ? (\n              <Typography variant=\"body1\" fontWeight=\"bold\" color={color}>\n                {item.text}\n              </Typography>\n            ) : (\n              <NavLink to={item.link} style={{ textDecoration: 'none' }}>\n                <Typography variant=\"body1\" color={color}>\n                  {item.text}\n                </Typography>\n              </NavLink>\n            )}\n            {index < items.length - 1 && <Typography color={theme.palette.text.secondary}>{'>'}</Typography>}\n          </React.Fragment>\n        );\n      })}\n    </Box>\n  );\n};\n"]}