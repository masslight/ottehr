{"version":3,"file":"CommonLayoutBreadcrumbs.js","sourceRoot":"","sources":["CommonLayoutBreadcrumbs.tsx"],"names":[],"mappings":";;;AAAA,+BAA0B;AAC1B,qEAAuE;AACvE,uEAAsE;AACtE,qDAAoD;AACpD,qDAAoD;AAE7C,IAAM,uBAAuB,GAAG;IACrC,oBAAoB;IACd,IAAA,KAA+B,IAAA,yCAAmB,GAAE,EAAlD,WAAW,iBAAA,EAAE,WAAW,iBAA0B,CAAC;IACnD,IAAA,eAAe,GAAK,IAAA,wCAAoB,GAAE,gBAA3B,CAA4B;IAEnD,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,qBAAS,CAAC,CAAC;IAExC,IAAM,oBAAoB,GAAG,MAAM,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,EAArC,CAAqC,CAAC,CAAC;IAE7F,IAAM,4BAA4B,GAAG,sBACnC,OAAA,CAAC,CAAA,MAAA,MAAM,CAAC,IAAI,CAAC,UAAC,KAAK,IAAK,OAAA,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAtC,CAAsC,CAAC,0CAAE,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA,CAAA,EAAA,CAAC;IAEnG,IAAI,eAAe,KAAK,QAAQ,IAAI,CAAC,oBAAoB,CAAC,MAAM,IAAI,4BAA4B,EAAE,EAAE,CAAC;QACnG,OAAO,EAAE,GAAG,CAAC;IACf,CAAC;IAED,IAAM,WAAW,GAAG,oBAAoB,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC;QACvD,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,IAAI,EAAE,KAAK,CAAC,IAAI;QAChB,aAAa,EAAE,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;QAC/C,QAAQ,EAAE,KAAK,CAAC,IAAI,KAAK,WAAW;KACrC,CAAC,EALsD,CAKtD,CAAC,CAAC;IAEJ,OAAO,CAAC,iCAAe,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,EAAG,CAAC;AACjD,CAAC,CAAC;AAxBW,QAAA,uBAAuB,2BAwBlC","sourcesContent":["import React from 'react';\nimport { useNavigationContext } from '../../context/NavigationContext';\nimport { usePageIntakeStatus } from '../../hooks/usePageIntakeStatus';\nimport { routesCSS } from '../../routing/routesCSS';\nimport { BreadcrumbsView } from './BreadcrumbsView';\n\nexport const CommonLayoutBreadcrumbs = (): React.ReactElement => {\n  // TODO replace mock\n  const { filledPages, currentPage } = usePageIntakeStatus();\n  const { interactionMode } = useNavigationContext();\n\n  const routes = Object.values(routesCSS);\n\n  const routesForCurrentMode = routes.filter((route) => route.modes.includes(interactionMode));\n\n  const getIsRouteWithoutBreadcrumbs = (): boolean =>\n    !routes.find((route) => location.pathname.includes(route.path))?.modes.includes(interactionMode);\n\n  if (interactionMode !== 'intake' || !routesForCurrentMode.length || getIsRouteWithoutBreadcrumbs()) {\n    return <></>;\n  }\n\n  const breadcrumbs = routesForCurrentMode.map((route) => ({\n    text: route.text,\n    link: route.path,\n    isHighlighted: filledPages.includes(route.path),\n    isActive: route.path === currentPage,\n  }));\n\n  return <BreadcrumbsView items={breadcrumbs} />;\n};\n"]}