{"version":3,"file":"useDeleteNote.js","sourceRoot":"","sources":["useDeleteNote.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAA4C;AAC5C,+BAAoC;AACpC,2CAA6C;AAE7C,kDAA4D;AAC5D,4DAA2D;AAE3D,+DAA8D;AAEvD,IAAM,aAAa,GAAkB,UAAC,EAAmC;;QAAjC,WAAW,iBAAA,EAAE,SAAS,eAAA,EAAE,OAAO,aAAA;IAC5E,IAAM,WAAW,GAAG,IAAA,4BAAc,GAAE,CAAC;IAC7B,IAAQ,eAAe,GAAK,IAAA,4BAAkB,GAAE,OAAzB,CAA0B;IACjD,IAAA,OAAO,GAAK,IAAA,2BAAY,EAAC;QAC/B,WAAW,aAAA;QACX,eAAe,YAAI,GAAC,SAAS,CAAC,SAAS,IAAG,SAAS,CAAC,YAAY,KAAE;KACnE,CAAC,QAHa,CAGZ;IACH,IAAM,QAAQ,GAAG,IAAA,2CAAoB,EAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;IAEnF,IAAM,YAAY,GAAG,IAAA,mBAAW,EAC9B,UAAO,MAAoB;;YACzB,sBAAO,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;;oBACvC,eAAe,CAAC,CAAA,SAAE,GAAC,SAAS,CAAC,SAAS,IAAG,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC,IAAqB,CAAA,EAAE;wBACjG,SAAS,EAAE;;;;;;wCAED,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAC,OAAY;;;4CAC7D,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;gDACnC,6BACK,OAAO,gBACT,SAAS,CAAC,SAAS,IAAG,MACrB,OAAO,CAAC,SAAS,CAAC,SAAS,CAC5B,0CAAE,MAAM,CAAC,UAAC,IAAI,IAAK,OAAA,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,UAAU,MAAK,MAAM,CAAC,UAAU,EAAtC,CAAsC,CAAC,OAC3D;4CACJ,CAAC;4CACD,OAAO,OAAO,CAAC;wCACjB,CAAC,CAAC,CAAC;6CACC,CAAA,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,SAAS,CAAC,SAAS,CAAC,MAAK,SAAS,CAAA,EAA3C,wBAA2C;wCAC7C,wCAAwC;wCACxC,qBAAM,OAAO,EAAE,EAAA;;wCADf,wCAAwC;wCACxC,SAAe,CAAC;;;wCAElB,OAAO,EAAE,CAAC;;;;wCAEV,OAAO,CAAC,KAAK,CAAC,OAAK,CAAC,CAAC;wCACrB,IAAA,2BAAe,EAAC,OAAO,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;wCAChG,MAAM,CAAC,OAAK,CAAC,CAAC;;;;;6BAEjB;wBACD,OAAO,EAAE,UAAC,KAAK;4BACb,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;4BACrB,IAAA,2BAAe,EAAC,OAAO,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;4BAChG,MAAM,CAAC,KAAK,CAAC,CAAC;wBAChB,CAAC;qBACF,CAAC,CAAC;gBACL,CAAC,CAAC,EAAC;;SACJ,EACD,CAAC,SAAS,EAAE,QAAQ,EAAE,eAAe,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC,CACtE,CAAC;IAEF,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAjDW,QAAA,aAAa,iBAiDxB","sourcesContent":["import { enqueueSnackbar } from 'notistack';\nimport { useCallback } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { ChartDataFields, GetChartDataResponse } from 'utils';\nimport { useDeleteChartData } from '../../../../../telemed';\nimport { useChartData } from '../../../hooks/useChartData';\nimport { EditableNote, UseDeleteNote } from '../types';\nimport { useChartDataCacheKey } from './useChartDataCacheKey';\n\nexport const useDeleteNote: UseDeleteNote = ({ encounterId, apiConfig, locales }) => {\n  const queryClient = useQueryClient();\n  const { mutate: deleteChartData } = useDeleteChartData();\n  const { refetch } = useChartData({\n    encounterId,\n    requestedFields: { [apiConfig.fieldName]: apiConfig.searchParams },\n  });\n  const cacheKey = useChartDataCacheKey(apiConfig.fieldName, apiConfig.searchParams);\n\n  const handleDelete = useCallback(\n    async (entity: EditableNote): Promise<void> => {\n      return new Promise<void>((resolve, reject) => {\n        deleteChartData({ [apiConfig.fieldName]: [{ resourceId: entity.resourceId }] } as ChartDataFields, {\n          onSuccess: async () => {\n            try {\n              const result = queryClient.setQueryData(cacheKey, (oldData: any) => {\n                if (oldData?.[apiConfig.fieldName]) {\n                  return {\n                    ...oldData,\n                    [apiConfig.fieldName]: (\n                      oldData[apiConfig.fieldName] as GetChartDataResponse[typeof apiConfig.fieldName]\n                    )?.filter((note) => note?.resourceId !== entity.resourceId),\n                  };\n                }\n                return oldData;\n              });\n              if (result?.[apiConfig.fieldName] === undefined) {\n                // refetch all if the cache didn't found\n                await refetch();\n              }\n              resolve();\n            } catch (error) {\n              console.error(error);\n              enqueueSnackbar(locales.getErrorMessage('deletion', locales.entityLabel), { variant: 'error' });\n              reject(error);\n            }\n          },\n          onError: (error) => {\n            console.error(error);\n            enqueueSnackbar(locales.getErrorMessage('deletion', locales.entityLabel), { variant: 'error' });\n            reject(error);\n          },\n        });\n      });\n    },\n    [apiConfig, cacheKey, deleteChartData, locales, queryClient, refetch]\n  );\n\n  return handleDelete;\n};\n"]}