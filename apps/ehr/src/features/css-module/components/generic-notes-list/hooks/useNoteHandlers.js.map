{"version":3,"file":"useNoteHandlers.js","sourceRoot":"","sources":["useNoteHandlers.ts"],"names":[],"mappings":";;;AACA,4DAA2D;AAE3D,iDAAgD;AAChD,6CAA4C;AAC5C,6CAA4C;AAErC,IAAM,eAAe,GAAoB,UAAC,EAA8C;;QAA5C,WAAW,iBAAA,EAAE,SAAS,eAAA,EAAE,SAAS,eAAA,EAAE,OAAO,aAAA;IACrF,IAAA,KAA2B,IAAA,2BAAY,EAAC;QAC5C,WAAW,aAAA;QACX,eAAe,YAAI,GAAC,SAAS,CAAC,SAAS,IAAG,SAAS,CAAC,YAAY,KAAE;KACnE,CAAC,EAHM,SAAS,eAAA,EAAE,SAAS,eAG1B,CAAC;IAEH,IAAM,QAAQ,GAAI,CAAC,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAG,SAAS,CAAC,SAAS,CAAC,KAAI,EAAE,CAAe,CAAC,GAAG,CAAC,UAAC,IAAa,IAAK,OAAA,CAAC;QAC/F,UAAU,EAAE,IAAI,CAAC,UAAU;QAC3B,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACvB,UAAU,EAAE,IAAI,CAAC,UAAU;QAC3B,WAAW,EAAE,IAAI,CAAC,WAAW;QAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;QAC7B,SAAS,EAAE,IAAI,CAAC,SAAS;QACzB,IAAI,EAAE,IAAI,CAAC,IAAI;KAChB,CAAC,EAT8F,CAS9F,CAAmB,CAAC;IAEtB,IAAM,UAAU,GAAG,IAAA,yBAAW,EAAC,EAAE,WAAW,aAAA,EAAE,SAAS,WAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;IACtE,IAAM,UAAU,GAAG,IAAA,yBAAW,EAAC,EAAE,WAAW,aAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;IAC3D,IAAM,YAAY,GAAG,IAAA,6BAAa,EAAC,EAAE,WAAW,aAAA,EAAE,SAAS,WAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;IAExE,OAAO;QACL,QAAQ,UAAA;QACR,SAAS,WAAA;QACT,UAAU,YAAA;QACV,UAAU,YAAA;QACV,YAAY,cAAA;KACb,CAAC;AACJ,CAAC,CAAC;AA5BW,QAAA,eAAe,mBA4B1B","sourcesContent":["import { NoteDTO } from 'utils';\nimport { useChartData } from '../../../hooks/useChartData';\nimport { EditableNote, UseNoteHandlers } from '../types';\nimport { useDeleteNote } from './useDeleteNote';\nimport { useEditNote } from './useEditNote';\nimport { useSaveNote } from './useSaveNote';\n\nexport const useNoteHandlers: UseNoteHandlers = ({ encounterId, patientId, apiConfig, locales }) => {\n  const { chartData, isLoading } = useChartData({\n    encounterId,\n    requestedFields: { [apiConfig.fieldName]: apiConfig.searchParams },\n  });\n\n  const entities = ((chartData?.[apiConfig.fieldName] || []) as NoteDTO[]).map((note: NoteDTO) => ({\n    resourceId: note.resourceId,\n    text: note.text,\n    authorId: note.authorId,\n    authorName: note.authorName,\n    lastUpdated: note.lastUpdated,\n    encounterId: note.encounterId,\n    patientId: note.patientId,\n    type: note.type,\n  })) as EditableNote[];\n\n  const handleSave = useSaveNote({ encounterId, patientId, apiConfig });\n  const handleEdit = useEditNote({ encounterId, apiConfig });\n  const handleDelete = useDeleteNote({ encounterId, apiConfig, locales });\n\n  return {\n    entities,\n    isLoading,\n    handleSave,\n    handleEdit,\n    handleDelete,\n  };\n};\n"]}