{"version":3,"file":"useSaveNote.js","sourceRoot":"","sources":["useSaveNote.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+BAAoC;AACpC,2CAA6C;AAE7C,oEAA+D;AAC/D,wFAAuF;AACvF,4DAA2D;AAE3D,+DAA8D;AAEvD,IAAM,WAAW,GAAgB,UAAC,EAAqC;;QAAnC,WAAW,iBAAA,EAAE,SAAS,eAAA,EAAE,SAAS,eAAA;IAC1E,IAAM,SAAS,GAAG,IAAA,yCAAmB,GAAE,CAAC;IACxC,IAAM,IAAI,GAAG,IAAA,uBAAa,GAAE,CAAC;IAC7B,IAAM,WAAW,GAAG,IAAA,4BAAc,GAAE,CAAC;IACrC,IAAM,QAAQ,GAAG,IAAA,2CAAoB,EAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;IAE3E,IAAA,OAAO,GAAK,IAAA,2BAAY,EAAC;QAC/B,WAAW,aAAA;QACX,eAAe,YAAI,GAAC,SAAS,CAAC,SAAS,IAAG,SAAS,CAAC,YAAY,KAAE;KACnE,CAAC,QAHa,CAGZ;IAEH,IAAM,UAAU,GAAG,IAAA,mBAAW,EAC5B,UAAO,IAAY;;;;;;;oBACjB,IAAI,CAAC,IAAI;wBAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;oBAEvC,OAAO,GAAY;wBACvB,IAAI,EAAE,SAAS,CAAC,IAAI;wBACpB,IAAI,MAAA;wBACJ,QAAQ,EAAE,MAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,KAAK,CAAC,GAAG,CAAC,0CAAG,CAAC,CAAC,mCAAI,SAAS;wBACpD,UAAU,EAAE,IAAI,CAAC,QAAQ;wBACzB,SAAS,WAAA;wBACT,WAAW,aAAA;qBACZ,CAAC;oBAEiB,qBAAM,CAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,aAAa;gCAC/C,WAAW,EAAE,WAAW;;4BACxB,GAAC,SAAS,CAAC,SAAS,IAAG,CAAC,OAAO,CAAC;gCAChC,CAAA,EAAA;;oBAHI,UAAU,GAAG,SAGjB;oBAEI,SAAS,GAAG,MAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,SAAS,0CAAG,SAAS,CAAC,SAAS,CAAC,CAAC;yBAE3D,SAAS,EAAT,wBAAS;oBACL,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAC,OAAY;;wBAC7D,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC;4BACnC,6BACK,OAAO,gBACT,SAAS,CAAC,SAAS,IAAG,gCAClB,SAAS,SACT,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,OACoB,OACrD;wBACJ,CAAC;wBACD,OAAO,OAAO,CAAC;oBACjB,CAAC,CAAC,CAAC;yBAEC,CAAA,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAG,SAAS,CAAC,SAAS,CAAC,MAAK,SAAS,CAAA,EAA3C,wBAA2C;oBAC7C,wCAAwC;oBACxC,qBAAM,OAAO,EAAE,EAAA;;oBADf,wCAAwC;oBACxC,SAAe,CAAC;;;;;SAGrB,EACD,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,CACrF,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAvDW,QAAA,WAAW,eAuDtB","sourcesContent":["import { useCallback } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { GetChartDataResponse, NoteDTO } from 'utils';\nimport useEvolveUser from '../../../../../hooks/useEvolveUser';\nimport { useOystehrAPIClient } from '../../../../../telemed/hooks/useOystehrAPIClient';\nimport { useChartData } from '../../../hooks/useChartData';\nimport { UseSaveNote } from '../types';\nimport { useChartDataCacheKey } from './useChartDataCacheKey';\n\nexport const useSaveNote: UseSaveNote = ({ encounterId, patientId, apiConfig }) => {\n  const apiClient = useOystehrAPIClient();\n  const user = useEvolveUser();\n  const queryClient = useQueryClient();\n  const cacheKey = useChartDataCacheKey(apiConfig.fieldName, apiConfig.searchParams);\n\n  const { refetch } = useChartData({\n    encounterId,\n    requestedFields: { [apiConfig.fieldName]: apiConfig.searchParams },\n  });\n\n  const handleSave = useCallback(\n    async (text: string): Promise<void> => {\n      if (!user) throw new Error('User not found');\n\n      const newNote: NoteDTO = {\n        type: apiConfig.type,\n        text,\n        authorId: user.profile?.split('/')?.[1] ?? 'unknown',\n        authorName: user.userName,\n        patientId,\n        encounterId,\n      };\n\n      const saveResult = await apiClient?.saveChartData?.({\n        encounterId: encounterId,\n        [apiConfig.fieldName]: [newNote],\n      });\n\n      const savedData = saveResult?.chartData?.[apiConfig.fieldName];\n\n      if (savedData) {\n        const result = queryClient.setQueryData(cacheKey, (oldData: any) => {\n          if (oldData?.[apiConfig.fieldName]) {\n            return {\n              ...oldData,\n              [apiConfig.fieldName]: [\n                ...savedData,\n                ...oldData[apiConfig.fieldName],\n              ] as GetChartDataResponse[typeof apiConfig.fieldName],\n            };\n          }\n          return oldData;\n        });\n\n        if (result?.[apiConfig.fieldName] === undefined) {\n          // refetch all if the cache didn't found\n          await refetch();\n        }\n      }\n    },\n    [user, apiConfig, patientId, encounterId, apiClient, queryClient, cacheKey, refetch]\n  );\n\n  return handleSave;\n};\n"]}