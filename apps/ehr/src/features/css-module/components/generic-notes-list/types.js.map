{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import { ChartDataFields, NOTE_TYPE, NoteDTO, SearchParams } from 'utils';\n\nexport interface CustomizableNotesConfig {\n  separateEncounterNotes?: boolean; // notes from another encounters should be shown by \"show more\" button\n}\n\nexport interface GenericNotesConfig extends CustomizableNotesConfig {\n  apiConfig: NoteApiConfig;\n  locales: NoteLocales;\n}\n\nexport interface NoteApiConfig {\n  fieldName: Extract<keyof ChartDataFields, 'notes'>;\n  type: NOTE_TYPE;\n  searchParams: SearchParams;\n}\n\nexport interface NoteLocales {\n  entityLabel: string;\n  editModalTitle: string;\n  editModalPlaceholder: string;\n  getAddButtonText: (isSaving: boolean) => string;\n  getMoreButtonText: (isMoreEntitiesShown: boolean) => string;\n  getDeleteModalTitle: (entityLabel: string) => string;\n  getDeleteModalContent: (entityLabel: string) => string;\n  getKeepButtonText: () => string;\n  getDeleteButtonText: (isDeleting: boolean) => string;\n  getLeaveButtonText: () => string;\n  getSaveButtonText: (isSaving: boolean) => string;\n  getErrorMessage: (action: string, entityLabel: string) => string;\n  getGenericErrorMessage: () => string;\n}\n\nexport interface GenericNoteListProps extends CustomizableNotesConfig {\n  apiConfig: NoteApiConfig;\n  locales: NoteLocales;\n}\n\nexport interface EditableNotesListProps extends CustomizableNotesConfig {\n  currentEncounterId: string;\n  locales: NoteLocales;\n  apiConfig: NoteApiConfig;\n  encounterId: string;\n  patientId: string;\n}\n\nexport interface EditableNote extends NoteDTO {\n  resourceId: string;\n  text: string;\n  authorId: string;\n  authorName: string;\n  lastUpdated: string;\n  encounterId: string;\n  patientId: string;\n  type: NOTE_TYPE;\n}\n\nexport type UseNoteHandlers = (props: {\n  encounterId: string;\n  patientId: string;\n  apiConfig: NoteApiConfig;\n  locales: NoteLocales;\n}) => {\n  entities: EditableNote[];\n  isLoading: boolean;\n  handleSave: ReturnType<UseSaveNote>;\n  handleEdit: ReturnType<UseEditNote>;\n  handleDelete: ReturnType<UseDeleteNote>;\n};\n\nexport type UseSaveNote = (props: {\n  encounterId: string;\n  patientId: string;\n  apiConfig: NoteApiConfig;\n}) => (text: string) => Promise<void>;\n\nexport type UseDeleteNote = (props: {\n  encounterId: string;\n  apiConfig: NoteApiConfig;\n  locales: NoteLocales;\n}) => (entity: EditableNote) => Promise<void>;\n\nexport type UseEditNote = (props: {\n  encounterId: string;\n  apiConfig: NoteApiConfig;\n}) => (entity: EditableNote, newText: string) => Promise<void>;\n"]}