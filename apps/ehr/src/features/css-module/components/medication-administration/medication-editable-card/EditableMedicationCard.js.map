{"version":3,"file":"EditableMedicationCard.js","sourceRoot":"","sources":["EditableMedicationCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Medication } from 'fhir/r4b';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { MedicationWithTypeDTO, useMedicationHistory } from 'src/features/css-module/hooks/useMedicationHistory';\nimport { useApiClients } from 'src/hooks/useAppClients';\nimport { ERX, ERXStatus } from 'src/telemed/features/appointment/ERX';\nimport {\n  ExtendedMedicationDataForResponse,\n  getMedicationName,\n  MedicationData,\n  medicationExtendedToMedicationData,\n  MedicationInteractions,\n  MedicationOrderStatusesType,\n  MEDISPAN_DISPENSABLE_DRUG_ID_CODE_SYSTEM,\n  UpdateMedicationOrderInput,\n} from 'utils';\nimport { useAppointment } from '../../../hooks/useAppointment';\nimport { OrderFieldsSelectsOptions, useFieldsSelectsOptions } from '../../../hooks/useGetFieldOptions';\nimport { useMedicationManagement } from '../../../hooks/useMedicationManagement';\nimport { useReactNavigationBlocker } from '../../../hooks/useReactNavigationBlocker';\nimport { getEditOrderUrl } from '../../../routing/helpers';\nimport { ROUTER_PATH, routesCSS } from '../../../routing/routesCSS';\nimport { CSSModal } from '../../CSSModal';\nimport { InteractionAlertsDialog } from '../InteractionAlertsDialog';\nimport { interactionsSummary } from '../util';\nimport { fieldsConfig, MedicationOrderType } from './fieldsConfig';\nimport { InteractionsMessage, MedicationCardView } from './MedicationCardView';\nimport {\n  ConfirmSaveModalConfig,\n  findPrescriptionsForInteractions,\n  getConfirmSaveModalConfigs,\n  getFieldType,\n  getInitialAutoFilledFields,\n  getSaveButtonText,\n  interactionsUnresolved,\n  isUnsavedMedicationData,\n  medicationInteractionsFromErxResponse,\n  validateAllMedicationFields,\n} from './utils';\n\ninterface InteractionsCheckState {\n  status: 'in-progress' | 'done' | 'error';\n  medicationId?: string;\n  medicationName?: string;\n  interactions?: MedicationInteractions;\n}\n\nconst INTERACTIONS_CHECK_STATE_ERROR: InteractionsCheckState = {\n  status: 'error',\n  interactions: undefined,\n};\n\nexport const EditableMedicationCard: React.FC<{\n  medication?: ExtendedMedicationDataForResponse;\n  type: MedicationOrderType;\n}> = ({ medication, type: typeFromProps }) => {\n  const [isOrderUpdating, setIsOrderUpdating] = useState<boolean>(false);\n  const { id: appointmentId } = useParams();\n  const navigate = useNavigate();\n  const autoFilledFieldsRef = useRef<Partial<MedicationData>>({});\n  const [isConfirmSaveModalOpen, setIsConfirmSaveModalOpen] = useState(false);\n  const confirmedMedicationUpdateRequestRef = useRef<Partial<UpdateMedicationOrderInput>>({});\n  const [confirmationModalConfig, setConfirmationModalConfig] = useState<ConfirmSaveModalConfig | null>(null);\n  const { mappedData, resources } = useAppointment(appointmentId);\n  const [isReasonSelected, setIsReasonSelected] = useState(true);\n  const selectsOptions = useFieldsSelectsOptions();\n  const [erxStatus, setERXStatus] = useState(ERXStatus.LOADING);\n  const [interactionsCheckState, setInteractionsCheckState] = useState<InteractionsCheckState>({ status: 'done' });\n  const { oystehr } = useApiClients();\n  const [showInteractionAlerts, setShowInteractionAlerts] = useState(false);\n  const [erxEnabled, setErxEnabled] = useState(false);\n  const { isLoading: isMedicationHistoryLoading, medicationHistory, refetchHistory } = useMedicationHistory();\n\n  // There are dynamic form config which depend on what button was clicked:\n  // - If \"administered\" was clicked, then \"dispense\" form config should be used\n  // - If \"not-administered\" was clicked, then \"dispense-not-administered\" form config will be used\n  // See: https://github.com/masslight/ottehr/issues/2799\n  const typeRef = useRef<MedicationOrderType>(typeFromProps);\n\n  const [localValues, setLocalValues] = useState<Partial<MedicationData>>(\n    medication\n      ? {\n          ...medicationExtendedToMedicationData(medication),\n          ...getInitialAutoFilledFields(medication, autoFilledFieldsRef),\n        }\n      : {}\n  );\n\n  const { updateMedication, getMedicationFieldValue, getIsMedicationEditable } = useMedicationManagement();\n  const [currentStatus, setCurrentStatus] = useState<MedicationOrderStatusesType>(medication?.status || 'pending');\n  const [fieldErrors, setFieldErrors] = useState<Record<string, boolean>>({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [missingFields, setMissingFields] = useState<string[]>([]);\n  const [showErrors, setShowErrors] = useState(false);\n  const isSavedRef = useRef(false);\n\n  const handleStatusChange = async (newStatus: MedicationOrderStatusesType): Promise<void> => {\n    isSavedRef.current = false;\n    setCurrentStatus(newStatus);\n  };\n\n  const handleFieldValueChange = <Field extends keyof MedicationData>(\n    field: Field,\n    value: MedicationData[Field]\n  ): void => {\n    isSavedRef.current = false;\n    if (field === 'dose') {\n      setLocalValues((prev) => ({ ...prev, [field]: Number(value) }));\n    } else {\n      setLocalValues((prev) => ({ ...prev, [field]: value }));\n    }\n    if (field === 'medicationId' && value !== '' && (typeFromProps === 'order-new' || typeFromProps === 'order-edit')) {\n      setErxEnabled(true);\n    }\n  };\n\n  const updateOrCreateOrder = async (updatedRequestInput: UpdateMedicationOrderInput): Promise<void> => {\n    // set type dynamically after user click corresponding button to use correct form config https://github.com/masslight/ottehr/issues/2799\n    if (updatedRequestInput.newStatus === 'administered' || updatedRequestInput.newStatus === 'administered-partly') {\n      typeRef.current = 'dispense';\n    } else if (updatedRequestInput.newStatus === 'administered-not') {\n      typeRef.current = 'dispense-not-administered';\n    }\n\n    const { isValid, missingFields } = validateAllMedicationFields(\n      localValues,\n      medication,\n      typeRef.current,\n      setFieldErrors\n    );\n\n    // we check that have not empty required fields\n    if (!isValid) {\n      setMissingFields(missingFields);\n      setIsModalOpen(true);\n      setShowErrors(true);\n      return;\n    }\n\n    /**\n     * Using ref to store data that will be:\n     * 1. Displayed in confirmation modal for user review\n     * 2. May be changed during confirmation process (the reason will be specified)\n     * 3. Used in save callback after user confirmation\n     *\n     * This approach ensures that the exact data shown to and confirmed by the user\n     * will be sent to the endpoint and saved.\n     * We can't use async useState value here, because we should save value synchronously after user confirmation.\n     */\n\n    confirmedMedicationUpdateRequestRef.current = {\n      ...(updatedRequestInput.orderId ? { orderId: updatedRequestInput.orderId } : {}),\n\n      ...(updatedRequestInput.orderId && updatedRequestInput.newStatus && updatedRequestInput.newStatus !== 'pending'\n        ? { newStatus: updatedRequestInput.newStatus }\n        : {}),\n\n      orderData: {\n        ...(medication ? medicationExtendedToMedicationData(medication) : {}),\n        ...updatedRequestInput.orderData,\n        patient: resources.patient?.id || '',\n        encounterId: resources.encounter?.id || '',\n      } as MedicationData,\n      interactions: interactionsCheckState.interactions,\n    };\n\n    // for order creating or editing we don't have to show confirmation modal, so we can save it immediately\n    if (typeRef.current === 'order-new' || typeRef.current === 'order-edit') {\n      await handleConfirmSave(confirmedMedicationUpdateRequestRef);\n      return;\n    }\n\n    if (\n      (typeRef.current === 'dispense' || typeRef.current === 'dispense-not-administered') &&\n      (updatedRequestInput.newStatus === 'administered' ||\n        updatedRequestInput.newStatus === 'administered-partly' ||\n        updatedRequestInput.newStatus === 'administered-not')\n    ) {\n      const medicationName = medication?.medicationName ?? '';\n\n      const routeName =\n        selectsOptions.route.options.find((option) => option.value === updatedRequestInput?.orderData?.route)?.label ||\n        '';\n\n      const confirmSaveModalConfigs = getConfirmSaveModalConfigs({\n        medicationName,\n        routeName,\n        patientName: mappedData.patientName || '',\n        newStatus: updatedRequestInput.newStatus,\n        updateRequestInputRef: confirmedMedicationUpdateRequestRef,\n        setIsReasonSelected,\n      });\n\n      setConfirmationModalConfig(confirmSaveModalConfigs[updatedRequestInput.newStatus] as ConfirmSaveModalConfig);\n      setIsConfirmSaveModalOpen(true);\n    }\n  };\n\n  const handleConfirmSave = async (\n    medicationUpdateRequestInputRefRef: React.MutableRefObject<UpdateMedicationOrderInput>\n  ): Promise<void> => {\n    if (!medicationUpdateRequestInputRefRef.current.orderData) return;\n\n    // modal window on close will clear the medicationUpdateRequest ref,\n    // so we need to save the new status to make it possible to set\n    // the correct state if the user closes the modal during the updating\n    const newStatus = medicationUpdateRequestInputRefRef.current?.newStatus;\n\n    try {\n      setIsOrderUpdating(true);\n\n      const response = await updateMedication(medicationUpdateRequestInputRefRef.current);\n      isSavedRef.current = true;\n\n      // update saved status in the local state\n      if (newStatus) {\n        await handleStatusChange(newStatus);\n      }\n\n      if (typeRef.current === 'order-new') {\n        if (response?.id) {\n          navigate(getEditOrderUrl(appointmentId!, response.id));\n        }\n      }\n\n      void refetchHistory();\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsOrderUpdating(false);\n      setShowErrors(false);\n      setLocalValues({});\n      setFieldErrors({});\n      setIsConfirmSaveModalOpen(false);\n      medicationUpdateRequestInputRefRef.current = {};\n      setConfirmationModalConfig(null);\n    }\n  };\n\n  const getFieldValue = useCallback(\n    <Field extends keyof MedicationData>(field: Field, type = 'text'): MedicationData[Field] | '' | undefined => {\n      return localValues[field] ?? (medication ? getMedicationFieldValue(medication || {}, field, type) : undefined);\n    },\n    [localValues, medication, getMedicationFieldValue]\n  );\n\n  const isUnsavedData = isUnsavedMedicationData(\n    medication,\n    localValues,\n    currentStatus,\n    getMedicationFieldValue,\n    autoFilledFieldsRef,\n    interactionsCheckState.interactions\n  );\n\n  const isEditOrderPage = location.pathname.includes(\n    routesCSS[ROUTER_PATH.IN_HOUSE_ORDER_EDIT].activeCheckPath as string\n  );\n\n  const isOrderPage = location.pathname.includes(routesCSS[ROUTER_PATH.IN_HOUSE_ORDER_NEW].activeCheckPath as string);\n  const shouldBlockNavigation = (): boolean => !isSavedRef.current && (isEditOrderPage || isOrderPage) && isUnsavedData;\n  const { ConfirmationModal: ConfirmationModalForLeavePage } = useReactNavigationBlocker(shouldBlockNavigation);\n  const saveButtonText = getSaveButtonText(\n    medication?.status || 'pending',\n    typeRef.current,\n    currentStatus,\n    isUnsavedData\n  );\n\n  const hasNotEditableStatus = currentStatus !== 'pending';\n  const isCreatingOrEditingOrder = typeRef.current === 'order-new' || typeRef.current === 'order-edit';\n  const isCreatingOrEditingOrderAndNothingToSave = isCreatingOrEditingOrder && !isUnsavedData;\n  const isErxLoading = erxEnabled && erxStatus === ERXStatus.LOADING;\n  const hasInprogressOrUnresolvedInteractions =\n    interactionsCheckState.status === 'in-progress' || interactionsUnresolved(interactionsCheckState.interactions);\n\n  const isCardSaveButtonDisabled =\n    isOrderUpdating ||\n    hasNotEditableStatus ||\n    isCreatingOrEditingOrderAndNothingToSave ||\n    isErxLoading ||\n    hasInprogressOrUnresolvedInteractions;\n  const isModalSaveButtonDisabled =\n    confirmedMedicationUpdateRequestRef.current.newStatus === 'administered' ? false : isReasonSelected;\n\n  useEffect(() => {\n    if (typeRef.current === 'order-new') {\n      Object.entries(fieldsConfig[typeRef.current]).map(([field]) => {\n        const defaultOption = selectsOptions[field as keyof OrderFieldsSelectsOptions]?.defaultOption?.value;\n        if (defaultOption) {\n          const value = getFieldValue(field as keyof MedicationData);\n          if (!value || (typeof value === 'number' && value < 0))\n            setLocalValues((prev) => ({ ...prev, [field]: defaultOption }));\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const defaultProviderValue = selectsOptions.providerId.defaultOption?.value;\n  const currentProviderValue = getFieldValue('providerId');\n  const wasProvidedByFieldTouched = useRef(false);\n  if (currentProviderValue) wasProvidedByFieldTouched.current = true;\n  useEffect(() => {\n    if (!wasProvidedByFieldTouched.current && !currentProviderValue && defaultProviderValue) {\n      setLocalValues((prev) => ({ ...prev, providerId: defaultProviderValue }));\n    }\n  }, [defaultProviderValue, currentProviderValue]);\n\n  const runInteractionsCheck = useCallback(\n    async (medicationId: string, medicationHistory: MedicationWithTypeDTO[]) => {\n      if (oystehr == null) {\n        setInteractionsCheckState(INTERACTIONS_CHECK_STATE_ERROR);\n        console.error('oystehr is missing');\n        return;\n      }\n      const patientId = resources.patient?.id;\n      if (patientId == null) {\n        setInteractionsCheckState(INTERACTIONS_CHECK_STATE_ERROR);\n        console.error('patientId is missing');\n        return;\n      }\n      setInteractionsCheckState({\n        status: 'in-progress',\n        medicationId: medicationId,\n      });\n      try {\n        const medication = await oystehr.fhir.get<Medication>({\n          resourceType: 'Medication',\n          id: medicationId,\n        });\n        const interactionsCheckResponse = await oystehr.erx.checkPrecheckInteractions({\n          patientId,\n          drugId:\n            medication.code?.coding?.find((coding) => coding.system === MEDISPAN_DISPENSABLE_DRUG_ID_CODE_SYSTEM)\n              ?.code ?? '',\n        });\n        const prescriptions = await findPrescriptionsForInteractions(\n          resources.patient?.id,\n          interactionsCheckResponse,\n          oystehr\n        );\n        setInteractionsCheckState({\n          status: 'done',\n          interactions: medicationInteractionsFromErxResponse(\n            interactionsCheckResponse,\n            medicationHistory,\n            prescriptions\n          ),\n          medicationId: medicationId,\n          medicationName: getMedicationName(medication),\n        });\n      } catch (e) {\n        setInteractionsCheckState(INTERACTIONS_CHECK_STATE_ERROR);\n        console.error(e);\n      }\n    },\n    [oystehr, resources.patient?.id]\n  );\n\n  const medicationHistoryJson = JSON.stringify(medicationHistory);\n  useEffect(() => {\n    const medicationId = localValues.medicationId;\n    if (medicationId && erxStatus === ERXStatus.READY && !isMedicationHistoryLoading) {\n      void runInteractionsCheck(medicationId, JSON.parse(medicationHistoryJson));\n    }\n  }, [localValues.medicationId, runInteractionsCheck, erxStatus, isMedicationHistoryLoading, medicationHistoryJson]);\n\n  useEffect(() => {\n    if (medication) {\n      if (medication.interactions != null) {\n        setInteractionsCheckState({\n          status: 'done',\n          interactions: medication.interactions,\n          medicationId: medication.medicationId,\n          medicationName: medication.medicationName,\n        });\n      } else {\n        setInteractionsCheckState({\n          status: 'error',\n          medicationId: medication.medicationId,\n          medicationName: medication.medicationName,\n        });\n      }\n    }\n  }, [medication]);\n\n  const interactionsMessage: InteractionsMessage | undefined = useMemo(() => {\n    if (\n      (!localValues.medicationId && !medication) ||\n      (erxEnabled && erxStatus === ERXStatus.READY && interactionsCheckState.medicationId !== localValues.medicationId)\n    ) {\n      return undefined;\n    }\n    if (\n      (erxEnabled && erxStatus === ERXStatus.LOADING && (!medication || medication.id !== localValues.medicationId)) ||\n      interactionsCheckState.status === 'in-progress' ||\n      isMedicationHistoryLoading\n    ) {\n      return {\n        style: 'loading',\n        message: 'checking...',\n      };\n    } else if (erxStatus === ERXStatus.ERROR || interactionsCheckState.status === 'error') {\n      return {\n        style: 'warning',\n        message: 'Drug-to-Drug and Drug-Allergy interaction check failed. Please review manually.',\n      };\n    } else if (interactionsCheckState.status === 'done') {\n      if (\n        interactionsCheckState.interactions &&\n        (interactionsCheckState.interactions.drugInteractions.length > 0 ||\n          interactionsCheckState.interactions.allergyInteractions.length > 0)\n      ) {\n        return {\n          style: 'warning',\n          message: interactionsSummary(interactionsCheckState.interactions),\n        };\n      }\n      return {\n        style: 'success',\n        message: 'not found',\n      };\n    }\n    return undefined;\n  }, [erxEnabled, erxStatus, interactionsCheckState, localValues.medicationId, medication, isMedicationHistoryLoading]);\n\n  return (\n    <>\n      <MedicationCardView\n        isEditable={getIsMedicationEditable(typeRef.current, medication)}\n        type={typeRef.current}\n        onSave={updateOrCreateOrder}\n        medication={medication}\n        fieldsConfig={fieldsConfig[typeRef.current]}\n        localValues={localValues}\n        selectedStatus={currentStatus}\n        isUpdating={isOrderUpdating}\n        onFieldValueChange={handleFieldValueChange}\n        onStatusSelect={handleStatusChange}\n        getFieldValue={getFieldValue}\n        showErrors={showErrors}\n        fieldErrors={fieldErrors}\n        getFieldType={getFieldType}\n        saveButtonText={saveButtonText}\n        isSaveButtonDisabled={isCardSaveButtonDisabled}\n        selectsOptions={selectsOptions}\n        interactionsMessage={interactionsMessage}\n        onInteractionsMessageClick={() => {\n          if (\n            interactionsCheckState.status === 'done' &&\n            interactionsCheckState.interactions &&\n            (interactionsCheckState.interactions.drugInteractions.length > 0 ||\n              interactionsCheckState.interactions.allergyInteractions.length > 0)\n          ) {\n            setShowInteractionAlerts(true);\n          }\n        }}\n      />\n      <CSSModal\n        icon={null}\n        color=\"error.main\"\n        open={isModalOpen}\n        handleClose={() => setIsModalOpen(false)}\n        title=\"Missing Required Fields\"\n        description={`Please fill in the following required fields: ${missingFields.join(', ')}`}\n        handleConfirm={() => setIsModalOpen(false)}\n        confirmText=\"OK\"\n        closeButtonText=\"Close\"\n      />\n      {confirmationModalConfig ? (\n        <CSSModal\n          entity={confirmedMedicationUpdateRequestRef}\n          showEntityPreview={false}\n          disabled={isModalSaveButtonDisabled}\n          open={isConfirmSaveModalOpen}\n          handleClose={() => {\n            setIsConfirmSaveModalOpen(false);\n            confirmedMedicationUpdateRequestRef.current = {};\n          }}\n          handleConfirm={handleConfirmSave}\n          description={''}\n          {...confirmationModalConfig}\n        />\n      ) : null}\n      <ConfirmationModalForLeavePage />\n      {showInteractionAlerts && interactionsCheckState.interactions ? (\n        <InteractionAlertsDialog\n          medicationName={interactionsCheckState.medicationName ?? medication?.medicationName ?? ''}\n          interactions={interactionsCheckState.interactions}\n          onCancel={() => setShowInteractionAlerts(false)}\n          onContinue={(interactions: MedicationInteractions) => {\n            setShowInteractionAlerts(false);\n            setInteractionsCheckState({\n              status: 'done',\n              medicationId: localValues.medicationId,\n              interactions,\n            });\n          }}\n          readonly={typeFromProps !== 'order-new' && typeFromProps !== 'order-edit'}\n        />\n      ) : null}\n      {(typeFromProps === 'order-new' || typeFromProps === 'order-edit') && erxEnabled ? (\n        <ERX onStatusChanged={setERXStatus} showDefaultAlert={false} />\n      ) : null}\n    </>\n  );\n};\n"]}