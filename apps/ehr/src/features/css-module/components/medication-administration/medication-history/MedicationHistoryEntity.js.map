{"version":3,"file":"MedicationHistoryEntity.js","sourceRoot":"","sources":["MedicationHistoryEntity.tsx"],"names":[],"mappings":";;;AAAA,0CAAgE;AAEhE,+BAAiC;AAEjC,+BAAqE;AAM9D,IAAM,uBAAuB,GAA2C,UAAC,EAAQ;QAAN,IAAI,UAAA;IACpF,IAAM,YAAY,GAAG,cAAc,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,YAA6B,CAAC,CAAC,CAAC,SAAS,CAAC;IACnH,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAEtH,IAAM,oBAAoB,GAAG,gBAAgB,IAAI,IAAI,CAAC;IAEtD,IAAM,YAAY,GAAG;QACnB,IAAI,oBAAoB,EAAE,CAAC;YACzB,IAAI,IAAI,CAAC,cAAc,KAAK,oBAAoB,EAAE,CAAC;gBACjD,OAAO,qBAAqB,CAAC;YAC/B,CAAC;iBAAM,IAAI,IAAI,CAAC,cAAc,KAAK,aAAa,EAAE,CAAC;gBACjD,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;oBAC9B,OAAO,sBAAsB,CAAC;gBAChC,CAAC;gBACD,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;oBAC9B,OAAO,sBAAsB,CAAC;gBAChC,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,mBAAQ,CACP;MAAA,CAAC,oBAAS,CACR;QAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAClD;UAAA,CAAC,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;QACrC,EAAE,qBAAU,CACd;MAAA,EAAE,oBAAS,CACX;MAAA,CAAC,oBAAS,CACR;QAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,CAAC,EAAE,qBAAU,CAC1D;MAAA,EAAE,oBAAS,CACX;MAAA,CAAC,oBAAS,CACR;QAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC,CAC1D;UAAA,CAAC,YAAY,CAAC,CAAC,CAAC,IAAA,qCAA6B,EAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAClE;QAAA,EAAE,qBAAU,CACd;MAAA,EAAE,oBAAS,CACX;MAAA,CAAC,oBAAS,CACR;QAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC,CAC1D;UAAA,CAAC,IAAI,IAAI,mBAAmB,CAC9B;QAAA,EAAE,qBAAU,CACd;MAAA,EAAE,oBAAS,CACb;IAAA,EAAE,mBAAQ,CAAC,CACZ,CAAC;AACJ,CAAC,CAAC;AA5CW,QAAA,uBAAuB,2BA4ClC","sourcesContent":["import { TableCell, TableRow, Typography } from '@mui/material';\nimport { Practitioner } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { MedicationWithTypeDTO } from 'src/features/css-module/hooks/useMedicationHistory';\nimport { getProviderNameWithProfession, MedicationDTO } from 'utils';\n\ninterface MedicationHistoryEntityProps {\n  item: MedicationDTO | MedicationWithTypeDTO;\n}\n\nexport const MedicationHistoryEntity: React.FC<MedicationHistoryEntityProps> = ({ item }) => {\n  const practitioner = 'resourceType' in (item.practitioner || {}) ? (item.practitioner as Practitioner) : undefined;\n  const date = item.intakeInfo.date ? DateTime.fromISO(item.intakeInfo.date).toFormat('MM/dd/yyyy hh:mm a') : undefined;\n\n  const isMedicationWithType = 'chartDataField' in item;\n\n  const getTypeLabel = (): 'Scheduled medication' | 'As-needed medication' | 'In-house medication' | '' => {\n    if (isMedicationWithType) {\n      if (item.chartDataField === 'inhouseMedications') {\n        return 'In-house medication';\n      } else if (item.chartDataField === 'medications') {\n        if (item.type === 'scheduled') {\n          return 'Scheduled medication';\n        }\n        if (item.type === 'as-needed') {\n          return 'As-needed medication';\n        }\n      }\n    }\n    return '';\n  };\n\n  return (\n    <TableRow>\n      <TableCell>\n        <Typography variant=\"body2\" sx={{ fontWeight: 500 }}>\n          {item.name} ({item.intakeInfo.dose})\n        </Typography>\n      </TableCell>\n      <TableCell>\n        <Typography variant=\"body2\">{getTypeLabel()}</Typography>\n      </TableCell>\n      <TableCell>\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          {practitioner ? getProviderNameWithProfession(practitioner) : ''}\n        </Typography>\n      </TableCell>\n      <TableCell>\n        <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n          {date || 'No date available'}\n        </Typography>\n      </TableCell>\n    </TableRow>\n  );\n};\n"]}