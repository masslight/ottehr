{"version":3,"file":"GeneralInfoCard.js","sourceRoot":"","sources":["GeneralInfoCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import { alpha, Box, Checkbox, FormControlLabel, Grid, lighten, Paper, Typography, useTheme } from '@mui/material';\nimport { Patient } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ChartDataRequestedFields } from 'utils';\nimport { dataTestIds } from '../../../../constants/data-test-ids';\nimport { useSaveChartData } from '../../../../telemed';\nimport { useAppointment } from '../../hooks/useAppointment';\nimport { useChartData } from '../../hooks/useChartData';\nimport { ProfileAvatar } from '../ProfileAvatar';\n\nconst getPatientDisplayedName = (patient: Patient | undefined): string => {\n  if (!patient) {\n    return '';\n  }\n  const emptyIfUndefined = (value: string | undefined): string => value ?? '';\n\n  const nameEntryOfficial = patient?.name?.find((nameEntry) => nameEntry.use === 'official');\n  const nameEntryNickname = patient?.name?.find((nameEntry) => nameEntry.use === 'nickname');\n\n  const firstName = nameEntryOfficial?.given?.[0];\n  const middleName = nameEntryOfficial?.given?.[1];\n  const lastName = nameEntryOfficial?.family;\n  const preferredName = nameEntryNickname?.given?.[0];\n\n  const startingPart = lastName ? `${lastName},` : '';\n  const middlePart = `${emptyIfUndefined(firstName)} ${emptyIfUndefined(middleName)}`.trim();\n  const endingPart = preferredName ? `(${preferredName})` : '';\n\n  return `${startingPart} ${middlePart} ${endingPart}`;\n};\n\nconst GeneralInfoCard: React.FC = (): JSX.Element => {\n  const theme = useTheme();\n\n  const { visitState: telemedData, resources, mappedData } = useAppointment();\n  const { patient: patientData } = telemedData;\n\n  const encounterId = resources.encounter!.id!;\n\n  const fieldName = 'patientInfoConfirmed';\n  const requestedFields: ChartDataRequestedFields = { [fieldName]: {} };\n  const { chartData, isLoading: isLoadingChartData } = useChartData({ encounterId, requestedFields });\n\n  useEffect(() => {\n    if (!chartData) {\n      return;\n    }\n    const isPatientInfoConfirmed = chartData?.patientInfoConfirmed?.value ?? false;\n    setVerifiedNameAndDob(isPatientInfoConfirmed);\n  }, [chartData]);\n\n  const [isVerifiedNameAndDob, setVerifiedNameAndDob] = useState<boolean>(false);\n\n  const { mutateAsync: updateVerificationStatusAsync, isLoading: isUpdatingVerificationStatus } = useSaveChartData();\n\n  const isCheckboxDisabled = isLoadingChartData || chartData === undefined || isUpdatingVerificationStatus;\n\n  const handlePatientInfoVerified = useCallback(\n    async (isChecked: boolean): Promise<void> => {\n      setVerifiedNameAndDob(isChecked);\n      try {\n        const data = await updateVerificationStatusAsync({ patientInfoConfirmed: { value: isChecked } });\n        const patientInfoConfirmedUpdated = data.chartData.patientInfoConfirmed;\n        if (patientInfoConfirmedUpdated) {\n          setVerifiedNameAndDob(patientInfoConfirmedUpdated.value ?? false);\n        }\n      } catch {\n        enqueueSnackbar('An error has occurred while saving patient info verification status. Please try again.', {\n          variant: 'error',\n        });\n      }\n    },\n    [updateVerificationStatusAsync]\n  );\n\n  const dateOfBirth = patientData?.birthDate ? DateTime.fromISO(patientData?.birthDate)?.toFormat('MM/dd/yyyy') : '';\n\n  return (\n    <Paper elevation={3} sx={{ p: 3, mt: 3, boxShadow: '0px 2px 4px -1px rgba(0,0,0,0.1)' }}>\n      <Grid container>\n        <Grid item xs={6} container>\n          <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n            <Box sx={{ display: 'flex' }}>\n              <ProfileAvatar embracingSquareSize={100} hasEditableInfo />\n\n              <Box sx={{ display: 'flex', flexDirection: 'column', ml: 3 }}>\n                <Typography\n                  variant=\"body1\"\n                  sx={{\n                    color: theme.palette.primary.dark,\n                    fontSize: '18px',\n                    fontWeight: 500,\n                  }}\n                >\n                  {getPatientDisplayedName(patientData)}\n                </Typography>\n                <Typography variant=\"body1\" color={theme.palette.primary.dark} sx={{ mt: 1 }}>\n                  {mappedData.pronouns ?? ''}\n                </Typography>\n                <Typography variant=\"body1\" color={theme.palette.primary.dark} sx={{ mt: 1 }}>\n                  DOB: {dateOfBirth}\n                </Typography>\n              </Box>\n            </Box>\n\n            <Box>\n              <FormControlLabel\n                sx={{\n                  mr: 0,\n                  backgroundColor: alpha(theme.palette.primary.main, 0.08),\n                  borderRadius: 2,\n                  mt: 2,\n                  pr: 2,\n                }}\n                control={\n                  <Checkbox\n                    data-testid={dataTestIds.patientInfoPage.patientInfoVerifiedCheckbox}\n                    sx={{\n                      color: theme.palette.primary.main,\n                      '&.Mui-checked': {\n                        color: theme.palette.primary.main,\n                      },\n                      '&.Mui-disabled': {\n                        color: lighten(theme.palette.primary.main, 0.4),\n                      },\n                    }}\n                    disabled={isCheckboxDisabled}\n                    checked={isVerifiedNameAndDob}\n                    onChange={(e) => handlePatientInfoVerified(e.target.checked)}\n                  />\n                }\n                label={\n                  <Typography\n                    sx={{\n                      fontSize: '16px',\n                      fontWeight: 600,\n                      color: isCheckboxDisabled ? lighten(theme.palette.text.primary, 0.4) : theme.palette.text.primary,\n                    }}\n                  >\n                    I verified patient's name and date of birth\n                  </Typography>\n                }\n              />\n            </Box>\n          </Box>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default GeneralInfoCard;\n"]}