{"version":3,"file":"VisitDetailsContainer.js","sourceRoot":"","sources":["VisitDetailsContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Stack, Typography } from '@mui/material';\nimport { FC } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  getAdmitterPractitionerId,\n  getAttendingPractitionerId,\n  getProviderNameWithProfession,\n  getQuestionnaireResponseByLinkId,\n  getSelectors,\n} from 'utils';\nimport { formatDateUsingSlashes } from '../../../../helpers/formatDateTime';\nimport { ActionsList, useAppointmentStore } from '../../../../telemed';\nimport { VisitNoteItem } from '../../../../telemed/features/appointment/ReviewTab';\nimport { useChartData } from '../../hooks/useChartData';\nimport { ButtonRounded } from '../RoundedButton';\n\nexport const VisitDetailsContainer: FC = () => {\n  const navigate = useNavigate();\n\n  const { appointment, location, questionnaireResponse, encounter, chartData, setPartialChartData } = getSelectors(\n    useAppointmentStore,\n    ['appointment', 'location', 'questionnaireResponse', 'encounter', 'chartData', 'setPartialChartData']\n  );\n\n  useChartData({\n    encounterId: encounter.id || '',\n    requestedFields: {\n      practitioners: {},\n    },\n    onSuccess: (data) => {\n      setPartialChartData({\n        practitioners: data.practitioners,\n      });\n    },\n  });\n\n  const insuranceCompanyID = getQuestionnaireResponseByLinkId('insurance-carrier', questionnaireResponse)?.answer?.[0]\n    .valueString;\n  const subscriberID = getQuestionnaireResponseByLinkId('insurance-member-id', questionnaireResponse)?.answer?.[0]\n    .valueString;\n  const date = formatDateUsingSlashes(appointment?.start);\n\n  const facility = location?.name;\n  const admitterId = getAdmitterPractitionerId(encounter);\n  const admitterPractitioner = chartData?.practitioners?.find((practitioner) => practitioner.id === admitterId);\n  const admitterPractitionerName = admitterPractitioner && getProviderNameWithProfession(admitterPractitioner);\n\n  const attenderId = encounter ? getAttendingPractitionerId(encounter) : undefined;\n  const attenderPractitioner = chartData?.practitioners?.find((practitioner) => practitioner.id === attenderId);\n  const attenderPractitionerName = attenderPractitioner && getProviderNameWithProfession(attenderPractitioner);\n\n  return (\n    <Stack spacing={2}>\n      <Box\n        sx={{\n          mb: 2,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          flexWrap: 'wrap',\n          gap: 1,\n          '@media (max-width: 600px)': {\n            flexDirection: 'column',\n            alignItems: 'flex-start',\n            justifyContent: 'flex-start',\n          },\n        }}\n      >\n        <Typography fontSize={18} color=\"primary.dark\" fontWeight={600}>\n          Visit information\n        </Typography>\n        <ButtonRounded\n          onClick={() => navigate(`/visit/${appointment?.id}`)}\n          variant=\"outlined\"\n          sx={{\n            whiteSpace: 'nowrap',\n            '@media (max-width: 600px)': {\n              alignSelf: 'flex-start',\n            },\n          }}\n        >\n          <span className=\"button-text\">Visit Details</span>\n        </ButtonRounded>\n      </Box>\n\n      <ActionsList\n        data={[\n          { label: 'Primary Insurance', value: insuranceCompanyID },\n          { label: 'Subscriber ID', value: subscriberID },\n          { label: 'Encounter Date', value: date },\n          { label: 'Provider', value: attenderPractitionerName },\n          { label: 'Intake completed by', value: admitterPractitionerName },\n          { label: 'Appointment Facility', value: facility },\n        ]}\n        getKey={(item) => item.label}\n        renderItem={(item) => (\n          <Stack width=\"100%\">\n            <VisitNoteItem label={item.label} value={item.value} noMaxWidth />\n          </Stack>\n        )}\n        gap={0.75}\n        divider\n      />\n    </Stack>\n  );\n};\n"]}