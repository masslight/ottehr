{"version":3,"file":"ASQ.js","sourceRoot":"","sources":["ASQ.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Alert, FormControl, Grid, MenuItem, Paper, Select, Typography, useTheme } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { ASQ_FIELD, ASQKeys, asqLabels, ASQObservationDTO, ObservationDTO } from 'utils';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../../telemed';\nimport { useOystehrAPIClient } from '../../../../telemed/hooks/useOystehrAPIClient';\nimport { CSSModal } from '../CSSModal';\n\nconst isASQObservationDTO = (obs: ObservationDTO): obs is ASQObservationDTO => {\n  return obs.field === ASQ_FIELD;\n};\n\nexport const ASQ: React.FC = () => {\n  const theme = useTheme();\n  const apiClient = useOystehrAPIClient();\n  const { chartData, updateObservation, encounter, isChartDataLoading } = getSelectors(useAppointmentStore, [\n    'chartData',\n    'updateObservation',\n    'encounter',\n    'isChartDataLoading',\n  ]);\n\n  const [asqValue, setAsqValue] = useState<ASQKeys | ''>('');\n  const [isUpdating, setIsUpdating] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [tempAsqValue, setTempAsqValue] = useState<ASQKeys | ''>('');\n\n  // used for highlight select in the UI\n  const [asqError, setAsqError] = useState<string>('');\n\n  // used for scroll on error\n  const asqRef = useRef<HTMLDivElement>(null);\n\n  const currentASQObs = useMemo(() => chartData?.observations?.find((obs) => isASQObservationDTO(obs)), [chartData]);\n\n  useEffect(() => {\n    if (currentASQObs?.value) {\n      setAsqValue(currentASQObs.value as ASQKeys);\n    }\n  }, [currentASQObs]);\n\n  const handleSaveObservation = async (observation: ASQObservationDTO): Promise<void> => {\n    setIsUpdating(true);\n\n    try {\n      const result = await apiClient?.saveChartData?.({\n        encounterId: encounter?.id || '',\n        observations: [observation],\n      });\n\n      if (result?.chartData?.observations?.[0]) {\n        updateObservation(result.chartData.observations[0]);\n      }\n    } catch {\n      enqueueSnackbar('An error occurred while saving the information. Please try again.', {\n        variant: 'error',\n      });\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  const handleASQChange = (value: ASQKeys): void => {\n    if (value === ASQKeys.Positive) {\n      setTempAsqValue(value);\n      setIsModalOpen(true);\n    } else {\n      setAsqValue(value);\n      void handleSaveObservation(\n        (currentASQObs\n          ? { ...currentASQObs, value: value as ASQKeys }\n          : {\n              field: ASQ_FIELD,\n              value,\n            }) as ASQObservationDTO\n      );\n    }\n  };\n\n  const handleModalClose = (): void => {\n    setIsModalOpen(false);\n    setTempAsqValue('');\n  };\n\n  const handleModalConfirm = (): void => {\n    setAsqValue(tempAsqValue);\n    void handleSaveObservation(\n      currentASQObs\n        ? ({ ...currentASQObs, value: tempAsqValue } as ASQObservationDTO)\n        : ({ field: ASQ_FIELD, value: tempAsqValue } as ASQObservationDTO)\n    );\n    setIsModalOpen(false);\n  };\n\n  return (\n    <Paper elevation={3} sx={{ p: 3, mt: 3, boxShadow: '0px 2px 4px -1px rgba(0,0,0,0.1)' }}>\n      <Grid container>\n        <Grid item xs={6}>\n          <FormControl fullWidth sx={{ mb: 2 }} ref={asqRef}>\n            <Typography\n              sx={{\n                color: theme.palette.primary.dark,\n                mb: 1,\n                fontWeight: 'bold',\n              }}\n            >\n              ASQ\n            </Typography>\n            <Select\n              value={asqValue}\n              onChange={(e) => {\n                handleASQChange(e.target.value as ASQKeys);\n                setAsqError('');\n              }}\n              displayEmpty\n              disabled={isUpdating || isChartDataLoading}\n              renderValue={(selected) => (selected ? asqLabels[selected] : 'Select an option')}\n              error={!!asqError}\n            >\n              <MenuItem value=\"\">\n                <em>Select an option</em>\n              </MenuItem>\n              {Object.values(ASQKeys).map((key) => (\n                <MenuItem key={key} value={key}>\n                  {asqLabels[key]}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n\n          {asqValue === ASQKeys.Positive && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              Critical alert note about positive ASQ. Please verify and notify provider.\n            </Alert>\n          )}\n        </Grid>\n      </Grid>\n\n      <CSSModal\n        open={isModalOpen}\n        handleClose={handleModalClose}\n        handleConfirm={handleModalConfirm}\n        title=\"Confirm ASQ Positive\"\n        description=\"Are you sure you want to set ASQ as Positive?\"\n        closeButtonText=\"Cancel\"\n        confirmText=\"Confirm\"\n        errorMessage=\"An error occurred\"\n      />\n    </Paper>\n  );\n};\n"]}