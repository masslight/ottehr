{"version":3,"file":"AskThePatient.js","sourceRoot":"","sources":["AskThePatient.tsx"],"names":[],"mappings":"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","sourcesContent":["import { otherColors } from '@ehrTheme/colors';\nimport {\n  FormControl,\n  FormControlLabel,\n  Grid,\n  MenuItem,\n  Paper,\n  Radio,\n  RadioGroup,\n  Select,\n  TextField,\n  Typography,\n  useTheme,\n} from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { useEffect, useState } from 'react';\nimport {\n  ADDITIONAL_QUESTIONS_META_SYSTEM,\n  HISTORY_OBTAINED_FROM_FIELD,\n  HistorySourceKeys,\n  historySourceLabels,\n  ObservationHistoryObtainedFromDTO,\n  ObservationSeenInLastThreeYearsDTO,\n  ObservationTextFieldDTO,\n  PATIENT_VACCINATION_STATUS,\n  PatientVaccinationDTO,\n  PatientVaccinationKeys,\n  patientVaccinationLabels,\n  RecentVisitKeys,\n  recentVisitLabels,\n  SEEN_IN_LAST_THREE_YEARS_FIELD,\n} from 'utils';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { useAppointmentStore, useDebounce, useDeleteChartData } from '../../../../telemed';\nimport { useOystehrAPIClient } from '../../../../telemed/hooks/useOystehrAPIClient';\nimport { useNavigationContext } from '../../context/NavigationContext';\nimport { useChartData } from '../../hooks/useChartData';\n\nconst AskThePatientComponent = (): React.ReactElement => {\n  const apiClient = useOystehrAPIClient();\n  const theme = useTheme();\n  const { chartData, updateObservation, encounter } = getSelectors(useAppointmentStore, [\n    'chartData',\n    'updateObservation',\n    'encounter',\n  ]);\n  const { refetch: refetchChartData, isLoading: isChartDataLoading } = useChartData({\n    encounterId: encounter?.id || '',\n    requestedFields: {\n      observations: {\n        _tag: ADDITIONAL_QUESTIONS_META_SYSTEM,\n        _search_by: 'encounter',\n      },\n    },\n    enabled: false,\n  });\n  const { mutate: deleteChartData } = useDeleteChartData();\n  const { debounce } = useDebounce(1000);\n\n  const [recentVisitKey, setRecentVisitKey] = useState<RecentVisitKeys | ''>('');\n  const [patientVaccinationKey, setPatientVaccinationKey] = useState<PatientVaccinationKeys | null>(null);\n  const [vaccinationNotes, setVaccinationNotes] = useState<string>('');\n  const [historySourceKey, setHistorySourceKey] = useState<HistorySourceKeys | ''>('');\n  const [otherReason, setOtherReason] = useState<string>('');\n\n  const [historySourceUpdating, setHistorySourceUpdating] = useState(false);\n  const [patientVaccinationUpdating, setPatientVaccinationUpdating] = useState(false);\n  const [vaccinationNotesUpdating, setVaccinationNotesUpdating] = useState(false);\n  const [recentVisitUpdating, setRecentVisitUpdating] = useState(false);\n\n  const { setNavigationDisable } = useNavigationContext();\n\n  setNavigationDisable({ isAskPatientFieldsUpdating: recentVisitUpdating || historySourceUpdating });\n\n  const currentSeenInLastThreeYearsObs = chartData?.observations?.find(\n    (obs) => obs.field === SEEN_IN_LAST_THREE_YEARS_FIELD\n  ) as ObservationSeenInLastThreeYearsDTO | undefined;\n\n  const currentHistoryObtainedFromObs = chartData?.observations?.find(\n    (obs) => obs.field === HISTORY_OBTAINED_FROM_FIELD\n  ) as ObservationHistoryObtainedFromDTO | undefined;\n\n  const currentPatientVaccinationFromObs = chartData?.observations?.find(\n    (obs) => obs.field === PATIENT_VACCINATION_STATUS\n  ) as PatientVaccinationDTO | undefined;\n\n  useEffect(() => {\n    const seenInLastThreeYearsObs = chartData?.observations?.find(\n      (obs) => obs.field === SEEN_IN_LAST_THREE_YEARS_FIELD\n    ) as ObservationSeenInLastThreeYearsDTO | undefined;\n\n    const historyObtainedFromObs = chartData?.observations?.find((obs) => obs.field === HISTORY_OBTAINED_FROM_FIELD) as\n      | ObservationHistoryObtainedFromDTO\n      | undefined;\n\n    const patientVaccinationFromObs = chartData?.observations?.find(\n      (obs) => obs.field === PATIENT_VACCINATION_STATUS\n    ) as PatientVaccinationDTO | undefined;\n\n    if (seenInLastThreeYearsObs?.value) {\n      setRecentVisitKey(seenInLastThreeYearsObs.value);\n    }\n\n    if (historyObtainedFromObs?.value) {\n      setHistorySourceKey(historyObtainedFromObs.value);\n      if (historyObtainedFromObs.value === HistorySourceKeys.NotObtainedOther) {\n        setOtherReason(historyObtainedFromObs.note);\n      }\n    }\n\n    if (patientVaccinationFromObs?.value) {\n      setPatientVaccinationKey(patientVaccinationFromObs.value);\n    }\n    if (patientVaccinationFromObs?.note) {\n      setVaccinationNotes(patientVaccinationFromObs?.note);\n    }\n  }, [chartData]);\n\n  const handleSaveObservation = async (\n    observation: ObservationTextFieldDTO,\n    setIsLoading: React.Dispatch<React.SetStateAction<boolean>>\n  ): Promise<void> => {\n    setIsLoading(true);\n\n    try {\n      const result = await apiClient?.saveChartData?.({\n        encounterId: encounter?.id || '',\n        observations: [observation],\n      });\n\n      if (result?.chartData?.observations?.[0]) {\n        updateObservation(result.chartData.observations[0]);\n      }\n    } catch {\n      enqueueSnackbar('An error occurred while saving the information. Please try again.', {\n        variant: 'error',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRecentVisitChange = (value: RecentVisitKeys): void => {\n    setRecentVisitKey(value);\n    void handleSaveObservation(\n      currentSeenInLastThreeYearsObs\n        ? { ...currentSeenInLastThreeYearsObs, value }\n        : {\n            field: SEEN_IN_LAST_THREE_YEARS_FIELD,\n            value,\n          },\n      setRecentVisitUpdating\n    );\n  };\n\n  const handleHistorySourceChange = (value: HistorySourceKeys): void => {\n    if (value === HistorySourceKeys.NotObtainedOther) {\n      setHistorySourceKey(HistorySourceKeys.NotObtainedOther);\n    } else {\n      void handleSaveObservation(\n        currentHistoryObtainedFromObs\n          ? { ...currentHistoryObtainedFromObs, value }\n          : {\n              field: HISTORY_OBTAINED_FROM_FIELD,\n              value,\n            },\n        setHistorySourceUpdating\n      );\n    }\n  };\n\n  const handlePatientVaccinationStatusChange = (value: PatientVaccinationKeys): void => {\n    setPatientVaccinationKey(value);\n    const curValues: PatientVaccinationDTO = {\n      field: PATIENT_VACCINATION_STATUS,\n      value,\n    };\n    if (vaccinationNotes) {\n      curValues['note'] = vaccinationNotes;\n    }\n    void handleSaveObservation(\n      currentPatientVaccinationFromObs\n        ? { ...currentPatientVaccinationFromObs, value }\n        : {\n            ...curValues,\n          },\n      setPatientVaccinationUpdating\n    );\n  };\n\n  const handleVaccinationNotesChange = (vaccinationNoteInput: string): void => {\n    debounce(() => {\n      if (!patientVaccinationKey) {\n        enqueueSnackbar('Please select a vaccination status above', { variant: 'error' });\n        return;\n      }\n      const curValues: PatientVaccinationDTO = {\n        field: PATIENT_VACCINATION_STATUS,\n        value: patientVaccinationKey,\n      };\n      if (vaccinationNoteInput) {\n        void handleSaveObservation(\n          {\n            ...currentPatientVaccinationFromObs,\n            ...curValues,\n            note: vaccinationNoteInput,\n          },\n          setVaccinationNotesUpdating\n        );\n      } else if (currentPatientVaccinationFromObs) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { note, ...patientVaccinationFromObsNoNote } = currentPatientVaccinationFromObs; // remove the note\n        void handleSaveObservation(\n          {\n            ...patientVaccinationFromObsNoNote,\n            ...curValues,\n          },\n          setVaccinationNotesUpdating\n        );\n      } else {\n        void handleSaveObservation(\n          {\n            ...curValues,\n          },\n          setVaccinationNotesUpdating\n        );\n      }\n    });\n  };\n\n  const handleOtherReasonChange = (value: string): void => {\n    debounce(() => {\n      if (value) {\n        void handleSaveObservation(\n          {\n            ...currentHistoryObtainedFromObs,\n            field: HISTORY_OBTAINED_FROM_FIELD,\n            value: HistorySourceKeys.NotObtainedOther,\n            note: value,\n          },\n          setHistorySourceUpdating\n        );\n      } else if (currentHistoryObtainedFromObs) {\n        setHistorySourceUpdating(true);\n\n        // TODO check if onError cb works correctly\n        deleteChartData(\n          { observations: [currentHistoryObtainedFromObs] },\n          {\n            onSuccess: async () => {\n              await refetchChartData();\n              setHistorySourceUpdating(false);\n            },\n            onError: () => {\n              setHistorySourceUpdating(false);\n            },\n          }\n        );\n      }\n    });\n  };\n\n  return (\n    <Paper elevation={3} sx={{ p: 3, mt: 3, boxShadow: '0px 2px 4px -1px rgba(0,0,0,0.1)' }}>\n      <Grid container>\n        <Grid item xs={12}>\n          <Typography variant=\"subtitle2\" sx={{ color: otherColors.orange700, mb: 2 }}>\n            ASK THE PATIENT\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Grid item xs={6}>\n            <Typography\n              sx={{\n                color: theme.palette.primary.dark,\n                mb: 1,\n                fontWeight: 'bold',\n              }}\n            >\n              Has the patient been seen in one of our offices / telemed in last 3 years?\n            </Typography>\n\n            <FormControl component=\"fieldset\" disabled={recentVisitUpdating || isChartDataLoading}>\n              <RadioGroup\n                row\n                value={recentVisitKey}\n                onChange={(e) => handleRecentVisitChange(e.target.value as RecentVisitKeys)}\n              >\n                {Object.values(RecentVisitKeys).map((key) => (\n                  <FormControlLabel key={key} value={key} control={<Radio />} label={recentVisitLabels[key]} />\n                ))}\n              </RadioGroup>\n            </FormControl>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography\n              sx={{\n                color: theme.palette.primary.dark,\n                mt: 2,\n                mb: 1,\n                fontWeight: 'bold',\n              }}\n            >\n              Has the patient received vaccinations?\n            </Typography>\n\n            <FormControl component=\"fieldset\" disabled={patientVaccinationUpdating || isChartDataLoading}>\n              <RadioGroup\n                row\n                value={patientVaccinationKey}\n                onChange={(e) => handlePatientVaccinationStatusChange(e.target.value as PatientVaccinationKeys)}\n              >\n                {Object.values(PatientVaccinationKeys).map((key) => (\n                  <FormControlLabel key={key} value={key} control={<Radio />} label={patientVaccinationLabels[key]} />\n                ))}\n              </RadioGroup>\n            </FormControl>\n\n            <TextField\n              fullWidth\n              label=\"Vaccination notes\"\n              variant=\"outlined\"\n              sx={{ mt: 2 }}\n              value={vaccinationNotes}\n              onChange={(e) => {\n                setVaccinationNotes(e.target.value);\n                handleVaccinationNotesChange(e.target.value);\n              }}\n              disabled={vaccinationNotesUpdating || isChartDataLoading}\n            />\n          </Grid>\n          <Grid item xs={6}>\n            <Typography\n              sx={{\n                color: theme.palette.primary.dark,\n                mt: 2,\n                mb: 1,\n                fontWeight: 'bold',\n              }}\n            >\n              History obtained from\n            </Typography>\n\n            <FormControl fullWidth>\n              <Select\n                value={historySourceKey}\n                onChange={(e) => handleHistorySourceChange(e.target.value as HistorySourceKeys)}\n                displayEmpty\n                disabled={historySourceUpdating || isChartDataLoading}\n                renderValue={(selected) =>\n                  selected ? historySourceLabels[selected as HistorySourceKeys] : 'Select an option'\n                }\n              >\n                <MenuItem value=\"\">\n                  <em>Select an option</em>\n                </MenuItem>\n                {Object.values(HistorySourceKeys).map((key) => (\n                  <MenuItem key={key} value={key}>\n                    {historySourceLabels[key]}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n\n            {historySourceKey === HistorySourceKeys.NotObtainedOther && (\n              <TextField\n                fullWidth\n                placeholder=\"Please specify*\"\n                variant=\"outlined\"\n                sx={{ mt: 2 }}\n                value={otherReason}\n                onChange={(e) => {\n                  setOtherReason(e.target.value);\n                  handleOtherReasonChange(e.target.value);\n                }}\n                disabled={historySourceUpdating || isChartDataLoading}\n              />\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default AskThePatientComponent;\n"]}