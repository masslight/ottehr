{"version":3,"file":"VitalsBloodPressureCard.js","sourceRoot":"","sources":["VitalsBloodPressureCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, FormControl, Grid, InputLabel, MenuItem, Select, Typography } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { ChangeEvent, JSX, useCallback, useState } from 'react';\nimport {\n  toVitalBloodPressureObservationMethod,\n  VitalBloodPressureObservationMethod,\n  VitalFieldNames,\n  VitalsBloodPressureObservationDTO,\n} from 'utils';\nimport { RoundedButton } from '../../../../../components/RoundedButton';\nimport { AccordionCard, DoubleColumnContainer } from '../../../../../telemed/components';\nimport VitalsHistoryContainer from '../components/VitalsHistoryContainer';\nimport VitalHistoryElement from '../components/VitalsHistoryEntry';\nimport { VitalsTextInputFiled } from '../components/VitalsTextInputFiled';\nimport { useScreenDimensions } from '../hooks/useScreenDimensions';\nimport { VitalsCardProps } from '../types';\nimport { textToBloodPressureNumber } from './helpers';\n\ntype VitalsBloodPressureCardProps = VitalsCardProps<VitalsBloodPressureObservationDTO>;\nconst VitalsBloodPressureCard: React.FC<VitalsBloodPressureCardProps> = ({\n  handleSaveVital,\n  handleDeleteVital,\n  currentObs,\n  historicalObs,\n}): JSX.Element => {\n  const [systolicValueText, setSystolicValueText] = useState('');\n  const [diastolicValueText, setDiastolicValueText] = useState('');\n\n  // the method how this Blood pressure observation has been acquired\n  const [observationQualifier, setObservationsQualifier] = useState<string>('');\n\n  const [isSystolicValidationError, setSystolicValidationError] = useState<boolean>(false);\n  const [isDiastolicValidationError, setDiastolicValidationError] = useState<boolean>(false);\n\n  const [isSaving, setIsSaving] = useState(false);\n\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);\n  const handleSectionCollapse = useCallback(() => {\n    setIsCollapsed((prevCollapseState) => !prevCollapseState);\n  }, [setIsCollapsed]);\n\n  const { isLargeScreen } = useScreenDimensions();\n\n  const isDisabledAddButton =\n    !systolicValueText || !diastolicValueText || isSystolicValidationError || isDiastolicValidationError;\n\n  const latestPressureValueLabel = (() => {\n    const latestHistoryEntry = currentObs[0];\n    if (!latestHistoryEntry) return;\n    return `${latestHistoryEntry.systolicPressure}/${latestHistoryEntry.diastolicPressure}`;\n  })();\n\n  const handleSavePressureObservation = async (\n    systolicPressureText: string,\n    diastolicValueText: string\n  ): Promise<void> => {\n    const systolicValueNum = textToBloodPressureNumber(systolicPressureText);\n    if (!systolicValueNum) return;\n\n    const diastolicValueNum = textToBloodPressureNumber(diastolicValueText);\n    if (!diastolicValueNum) return;\n\n    const observationMethod = toVitalBloodPressureObservationMethod(observationQualifier);\n    try {\n      setIsSaving(true);\n      const vitalObs: VitalsBloodPressureObservationDTO = {\n        field: VitalFieldNames.VitalBloodPressure,\n        systolicPressure: systolicValueNum,\n        diastolicPressure: diastolicValueNum,\n        observationMethod: observationMethod,\n      };\n      await handleSaveVital(vitalObs);\n      setSystolicValueText('');\n      setDiastolicValueText('');\n      setObservationsQualifier('');\n    } catch {\n      enqueueSnackbar('Error saving Blood Pressure vital data', { variant: 'error' });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleSystolicTextInputChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const systolicAsText = e.target.value;\n      setSystolicValueText(systolicAsText);\n      if (systolicAsText.length === 0) {\n        setSystolicValidationError(false);\n      }\n    },\n    [setSystolicValidationError, setSystolicValueText]\n  );\n\n  const handleDiastolicTextInputChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const diastolicAsText = e.target.value;\n      setDiastolicValueText(diastolicAsText);\n      if (diastolicAsText.length === 0) {\n        setDiastolicValidationError(false);\n      }\n    },\n    [setDiastolicValidationError, setDiastolicValueText]\n  );\n\n  const renderBloodPressureQualifierDropdown = (): JSX.Element => {\n    return (\n      <FormControl size=\"small\" fullWidth sx={{ backgroundColor: 'white' }} disabled={isSaving}>\n        <InputLabel id=\"qualifier-label\">Qualifier</InputLabel>\n        <Select\n          value={observationQualifier}\n          label=\"Qualifier\"\n          labelId=\"qualifier-label\"\n          variant=\"outlined\"\n          error={false}\n          defaultValue=\"\"\n          onChange={(event) => {\n            const eventValue = event.target.value;\n            const selectedQualifier = eventValue && eventValue.length > 0 ? eventValue : '';\n            setObservationsQualifier(selectedQualifier);\n          }}\n        >\n          <MenuItem key=\"default_obs_method\" value={''}>\n            <Typography color=\"textPrimary\" sx={{ fontSize: '16px' }}>\n              &nbsp;\n            </Typography>\n          </MenuItem>\n          {Object.values(VitalBloodPressureObservationMethod).map((obsMethod) => (\n            <MenuItem key={obsMethod} value={obsMethod}>\n              <Typography color=\"textPrimary\" sx={{ fontSize: '16px' }}>\n                {obsMethod}\n              </Typography>\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  return (\n    <Box sx={{ mt: 3 }}>\n      <AccordionCard\n        label={`BP (mm Hg) ${latestPressureValueLabel ?? ''}`}\n        collapsed={isCollapsed}\n        onSwitch={handleSectionCollapse}\n      >\n        <DoubleColumnContainer\n          divider\n          leftColumn={\n            <Grid\n              container\n              sx={{\n                height: 'auto',\n                width: 'auto',\n                backgroundColor: '#F7F8F9',\n                borderRadius: 2,\n                my: 2,\n                mx: 2,\n                py: 2,\n                px: 2,\n              }}\n            >\n              {/* Systolic / Diastolic pressure Input Field column */}\n              <Grid item xs={12} sm={6} md={6} lg={6} order={{ xs: 1, sm: 1, md: 1 }}>\n                <Box\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                  }}\n                >\n                  <VitalsTextInputFiled\n                    label=\"Systolic\"\n                    value={systolicValueText}\n                    disabled={isSaving}\n                    isInputError={isSystolicValidationError}\n                    onChange={handleSystolicTextInputChange}\n                  />\n                  <Typography fontSize={25} sx={{ ml: 1 }}>\n                    /\n                  </Typography>\n                  <VitalsTextInputFiled\n                    label=\"Diastolic\"\n                    value={diastolicValueText}\n                    disabled={isSaving}\n                    isInputError={isDiastolicValidationError}\n                    onChange={handleDiastolicTextInputChange}\n                    sx={{ ml: 1 }}\n                  />\n                </Box>\n              </Grid>\n\n              {/* Qualifier/method dropdown column */}\n              <Grid\n                item\n                xs={12}\n                sm={3}\n                md={3}\n                lg={3}\n                order={{ xs: 2, sm: 2, md: 2, lg: 2 }}\n                sx={{ mt: isLargeScreen ? 0 : 0 }}\n              >\n                <Box\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                    ml: 1,\n                  }}\n                >\n                  {renderBloodPressureQualifierDropdown()}\n                </Box>\n              </Grid>\n\n              {/* Add Button column */}\n              <Grid\n                item\n                xs={12}\n                sm={3}\n                md={3}\n                lg={3}\n                order={{ xs: 3, sm: 3, md: 3, lg: 3 }}\n                sx={{ mt: isLargeScreen ? 0 : 0 }}\n              >\n                <RoundedButton\n                  size=\"small\"\n                  disabled={isDisabledAddButton}\n                  loading={isSaving}\n                  onClick={() => handleSavePressureObservation(systolicValueText, diastolicValueText)}\n                  color=\"primary\"\n                  sx={{\n                    height: '40px',\n                    px: 2,\n                    ml: 1,\n                  }}\n                >\n                  Add\n                </RoundedButton>\n              </Grid>\n            </Grid>\n          }\n          rightColumn={\n            <VitalsHistoryContainer\n              currentEncounterObs={currentObs}\n              historicalObs={historicalObs}\n              isLoading={false}\n              historyElementCreator={(historyEntry) => {\n                const isCurrent = currentObs.some((obs) => obs.resourceId === historyEntry.resourceId);\n                return (\n                  <VitalHistoryElement\n                    historyEntry={historyEntry}\n                    onDelete={isCurrent ? handleDeleteVital : undefined}\n                  />\n                );\n              }}\n            />\n          }\n        />\n      </AccordionCard>\n    </Box>\n  );\n};\n\nexport default VitalsBloodPressureCard;\n"]}