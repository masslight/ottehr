{"version":3,"file":"VitalsHeightCard.js","sourceRoot":"","sources":["VitalsHeightCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Grid, TextField, Typography } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { ChangeEvent, JSX, useCallback, useMemo, useState } from 'react';\nimport { cmToInches, VitalFieldNames, VitalsHeightObservationDTO } from 'utils';\nimport { RoundedButton } from '../../../../../components/RoundedButton';\nimport { AccordionCard, DoubleColumnContainer } from '../../../../../telemed/components';\nimport VitalsHistoryContainer from '../components/VitalsHistoryContainer';\nimport VitalHistoryElement from '../components/VitalsHistoryEntry';\nimport { VitalsTextInputFiled } from '../components/VitalsTextInputFiled';\nimport { useScreenDimensions } from '../hooks/useScreenDimensions';\nimport { VitalsCardProps } from '../types';\nimport { textToHeightNumber } from './helpers';\n\ntype VitalsHeightCardProps = VitalsCardProps<VitalsHeightObservationDTO>;\nconst VitalsHeightCard: React.FC<VitalsHeightCardProps> = ({\n  handleSaveVital,\n  handleDeleteVital,\n  currentObs,\n  historicalObs,\n}): JSX.Element => {\n  const [heightValueText, setHeightValueText] = useState('');\n\n  const [isHeightValidationError, setHeightValidationError] = useState<boolean>(false);\n  const { isLargeScreen } = useScreenDimensions();\n\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);\n  const handleSectionCollapse = useCallback(() => {\n    setIsCollapsed((prevCollapseState) => !prevCollapseState);\n  }, [setIsCollapsed]);\n\n  const [isSaving, setIsSaving] = useState(false);\n\n  const isDisabledAddButton = !heightValueText || isHeightValidationError;\n\n  const latestHeightValue = currentObs[0]?.value;\n\n  const enteredHeightInInch: number | undefined = useMemo(() => {\n    const heightCm = textToHeightNumber(heightValueText);\n    if (!heightCm) return;\n    return cmToInches(heightCm);\n  }, [heightValueText]);\n\n  const handleSaveHeightObservation = async (heightValueText: string): Promise<void> => {\n    const heightValueNumber = textToHeightNumber(heightValueText);\n    if (!heightValueNumber) return;\n\n    try {\n      setIsSaving(true);\n      const vitalObs: VitalsHeightObservationDTO = {\n        field: VitalFieldNames.VitalHeight,\n        value: heightValueNumber,\n      };\n      await handleSaveVital(vitalObs);\n      setHeightValueText('');\n    } catch {\n      enqueueSnackbar('Error saving Height vital record', { variant: 'error' });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleTextInputChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const heightAsText = e.target.value;\n      setHeightValueText(heightAsText);\n      if (heightAsText.length === 0) {\n        setHeightValidationError(false);\n      }\n    },\n    [setHeightValidationError, setHeightValueText]\n  );\n\n  return (\n    <Box sx={{ mt: 3 }}>\n      <AccordionCard\n        label={`Height (cm) ${latestHeightValue ?? ''}`}\n        collapsed={isCollapsed}\n        onSwitch={handleSectionCollapse}\n      >\n        <DoubleColumnContainer\n          divider\n          leftColumn={\n            <Grid\n              container\n              sx={{\n                height: 'auto',\n                width: 'auto',\n                backgroundColor: '#F7F8F9',\n                borderRadius: 2,\n                my: 2,\n                mx: 2,\n                py: 2,\n                px: 2,\n              }}\n            >\n              {/* Height Input Field column */}\n              <Grid item xs={12} sm={6} md={6} lg={6} order={{ xs: 1, sm: 1, md: 1 }}>\n                <Box\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                  }}\n                >\n                  <VitalsTextInputFiled\n                    label=\"Height (cm)\"\n                    value={heightValueText}\n                    disabled={isSaving}\n                    isInputError={isHeightValidationError}\n                    onChange={handleTextInputChange}\n                  />\n                  <Typography fontSize={25} sx={{ ml: 1 }}>\n                    /\n                  </Typography>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Height (inch)\"\n                    sx={{\n                      '& fieldset': { border: 'none' },\n                      maxWidth: '110px',\n                    }}\n                    disabled\n                    InputLabelProps={{ shrink: true }}\n                    value={enteredHeightInInch ?? ''}\n                  />\n                </Box>\n              </Grid>\n\n              {/* Add Button column */}\n              <Grid\n                item\n                xs={12}\n                sm={6}\n                md={6}\n                lg={6}\n                order={{ xs: 2, sm: 2, md: 2, lg: 2 }}\n                sx={{ mt: isLargeScreen ? 0 : 0 }}\n              >\n                <RoundedButton\n                  size=\"small\"\n                  disabled={isDisabledAddButton}\n                  onClick={() => handleSaveHeightObservation(heightValueText)}\n                  loading={isSaving}\n                  color=\"primary\"\n                  sx={{\n                    height: '40px',\n                    px: 2,\n                    ml: 1,\n                  }}\n                >\n                  Add\n                </RoundedButton>\n              </Grid>\n            </Grid>\n          }\n          rightColumn={\n            <VitalsHistoryContainer\n              currentEncounterObs={currentObs}\n              historicalObs={historicalObs}\n              isLoading={false}\n              historyElementCreator={(historyEntry) => {\n                const isCurrent = currentObs.some((obs) => obs.resourceId === historyEntry.resourceId);\n                return (\n                  <VitalHistoryElement\n                    historyEntry={historyEntry}\n                    onDelete={isCurrent ? handleDeleteVital : undefined}\n                  />\n                );\n              }}\n            />\n          }\n        />\n      </AccordionCard>\n    </Box>\n  );\n};\n\nexport default VitalsHeightCard;\n"]}