{"version":3,"file":"useGetVitals.js","sourceRoot":"","sources":["useGetVitals.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAuC;AAEvC,yDAAwD;AAGjD,IAAM,YAAY,GAAG,UAAC,WAA+B;IAClD,IAAA,aAAa,GAAK,IAAA,6BAAa,GAAE,cAApB,CAAqB;IAC1C,IAAM,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,mCAA4B,WAAW,CAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAChF,OAAO,IAAA,sBAAQ,EACb,QAAQ,EACR;;;;;yBACM,CAAA,aAAa,IAAI,WAAW,CAAA,EAA5B,wBAA4B;oBACf,qBAAM,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC;4BAChD,EAAE,EAAE,YAAY;4BAChB,WAAW,aAAA;4BACX,IAAI,EAAE,SAAS;yBAChB,CAAC,EAAA;;oBAJI,MAAM,GAAG,SAIb;oBACF,8FAA8F;oBAC9F,sBAAO,MAAM,CAAC,MAA+B,EAAC;wBAGhD,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;;;SAC3E,EACD;QACE,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,aAAa,CAAC;KACxD,CACF,CAAC;AACJ,CAAC,CAAC;AAtBW,QAAA,YAAY,gBAsBvB;AAEK,IAAM,sBAAsB,GAAG,UACpC,WAA+B;IAEvB,IAAA,aAAa,GAAK,IAAA,6BAAa,GAAE,cAApB,CAAqB;IAC1C,IAAM,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,sCAA+B,WAAW,CAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACnF,OAAO,IAAA,sBAAQ,EACb,QAAQ,EACR;;;;;yBACM,CAAA,aAAa,IAAI,WAAW,CAAA,EAA5B,wBAA4B;oBACf,qBAAM,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC;4BAChD,EAAE,EAAE,YAAY;4BAChB,WAAW,aAAA;4BACX,IAAI,EAAE,YAAY;yBACnB,CAAC,EAAA;;oBAJI,MAAM,GAAG,SAIb;oBACF,8FAA8F;oBAC9F,sBAAO,MAAM,CAAC,MAA+B,EAAC;wBAGhD,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;;;SAC3E,EACD;QACE,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC,aAAa,CAAC;KACxD,CACF,CAAC;AACJ,CAAC,CAAC;AAxBW,QAAA,sBAAsB,0BAwBjC","sourcesContent":["import { useQuery } from 'react-query';\nimport { UseQueryResult } from 'react-query';\nimport { useApiClients } from 'src/hooks/useAppClients';\nimport { GetVitalsResponseData } from 'utils';\n\nexport const useGetVitals = (encounterId: string | undefined): UseQueryResult<GetVitalsResponseData, Error> => {\n  const { oystehrZambda } = useApiClients();\n  const queryKey = encounterId ? [`current-encounter-vitals-${encounterId}`] : [];\n  return useQuery(\n    queryKey,\n    async () => {\n      if (oystehrZambda && encounterId) {\n        const result = await oystehrZambda.zambda.execute({\n          id: 'get-vitals',\n          encounterId,\n          mode: 'current',\n        });\n        // todo: make this strictly typed once there is a common api file defining endpoints available\n        return result.output as GetVitalsResponseData;\n      }\n\n      throw new Error('api client not defined or encounter id is not provided');\n    },\n    {\n      enabled: Boolean(encounterId) && Boolean(oystehrZambda),\n    }\n  );\n};\n\nexport const useGetHistoricalVitals = (\n  encounterId: string | undefined\n): UseQueryResult<GetVitalsResponseData, Error> => {\n  const { oystehrZambda } = useApiClients();\n  const queryKey = encounterId ? [`historical-encounter-vitals-${encounterId}`] : [];\n  return useQuery(\n    queryKey,\n    async () => {\n      if (oystehrZambda && encounterId) {\n        const result = await oystehrZambda.zambda.execute({\n          id: 'get-vitals',\n          encounterId,\n          mode: 'historical',\n        });\n        // todo: make this strictly typed once there is a common api file defining endpoints available\n        return result.output as GetVitalsResponseData;\n      }\n\n      throw new Error('api client not defined or encounter id is not provided');\n    },\n    {\n      enabled: Boolean(encounterId) && Boolean(oystehrZambda),\n    }\n  );\n};\n"]}