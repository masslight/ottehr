{"version":3,"file":"useScreenDimensions.js","sourceRoot":"","sources":["useScreenDimensions.tsx"],"names":[],"mappings":";;;AAAA,0CAAwD;AAUxD;;;;;;;;GAQG;AACI,IAAM,mBAAmB,GAAG;IACjC,IAAM,KAAK,GAAG,IAAA,mBAAQ,GAAE,CAAC;IACzB,wBAAwB;IACxB,QAAQ;IACR,qEAAqE;IAErE,oBAAoB;IACpB,mDAAmD;IACnD,uCAAuC;IACvC,yCAAyC;IACzC,OAAO;IAEP,qDAAqD;IAErD,mDAAmD;IACnD,mBAAmB;IACnB,0DAA0D;IAC1D,OAAO;IACP,UAAU;IAEV,8CAA8C;IAC9C,IAAM,kBAAkB,GAAG,IAAA,wBAAa,EAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAErE,2CAA2C;IAC3C,IAAM,aAAa,GAAG,IAAA,wBAAa,EAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEhE,gDAAgD;IAChD,IAAM,cAAc,GAAG,IAAA,wBAAa,EAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEjE,+CAA+C;IAC/C,IAAM,aAAa,GAAG,IAAA,wBAAa,EAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IAEhE,2CAA2C;IAC3C,IAAM,kBAAkB,GAAG,IAAA,wBAAa,EAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAEvE,oBAAoB;IACpB,iBAAiB;IACjB,iKAAiK;IACjK,OAAO;IACP,yEAAyE;IAEzE,mCAAmC;IACnC,oBAAoB;IACpB,qEAAqE;IACrE,0BAA0B;IAE1B,2BAA2B;IAE3B,OAAO;QACL,kBAAkB,oBAAA;QAClB,aAAa,eAAA;QACb,cAAc,gBAAA;QACd,aAAa,eAAA;QACb,kBAAkB,oBAAA;KACnB,CAAC;AACJ,CAAC,CAAC;AAvDW,QAAA,mBAAmB,uBAuD9B","sourcesContent":["import { useMediaQuery, useTheme } from '@mui/material';\n\nexport type ScreenDimensions = {\n  isExtraSmallScreen: boolean;\n  isSmallScreen: boolean;\n  isMediumScreen: boolean;\n  isLargeScreen: boolean;\n  isExtraLargeScreen: boolean;\n};\n\n/**\n * MUI's screen size default breakpoints:\n *\n * xs (extra-small): 0px and up\n * sm (small): 600px and up\n * md (medium): 900px and up\n * lg (large): 1200px and up\n * xl (extra-large): 1536px and up\n */\nexport const useScreenDimensions = (): ScreenDimensions => {\n  const theme = useTheme();\n  // =====================\n  // debug\n  // const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  // useEffect(() => {\n  //   // Update the width when the window is resized\n  //   const handleResize = (): void => {\n  //     setWindowWidth(window.innerWidth);\n  //   };\n\n  //   window.addEventListener('resize', handleResize);\n\n  //   // Cleanup event listener on component unmount\n  //   return () => {\n  //     window.removeEventListener('resize', handleResize);\n  //   };\n  // }, []);\n\n  // screen size is extra large - (xl) or larger\n  const isExtraLargeScreen = useMediaQuery(theme.breakpoints.up('xl'));\n\n  // screen size size is large (lg) or larger\n  const isLargeScreen = useMediaQuery(theme.breakpoints.up('lg'));\n\n  // Check if screen size is medium (md) or larger\n  const isMediumScreen = useMediaQuery(theme.breakpoints.up('md'));\n\n  // Check if screen size is small (sm) or larger\n  const isSmallScreen = useMediaQuery(theme.breakpoints.up('sm'));\n\n  // Check if screen size is extra-small (xs)\n  const isExtraSmallScreen = useMediaQuery(theme.breakpoints.down('xs'));\n\n  // useEffect(() => {\n  //   console.log(\n  //     `windowWidth=[${windowWidth}] :: isExtraSmall=[${isExtraSmall}] :: isSmallUp=[${isSmallUp}] :: isMediumUp=[${isMediumUp}] :: isLargeUp=[${isLargeScreen}]`\n  //   );\n  // }, [windowWidth, isMediumUp, isSmallUp, isExtraSmall, isLargeScreen]);\n\n  // const userName = user?.userName;\n  // useEffect(() => {\n  //   console.log(`user_id = [${userId}] :: user_name=[${userName}]`);\n  // }, [userId, userName]);\n\n  // ========================\n\n  return {\n    isExtraSmallScreen,\n    isSmallScreen,\n    isMediumScreen,\n    isLargeScreen,\n    isExtraLargeScreen,\n  };\n};\n"]}