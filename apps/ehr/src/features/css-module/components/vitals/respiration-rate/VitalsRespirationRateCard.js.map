{"version":3,"file":"VitalsRespirationRateCard.js","sourceRoot":"","sources":["VitalsRespirationRateCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Grid } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { ChangeEvent, JSX, useCallback, useState } from 'react';\nimport { VitalFieldNames, VitalsRespirationRateObservationDTO } from 'utils';\nimport { RoundedButton } from '../../../../../components/RoundedButton';\nimport { AccordionCard, DoubleColumnContainer } from '../../../../../telemed/components';\nimport VitalsHistoryContainer from '../components/VitalsHistoryContainer';\nimport VitalHistoryElement from '../components/VitalsHistoryEntry';\nimport { VitalsTextInputFiled } from '../components/VitalsTextInputFiled';\nimport { VitalsCardProps } from '../types';\nimport { textToRespirationRateNumber } from './helpers';\n\ntype VitalsRespirationRateCardProps = VitalsCardProps<VitalsRespirationRateObservationDTO>;\nconst VitalsRespirationRateCard: React.FC<VitalsRespirationRateCardProps> = ({\n  handleSaveVital,\n  handleDeleteVital,\n  currentObs,\n  historicalObs,\n}): JSX.Element => {\n  const [respirationRateValueText, setRespirationRateValueText] = useState('');\n\n  const [isRespirationRateValidationError, setRespirationRateValidationError] = useState<boolean>(false);\n\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);\n  const handleSectionCollapse = useCallback(() => {\n    setIsCollapsed((prevCollapseState) => !prevCollapseState);\n  }, [setIsCollapsed]);\n\n  const [isSaving, setIsSaving] = useState(false);\n\n  const isDisabledAddButton = !respirationRateValueText || isRespirationRateValidationError;\n\n  const latestRespRateValue = currentObs[0]?.value;\n\n  const handleSaveRespirationRateObservation = useCallback(\n    async (respRateValueText: string): Promise<void> => {\n      const respRateValueNumber = textToRespirationRateNumber(respRateValueText);\n      if (!respRateValueNumber) return;\n\n      try {\n        setIsSaving(true);\n        const vitalObs: VitalsRespirationRateObservationDTO = {\n          field: VitalFieldNames.VitalRespirationRate,\n          value: respRateValueNumber,\n        };\n        await handleSaveVital(vitalObs);\n        setRespirationRateValueText('');\n      } catch {\n        enqueueSnackbar('Error saving respiration rate data', { variant: 'error' });\n      } finally {\n        setIsSaving(false);\n      }\n    },\n    [handleSaveVital]\n  );\n\n  const handleTextInputChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n      const respirationRateAsText = e.target.value;\n      setRespirationRateValueText(respirationRateAsText);\n      if (respirationRateAsText.length === 0) {\n        setRespirationRateValidationError(false);\n      }\n    },\n    [setRespirationRateValidationError, setRespirationRateValueText]\n  );\n\n  return (\n    <Box sx={{ mt: 3 }}>\n      <AccordionCard\n        label={`RR (/min) ${latestRespRateValue ?? ''}`}\n        collapsed={isCollapsed}\n        onSwitch={handleSectionCollapse}\n      >\n        <DoubleColumnContainer\n          divider\n          leftColumn={\n            <Grid\n              container\n              sx={{\n                height: 'auto',\n                width: 'auto',\n                backgroundColor: '#F7F8F9',\n                borderRadius: 2,\n                my: 2,\n                mx: 2,\n                py: 2,\n                px: 2,\n              }}\n            >\n              {/* RespirationRate Input Field column */}\n              <Grid item xs={12} sm={6} md={6} lg={6} order={{ xs: 1, sm: 1, md: 1 }}>\n                <VitalsTextInputFiled\n                  label=\"RR (/min)\"\n                  value={respirationRateValueText}\n                  disabled={isSaving}\n                  isInputError={isRespirationRateValidationError}\n                  onChange={handleTextInputChange}\n                />\n              </Grid>\n\n              {/* Add Button column */}\n              <Grid item xs={12} sm={6} md={6} lg={6} order={{ xs: 2, sm: 2, md: 2, lg: 2 }} sx={{ mt: 0 }}>\n                <RoundedButton\n                  size=\"small\"\n                  disabled={isDisabledAddButton}\n                  loading={isSaving}\n                  onClick={() => handleSaveRespirationRateObservation(respirationRateValueText)}\n                  color=\"primary\"\n                  sx={{\n                    height: '40px',\n                    px: 2,\n                    ml: 1,\n                  }}\n                >\n                  Add\n                </RoundedButton>\n              </Grid>\n            </Grid>\n          }\n          rightColumn={\n            <VitalsHistoryContainer\n              currentEncounterObs={currentObs}\n              historicalObs={historicalObs}\n              isLoading={false}\n              historyElementCreator={(historyEntry) => {\n                const isCurrent = currentObs.some((obs) => obs.resourceId === historyEntry.resourceId);\n                return (\n                  <VitalHistoryElement\n                    historyEntry={historyEntry}\n                    onDelete={isCurrent ? handleDeleteVital : undefined}\n                  />\n                );\n              }}\n            />\n          }\n        />\n      </AccordionCard>\n    </Box>\n  );\n};\n\nexport default VitalsRespirationRateCard;\n"]}