{"version":3,"file":"VitalsWeightsCard.js","sourceRoot":"","sources":["VitalsWeightsCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Grid, TextField, Typography } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { JSX, useCallback, useMemo, useState } from 'react';\nimport { kgToLbs, textToWeightNumber, VitalFieldNames, VitalsWeightObservationDTO } from 'utils';\nimport { RoundedButton } from '../../../../../components/RoundedButton';\nimport { AccordionCard, DoubleColumnContainer } from '../../../../../telemed';\nimport VitalsHistoryContainer from '../components/VitalsHistoryContainer';\nimport VitalHistoryElement from '../components/VitalsHistoryEntry';\nimport { VitalsTextInputFiled } from '../components/VitalsTextInputFiled';\nimport { VitalsCardProps } from '../types';\n\ntype VitalsWeightsCardProps = VitalsCardProps<VitalsWeightObservationDTO>;\nconst VitalsWeightsCard: React.FC<VitalsWeightsCardProps> = ({\n  handleSaveVital,\n  handleDeleteVital,\n  currentObs,\n  historicalObs,\n}): JSX.Element => {\n  const [weightValueText, setWeightValueText] = useState('');\n\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);\n  const handleSectionCollapse = useCallback(() => {\n    setIsCollapsed((prevCollapseState) => !prevCollapseState);\n  }, [setIsCollapsed]);\n\n  const latestWeightValue = currentObs[0]?.value;\n\n  const [isSaving, setIsSaving] = useState(false);\n\n  const enteredWeightInLb: number | undefined = useMemo(() => {\n    const weightKg = textToWeightNumber(weightValueText);\n    if (!weightKg) return;\n    return kgToLbs(weightKg);\n  }, [weightValueText]);\n\n  const handleSaveWeightObservation = async (weightValueText: string): Promise<void> => {\n    const weightValueNumber = textToWeightNumber(weightValueText);\n    if (!weightValueNumber) return;\n    try {\n      setIsSaving(true);\n      const vitalObs: VitalsWeightObservationDTO = {\n        field: VitalFieldNames.VitalWeight,\n        value: weightValueNumber,\n      };\n      await handleSaveVital(vitalObs);\n      setWeightValueText('');\n    } catch {\n      enqueueSnackbar('Error saving Weight data', { variant: 'error' });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  return (\n    <Box sx={{ mt: 3 }}>\n      <AccordionCard\n        label={`Weight (kg) ${latestWeightValue ?? ''}`}\n        collapsed={isCollapsed}\n        onSwitch={handleSectionCollapse}\n      >\n        <DoubleColumnContainer\n          divider\n          leftColumn={\n            <Grid\n              container\n              sx={{\n                height: 'auto',\n                width: 'auto',\n                backgroundColor: '#F7F8F9',\n                borderRadius: 2,\n                my: 2,\n                mx: 2,\n                py: 2,\n                px: 2,\n              }}\n            >\n              {/* Weight Input Field column */}\n              <Grid item xs={12} sm={6} md={6} lg={6} order={{ xs: 1, sm: 1, md: 1 }}>\n                <Box\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'row',\n                  }}\n                >\n                  <VitalsTextInputFiled\n                    label=\"Weight (kg)\"\n                    value={weightValueText}\n                    disabled={isSaving}\n                    isInputError={false}\n                    onChange={(e) => setWeightValueText(e.target.value)}\n                  />\n                  <Typography fontSize={25} sx={{ ml: 1 }}>\n                    /\n                  </Typography>\n                  <TextField\n                    fullWidth\n                    size=\"small\"\n                    label=\"Weight (lbs)\"\n                    sx={{\n                      '& fieldset': { border: 'none' },\n                      maxWidth: '110px',\n                    }}\n                    disabled\n                    InputLabelProps={{ shrink: true }}\n                    value={enteredWeightInLb ?? ''}\n                  />\n                </Box>\n              </Grid>\n\n              {/* Add Button column */}\n              <Grid\n                item\n                container\n                xs={12}\n                sm={4}\n                md={4}\n                lg={4}\n                order={{ xs: 2, sm: 2, md: 2, lg: 3 }}\n                style={{ alignSelf: 'center' }}\n              >\n                <RoundedButton\n                  size=\"small\"\n                  disabled={!weightValueText}\n                  loading={isSaving}\n                  onClick={() => handleSaveWeightObservation(weightValueText)}\n                  color=\"primary\"\n                  sx={{\n                    height: '40px',\n                    px: 2,\n                    ml: 1,\n                  }}\n                >\n                  Add\n                </RoundedButton>\n              </Grid>\n            </Grid>\n          }\n          rightColumn={\n            <VitalsHistoryContainer\n              historicalObs={historicalObs}\n              currentEncounterObs={currentObs}\n              isLoading={false}\n              historyElementCreator={(historyEntry) => {\n                const isCurrent = currentObs.some((obs) => obs.resourceId === historyEntry.resourceId);\n                return (\n                  <VitalHistoryElement\n                    historyEntry={historyEntry}\n                    onDelete={isCurrent ? handleDeleteVital : undefined}\n                  />\n                );\n              }}\n            />\n          }\n        />\n      </AccordionCard>\n    </Box>\n  );\n};\n\nexport default VitalsWeightsCard;\n"]}