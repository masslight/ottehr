{"version":3,"file":"NavigationContext.js","sourceRoot":"","sources":["NavigationContext.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { createContext, ReactNode, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { useLocation, useMatch, useNavigate, useParams } from 'react-router-dom';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../telemed';\nimport { CSSModal } from '../components/CSSModal';\nimport { sidebarMenuIcons } from '../components/Sidebar';\nimport { useAppointment } from '../hooks/useAppointment';\nimport { ROUTER_PATH, routesCSS } from '../routing/routesCSS';\n\nexport type InteractionMode = 'intake' | 'provider' | 'readonly';\n\nexport type CSSValidator = () => React.ReactElement | string;\n\nexport type CSSValidators = Record<string, CSSValidator>;\n\nexport interface RouteCSS {\n  path: ROUTER_PATH;\n  sidebarPath?: string; // used for generating link in sidebar if route has dynamic slug\n  activeCheckPath?: string; // helps to check active path if route contains dynamic slug\n  modes: InteractionMode[];\n  element: React.ReactNode;\n  text: string;\n  iconKey: keyof typeof sidebarMenuIcons;\n  isSkippedInNavigation?: boolean;\n}\n\ninterface NavigationContextType {\n  currentRoute: string | undefined;\n  goToNext: () => void;\n  goToPrevious: () => void;\n  addNextPageValidators: (validators: CSSValidators) => void; // blocks next navigation if validators return non empty string and show modal with this message.\n  addPreviousPageValidators: (validators: CSSValidators) => void; // blocks navigation if validators return non empty string and show modal with this message.\n  resetNavigationState: () => void;\n  setIsNavigationHidden: (hide: boolean) => void;\n  isNavigationHidden: boolean;\n  interactionMode: InteractionMode;\n  setInteractionMode: (mode: InteractionMode, shouldNavigate: boolean) => void;\n  availableRoutes: RouteCSS[];\n  isFirstPage: boolean;\n  isLastPage: boolean;\n  isNavigationDisabled: boolean;\n  setNavigationDisable: (state: Record<string, boolean>) => void; // disable intake navigation buttons, use case - updating required field\n  nextButtonText: string;\n  isLoading: boolean;\n}\n\nconst NavigationContext = createContext<NavigationContextType | undefined>(undefined);\n\n// hack for safe using outside context in the telemed components\nexport let setNavigationDisable: NavigationContextType['setNavigationDisable'] = () => {\n  return;\n};\n\nexport const NavigationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { id: appointmentIdFromUrl } = useParams();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const nextPageValidatorsRef = useRef<CSSValidators>({});\n  const previousPageValidatorsRef = useRef<CSSValidators>({});\n\n  const [isNavigationHidden, setIsNavigationHidden] = useState(false);\n\n  const [isModeInitialized, setIsModeInitialized] = useState(false);\n\n  // todo: calc actual initial InteractionMode value; in that case check \"Intake Notes\" button (or any other usages) in the Telemed works correctly\n  const [interactionMode, _setInteractionMode] = useState<InteractionMode>('intake');\n\n  const [modalContent, setModalContent] = useState<ReturnType<CSSValidator>>();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [_disabledNavigationState, _setDisabledNavigationState] = useState<Record<string, boolean>>({});\n\n  const { isLoading, visitState } = useAppointment(appointmentIdFromUrl);\n  const { encounter } = visitState;\n  const { chartData, isChartDataLoading } = getSelectors(useAppointmentStore, ['chartData', 'isChartDataLoading']);\n\n  const setInteractionMode = useCallback(\n    (mode: InteractionMode, shouldNavigate: boolean): void => {\n      const basePath = location.pathname.match(/.*?(in-person)\\/[^/]*/)?.[0];\n\n      if (!basePath) {\n        return;\n      }\n\n      const firstAvailableRoute = Object.values(routesCSS).find((route) => route.modes.includes(mode));\n\n      if (!firstAvailableRoute) {\n        return;\n      }\n\n      const routePath = firstAvailableRoute.sidebarPath || firstAvailableRoute.path;\n      const newPath = `${basePath}/${routePath}`;\n      _setInteractionMode(mode);\n      setIsModeInitialized(true);\n\n      if (shouldNavigate) {\n        navigate(newPath);\n      }\n    },\n    [location.pathname, navigate]\n  );\n\n  useEffect(() => {\n    const appointmentIdReferenceFromEncounter = encounter?.appointment?.[0]?.reference?.replace('Appointment/', '');\n\n    if (!appointmentIdReferenceFromEncounter || !appointmentIdFromUrl) {\n      return;\n    }\n\n    const isEncounterLoadedToStore = appointmentIdReferenceFromEncounter === appointmentIdFromUrl;\n\n    if (!isEncounterLoadedToStore) {\n      return;\n    }\n\n    if (\n      encounter?.participant?.find(\n        (participant) =>\n          participant.type?.find(\n            (type) =>\n              type.coding?.find(\n                (coding) =>\n                  coding.system === 'http://terminology.hl7.org/CodeSystem/v3-ParticipationType' &&\n                  coding.code === 'ATND'\n              ) != null\n          ) != null\n      ) &&\n      !isModeInitialized\n    ) {\n      setInteractionMode('provider', false);\n    } else if (encounter?.id) {\n      setIsModeInitialized(true);\n    }\n  }, [\n    encounter?.id,\n    encounter?.participant,\n    setInteractionMode,\n    interactionMode,\n    isModeInitialized,\n    appointmentIdFromUrl,\n    encounter?.appointment,\n  ]);\n\n  setNavigationDisable = (newState: Record<string, boolean>): void => {\n    let shouldUpdate = false;\n    for (const key of Object.keys(newState)) {\n      if (!!_disabledNavigationState[key] !== !!newState[key]) {\n        shouldUpdate = true;\n        break;\n      }\n    }\n    if (shouldUpdate) {\n      _setDisabledNavigationState({ ..._disabledNavigationState, ...newState });\n    }\n  };\n\n  const isNavigationDisabled = Object.values(_disabledNavigationState).some(Boolean);\n\n  const addNextPageValidators = (newValidators: CSSValidators): void => {\n    nextPageValidatorsRef.current = { ...nextPageValidatorsRef.current, ...newValidators };\n  };\n\n  const addPreviousPageValidators = (newValidators: CSSValidators): void => {\n    previousPageValidatorsRef.current = { ...previousPageValidatorsRef.current, ...newValidators };\n  };\n\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n\n  const resetNavigationState = (): void => {\n    nextPageValidatorsRef.current = {};\n    previousPageValidatorsRef.current = {};\n    setIsModalOpen(false);\n    setModalContent('');\n    _setDisabledNavigationState({});\n  };\n\n  const availableRoutes = Object.values(routesCSS).filter(\n    (route) => !isLoading && isModeInitialized && route.modes.includes(interactionMode)\n  );\n  const availableRoutesForBottomNavigation = availableRoutes.filter((route) => !route.isSkippedInNavigation);\n\n  const availableRoutesPathsForBottomNavigation = availableRoutesForBottomNavigation.map(\n    (route) => route.sidebarPath || route.path\n  );\n\n  const match = useMatch('/in-person/:id/*');\n  const splat = match?.params['*'];\n  const currentRouteIndex = availableRoutesPathsForBottomNavigation.indexOf(splat || '');\n  const currentRoute = availableRoutesPathsForBottomNavigation[currentRouteIndex];\n  const isFirstPage = currentRouteIndex === 0;\n  const isLastPage = currentRouteIndex === availableRoutesPathsForBottomNavigation.length - 1;\n  const nextRoutePath = !isLastPage ? availableRoutesPathsForBottomNavigation?.[currentRouteIndex + 1] : null;\n  const previousRoutePath = !isFirstPage ? availableRoutesPathsForBottomNavigation?.[currentRouteIndex - 1] : null;\n\n  // Hide bottom navigation for pages that shouldn't be accessed through the bottom navigation\n  // These pages will have currentRouteIndex === -1 because they are not in the availableRoutesPathsForBottomNavigation array\n  // Examples: order details, order edit pages\n  const isPageWithHiddenBottomNavigation = currentRouteIndex === -1;\n\n  useEffect(() => {\n    setIsNavigationHidden(isPageWithHiddenBottomNavigation);\n  }, [isPageWithHiddenBottomNavigation]);\n\n  const goToNext = useCallback(() => {\n    if (!nextRoutePath) {\n      return;\n    }\n\n    const validators = Object.values(nextPageValidatorsRef.current);\n\n    for (let i = 0; i < validators.length; i++) {\n      const validationResult = validators[i]();\n\n      if (validationResult) {\n        setModalContent(validationResult);\n        setIsModalOpen(true);\n        return;\n      }\n    }\n\n    navigate(nextRoutePath);\n  }, [nextRoutePath, navigate]);\n\n  const goToPrevious = useCallback(() => {\n    if (!previousRoutePath) {\n      return;\n    }\n\n    const validators = Object.values(previousPageValidatorsRef.current);\n\n    for (let i = 0; i < validators.length; i++) {\n      const validationResult = validators[i]();\n      if (validationResult) {\n        setModalContent(validationResult);\n        setIsModalOpen(true);\n        return;\n      }\n    }\n\n    navigate(previousRoutePath);\n  }, [previousRoutePath, navigate]);\n\n  const nextButtonText = (() => {\n    if (isChartDataLoading) return ' ';\n\n    if (interactionMode === 'intake') {\n      switch (currentRoute) {\n        case 'allergies':\n          return chartData?.allergies?.length ? 'Allergies Confirmed' : 'Confirmed No Known Allergies';\n        case 'medications':\n          return chartData?.medications?.length ? 'Medications Confirmed' : 'Confirmed No Medications';\n        case 'medical-conditions':\n          return chartData?.conditions?.length ? 'Medical Conditions Confirmed' : 'Confirmed No Medical Conditions';\n        case 'surgical-history':\n          return chartData?.surgicalHistory?.length ? 'Surgical History Confirmed' : 'Confirmed No Surgical History';\n        case 'hospitalization':\n          return `${\n            chartData?.episodeOfCare?.length ? 'Hospitalization Confirmed' : 'Confirmed No Hospitalization'\n          } AND Complete Intake`;\n        default:\n          return isLastPage ? 'Complete' : 'Next';\n      }\n    }\n\n    return 'Next';\n  })();\n\n  return (\n    <NavigationContext.Provider\n      value={{\n        currentRoute,\n        goToNext,\n        goToPrevious,\n        addNextPageValidators,\n        addPreviousPageValidators,\n        resetNavigationState: resetNavigationState,\n        setIsNavigationHidden,\n        isNavigationHidden,\n        interactionMode,\n        isLoading: isLoading || !isModeInitialized,\n        setInteractionMode,\n        availableRoutes,\n        isFirstPage,\n        isLastPage,\n        setNavigationDisable,\n        isNavigationDisabled,\n        nextButtonText,\n      }}\n    >\n      {children}\n      <CSSModal\n        open={isModalOpen}\n        handleClose={closeModal}\n        title=\"Validation Error\"\n        description={modalContent as React.ReactElement}\n        closeButtonText=\"Close\"\n        confirmText=\"OK\"\n        handleConfirm={closeModal}\n      />\n    </NavigationContext.Provider>\n  );\n};\n\n// Quick fix for hot reload issue;\nlet preContextForDevelopmentUseOnly: NavigationContextType | undefined;\nconst isDevelopment = import.meta.env.VITE_APP_IS_LOCAL;\n\nexport const useNavigationContext = (): NavigationContextType => {\n  const context = useContext(NavigationContext);\n\n  // clear state on component unmount\n  useEffect(() => {\n    return () => {\n      context?.resetNavigationState?.();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // TODO: try to move context higher to wrap routes (required some refactoring) - this should prevent additional\n  // reload after hot reload and this fix can be removed\n  if (isDevelopment) {\n    if (context === undefined) {\n      return preContextForDevelopmentUseOnly as NavigationContextType;\n    }\n    // context will be broken during hot reload, keep the last context\n    preContextForDevelopmentUseOnly = context;\n  }\n\n  if (context === undefined) {\n    throw new Error('useNavigationContext must be used within a NavigationProvider');\n  }\n\n  return context;\n};\n"]}