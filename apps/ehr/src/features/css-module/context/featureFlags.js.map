{"version":3,"file":"featureFlags.js","sourceRoot":"","sources":["featureFlags.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AA2CA,0CAuBC;AAlED,+BAAoG;AAMpG,IAAM,YAAY,GAAiB;IACjC,GAAG,EAAE,KAAK;CACX,CAAC;AAOF,IAAM,mBAAmB,GAAG,IAAA,qBAAa,EAAiC,IAAI,CAAC,CAAC;AAEzE,IAAM,oBAAoB,GAAgF,UAAC,EAGjH;QAFC,QAAQ,cAAA,EACR,UAAU,gBAAA;IAEJ,IAAA,KAAoB,IAAA,gBAAQ,wBAAoB,YAAY,GAAK,UAAU,EAAG,EAA7E,KAAK,QAAA,EAAE,QAAQ,QAA8D,CAAC;IAErF,IAAM,OAAO,GAAG,IAAA,mBAAW,EAAC,UAAC,GAAuB,EAAE,KAAuC;QAC3F,QAAQ,CAAC,UAAC,SAAS;;YACjB,IAAI,SAAS,CAAC,GAAG,CAAC,KAAK,KAAK;gBAAE,OAAO,SAAS,CAAC;YAC/C,6BAAY,SAAS,gBAAG,GAAG,IAAG,KAAK,OAAG;QACxC,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,KAAK,GAAG,IAAA,eAAO,EACnB,cAAM,OAAA,CAAC;QACL,OAAO,SAAA;QACP,KAAK,OAAA;KACN,CAAC,EAHI,CAGJ,EACF,CAAC,OAAO,EAAE,KAAK,CAAC,CACjB,CAAC;IAEF,OAAO,CAAC,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AAC/F,CAAC,CAAC;AAtBW,QAAA,oBAAoB,wBAsB/B;AAIF,SAAgB,eAAe,CAAC,GAAgD;IAC9E,IAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,mBAAmB,CAAC,CAAC;IAEhD,IAAA,iBAAS,EAAC;QACR,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO;QACT,CAAC;QAED,IAAI,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,EAAY;oBAAX,GAAG,QAAA,EAAE,KAAK,QAAA;gBACtC,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE,CAAC;oBAC/B,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC,GAAyB,EAAE,KAAK,CAAC,CAAC;gBACrD,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;IAEnB,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,OAAO,CAAC,IAAI,CAAC,yFAAyF,CAAC,CAAC;QACxG,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,OAAO,OAAO,CAAC,KAAK,CAAC;AACvB,CAAC","sourcesContent":["import React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\n\nexport type FeatureFlags = {\n  css: boolean;\n};\n\nconst initialFlags: FeatureFlags = {\n  css: false,\n};\n\ninterface FeatureFlagsContextType {\n  setFlag: <Flag extends keyof FeatureFlags>(key: Flag, value: FeatureFlags[Flag]) => void;\n  flags: FeatureFlags;\n}\n\nconst FeatureFlagsContext = createContext<FeatureFlagsContextType | null>(null);\n\nexport const FeatureFlagsProvider: React.FC<{ children: React.ReactNode; flagsToSet?: Partial<FeatureFlags> }> = ({\n  children,\n  flagsToSet,\n}) => {\n  const [flags, setFlags] = useState<FeatureFlags>({ ...initialFlags, ...flagsToSet });\n\n  const setFlag = useCallback((key: keyof FeatureFlags, value: FeatureFlags[keyof FeatureFlags]) => {\n    setFlags((prevFlags) => {\n      if (prevFlags[key] === value) return prevFlags;\n      return { ...prevFlags, [key]: value };\n    });\n  }, []);\n\n  const value = useMemo(\n    () => ({\n      setFlag,\n      flags,\n    }),\n    [setFlag, flags]\n  );\n\n  return <FeatureFlagsContext.Provider value={value}>{children}</FeatureFlagsContext.Provider>;\n};\n\nexport function useFeatureFlags(): FeatureFlags;\nexport function useFeatureFlags(flagsToSet: Partial<FeatureFlags>): FeatureFlags; // set flags\nexport function useFeatureFlags(arg?: Partial<FeatureFlags> | keyof FeatureFlags): FeatureFlags {\n  const context = useContext(FeatureFlagsContext);\n\n  useEffect(() => {\n    if (!context) {\n      return;\n    }\n\n    if (arg && typeof arg === 'object') {\n      Object.entries(arg).forEach(([key, value]) => {\n        if (typeof value === 'boolean') {\n          context?.setFlag(key as keyof FeatureFlags, value);\n        }\n      });\n    }\n  }, [arg, context]);\n\n  if (!context) {\n    console.warn('useFeatureFlags must be used within a FeatureFlagsProvider, default values will be used');\n    return initialFlags;\n  }\n\n  return context.flags;\n}\n"]}