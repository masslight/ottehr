{"version":3,"file":"useAppointment.js","sourceRoot":"","sources":["useAppointment.ts"],"names":[],"mappings":";;;AACA,+BAAkC;AAElC,mEAAkE;AAClE,4CAA0E;AAC1E,mDAAoD;AACpD,2CAA+C;AAE/C,4EAA2E;AAU3E,IAAM,WAAW,GAAG;IAClB,SAAS,EAAE,EAAE;IACb,UAAU,EAAE,EAAE;IACd,UAAU,EAAE,EAAE;IACd,KAAK,EAAE,IAAI;IACX,SAAS,EAAE,IAAI;IACf,OAAO,EAAE,CAAC;QACR,OAAO;IACT,CAAC,CAAQ;CACV,CAAC;AAEK,IAAM,cAAc,GAAG,UAC5B,aAAsB;IAWhB,IAAA,KAA4B,IAAA,iDAAuB,GAAE,EAAnD,SAAS,eAAA,EAAE,UAAU,gBAA8B,CAAC;IAE5D,IAAM,SAAS,GAAG,IAAA,2BAAY,EAAC,6BAAmB,EAAE;QAClD,aAAa;QACb,SAAS;QACT,UAAU;QACV,iBAAiB;QACjB,WAAW;QACX,uBAAuB;KACxB,CAAC,CAAC;IAEK,IAAA,QAAQ,GAA8E,SAAS,SAAvF,EAAE,eAAe,GAA6D,SAAS,gBAAtE,EAAE,OAAO,GAAoD,SAAS,QAA7D,EAAE,SAAS,GAAyC,SAAS,UAAlD,EAAE,qBAAqB,GAAkB,SAAS,sBAA3B,EAAE,WAAW,GAAK,SAAS,YAAd,CAAe;IAElG,IAAA,KAAgC,IAAA,2BAAiB,EAAC,EAAE,aAAa,eAAA,EAAE,EAAE,UAAC,IAAI;;QAC9E,IAAM,eAAe,GAAG,IAAA,yBAAY,EAAC,IAAI,CAAC,CAAC;QAC3C,IAAM,eAAe,GAAG,IAAA,oBAAW,EAAC,IAAI,CAAC,CAAC;QAE1C,uCAAuC;QACvC,6BAAmB,CAAC,QAAQ,CAAC;YAC3B,WAAW,EAAE,eAAe,CAAC,WAAW;YACxC,OAAO,EAAE,eAAe,CAAC,OAAO;YAChC,QAAQ,EAAE,eAAe,CAAC,QAAQ;YAClC,eAAe,EAAE,eAAe,CAAC,eAAe;YAChD,SAAS,EAAE,eAAe,CAAC,SAAS;YACpC,qBAAqB,EAAE,eAAe,CAAC,qBAAqB;YAE5D,gFAAgF;YAChF,gBAAgB,EAAE,CAAA,MAAA,eAAe,CAAC,UAAU,0CAAE,4BAA4B,KAAI,EAAE;YAChF,kBAAkB,EAAE,CAAA,MAAA,eAAe,CAAC,UAAU,0CAAE,kBAAkB,KAAI,EAAE;YAExE,oBAAoB,EAAE,KAAK;SAC5B,CAAC,CAAC;IACL,CAAC,CAAC,EAnBM,SAAS,eAAA,EAAE,KAAK,WAAA,EAAE,OAAO,aAmB/B,CAAC;IAEH,yDAAyD;IACzD,IAAA,iBAAS,EAAC;QACR,IAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC;YACnC,WAAW;YACX,OAAO;YACP,QAAQ;YACR,eAAe;YACf,SAAS;YACT,qBAAqB;SACJ,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACrC,IAAM,eAAe,GAAG,IAAA,oBAAW,EAAC,cAA0B,CAAC,CAAC;QAChE,iDAAuB,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IACpD,CAAC,EAAE,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,eAAe,EAAE,SAAS,EAAE,qBAAqB,CAAC,CAAC,CAAC;IAExF,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;QACzB,OAAO,CAAC,IAAI,CAAC,sFAAsF,CAAC,CAAC;QACrG,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,OAAO,EAAE,SAAS,WAAA,EAAE,UAAU,YAAA,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,OAAA,EAAE,SAAS,WAAA,EAAE,OAAO,SAAA,EAAE,CAAC;AACrF,CAAC,CAAC;AAlEW,QAAA,cAAc,kBAkEzB","sourcesContent":["import { Appointment, Bundle, Encounter, FhirResource, Location, Patient, QuestionnaireResponse } from 'fhir/r4b';\nimport { useEffect } from 'react';\nimport { QueryObserverResult, RefetchOptions, RefetchQueryFilters } from 'react-query';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useAppointmentStore, useGetAppointment } from '../../../telemed';\nimport { getResources } from '../parser/extractors';\nimport { parseBundle } from '../parser/parser';\nimport { VisitMappedData, VisitResources } from '../parser/types';\nimport { useMappedVisitDataStore } from '../store/parsedAppointment.store';\n\ntype VisitState = Partial<{\n  appointment: Appointment;\n  patient: Patient;\n  location: Location;\n  encounter: Encounter;\n  questionnaireResponse: QuestionnaireResponse;\n}>;\n\nconst emptyResult = {\n  resources: {},\n  mappedData: {},\n  visitState: {},\n  error: null,\n  isLoading: true,\n  refetch: (() => {\n    return;\n  }) as any,\n};\n\nexport const useAppointment = (\n  appointmentId?: string\n): {\n  resources: VisitResources;\n  mappedData: VisitMappedData;\n  visitState: VisitState;\n  error: any;\n  isLoading: boolean;\n  refetch: <TPageData>(\n    options?: (RefetchOptions & RefetchQueryFilters<TPageData>) | undefined\n  ) => Promise<QueryObserverResult<FhirResource[], unknown>>;\n} => {\n  const { resources, mappedData } = useMappedVisitDataStore();\n\n  const visitData = getSelectors(useAppointmentStore, [\n    'appointment',\n    'patient',\n    'location',\n    'locationVirtual',\n    'encounter',\n    'questionnaireResponse',\n  ]);\n\n  const { location, locationVirtual, patient, encounter, questionnaireResponse, appointment } = visitData;\n\n  const { isLoading, error, refetch } = useGetAppointment({ appointmentId }, (data) => {\n    const bundleResources = getResources(data);\n    const parsedResources = parseBundle(data);\n\n    // init telemed store for compatibility\n    useAppointmentStore.setState({\n      appointment: bundleResources.appointment,\n      patient: bundleResources.patient,\n      location: bundleResources.location,\n      locationVirtual: bundleResources.locationVirtual,\n      encounter: bundleResources.encounter,\n      questionnaireResponse: bundleResources.questionnaireResponse,\n\n      // the patientPhotoUrls and schoolWorkNoteUrls structures are equal with Telemed\n      patientPhotoUrls: parsedResources.mappedData?.patientConditionalPhotosUrls || [],\n      schoolWorkNoteUrls: parsedResources.mappedData?.schoolWorkNoteUrls || [],\n\n      isAppointmentLoading: false,\n    });\n  });\n\n  // update parsed appointment store on telemed data change\n  useEffect(() => {\n    const visitResources = Object.values([\n      appointment,\n      patient,\n      location,\n      locationVirtual,\n      encounter,\n      questionnaireResponse,\n    ] as FhirResource[]).filter(Boolean);\n    const parsedResources = parseBundle(visitResources as Bundle[]);\n    useMappedVisitDataStore.setState(parsedResources);\n  }, [appointment, patient, location, locationVirtual, encounter, questionnaireResponse]);\n\n  if (!visitData.encounter) {\n    console.warn('Encounter is not available in the visit data. Ensure the appointment ID is provided.');\n    return emptyResult;\n  }\n\n  return { resources, mappedData, visitState: visitData, error, isLoading, refetch };\n};\n"]}