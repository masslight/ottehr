{"version":3,"file":"useChartData.js","sourceRoot":"","sources":["useChartData.ts"],"names":[],"mappings":";;;AAAA,+BAAkC;AAGlC,4CAAwE;AACxE,kFAAiF;AACjF,kFAAiF;AAE1E,IAAM,YAAY,GAAG,UAAC,EAkB5B;QAjBC,WAAW,iBAAA,EACX,eAAe,qBAAA,EACf,iBAAiB,uBAAA,EACjB,SAAS,eAAA,EACT,OAAO,aAAA,EACP,eAAc,EAAd,OAAO,mBAAG,IAAI,KAAA,EACd,0BAA0B,EAA1B,kBAAkB,mBAAG,KAAK,KAAA,EAC1B,eAAe,qBAAA;IAmBf,IAAM,SAAS,GAAG,IAAA,yCAAmB,GAAE,CAAC;IAChC,IAAQ,sBAAsB,GAAK,IAAA,yCAAmB,GAAE,OAA1B,CAA2B;IACjE,IAAM,mBAAmB,GAAG,IAAA,6BAAmB,EAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,mBAAmB,EAAzB,CAAyB,CAAC,CAAC;IAEhF,IAAA,KAQF,IAAA,yBAAe,EACjB,EAAE,SAAS,WAAA,EAAE,WAAW,aAAA,EAAE,eAAe,iBAAA,EAAE,OAAO,SAAA,EAAE,eAAe,iBAAA,EAAE,EACrE,UAAC,IAAI;QACH,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAG,IAAI,CAAC,CAAC;QAClB,IAAI,kBAAkB,EAAE,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAC,KAAK;;gBAC/C,mBAAmB,WAAG,GAAC,KAAK,IAAG,IAAI,CAAC,KAAmC,CAAC,MAAG,CAAC;YAC9E,CAAC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,6BAAmB,CAAC,QAAQ,CAAC;gBAC3B,kBAAkB,EAAE,KAAK;aAC1B,CAAC,CAAC;QACL,CAAC;QAED,2EAA2E;QAC3E,IAAI,eAAe;YAAE,OAAO;QAE5B,yDAAyD;QACzD,IAAI,iBAAiB,EAAE,CAAC;YACtB,sBAAsB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;QACtD,CAAC;IACH,CAAC,EACD,UAAC,KAAK;QACJ,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,6BAAmB,CAAC,QAAQ,CAAC;gBAC3B,kBAAkB,EAAE,KAAK;aAC1B,CAAC,CAAC;QACL,CAAC;QACD,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,KAAK,CAAC,CAAC;IACnB,CAAC,CACF,EAvCQ,cAAc,WAAA,EACrB,SAAS,eAAA,EACT,UAAU,gBAAA,EACV,OAAO,aAAA,EACD,SAAS,UAAA,EACf,QAAQ,cAAA,EACR,SAAS,eAiCV,CAAC;IAEF,IAAA,iBAAS,EAAC;QACR,IAAI,CAAC,eAAe,IAAI,OAAO,EAAE,CAAC;YAChC,6BAAmB,CAAC,QAAQ,CAAC;gBAC3B,kBAAkB,EAAE,UAAU;aAC/B,CAAC,CAAC;QACL,CAAC;IACH,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC;IAEtD,OAAO,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,SAAS,WAAA,EAAE,KAAK,EAAE,cAAc,EAAE,QAAQ,UAAA,EAAE,UAAU,YAAA,EAAE,SAAS,WAAA,EAAE,CAAC;AACnG,CAAC,CAAC;AAlFW,QAAA,YAAY,gBAkFvB","sourcesContent":["import { useEffect } from 'react';\nimport { QueryKey, QueryObserverResult } from 'react-query';\nimport { ChartDataRequestedFields, GetChartDataResponse } from 'utils';\nimport { useAppointmentStore, useGetChartData } from '../../../telemed';\nimport { useExamObservations } from '../../../telemed/hooks/useExamObservations';\nimport { useOystehrAPIClient } from '../../../telemed/hooks/useOystehrAPIClient';\n\nexport const useChartData = ({\n  encounterId,\n  requestedFields,\n  shouldUpdateExams,\n  onSuccess,\n  onError,\n  enabled = true,\n  replaceStoreValues = false,\n  refetchInterval,\n}: {\n  encounterId: string;\n  requestedFields?: ChartDataRequestedFields;\n  shouldUpdateExams?: boolean;\n  onSuccess?: (response: GetChartDataResponse) => void;\n  onError?: (error: any) => void;\n  enabled?: boolean;\n  replaceStoreValues?: boolean;\n  refetchInterval?: number;\n}): {\n  refetch: () => Promise<QueryObserverResult<GetChartDataResponse, unknown>>;\n  chartData: GetChartDataResponse | undefined;\n  isLoading: boolean;\n  isFetching: boolean;\n  error: any;\n  queryKey: QueryKey;\n  isFetched: boolean;\n} => {\n  const apiClient = useOystehrAPIClient();\n  const { update: updateExamObservations } = useExamObservations();\n  const setPartialChartData = useAppointmentStore((state) => state.setPartialChartData);\n\n  const {\n    error: chartDataError,\n    isLoading,\n    isFetching,\n    refetch,\n    data: chartData,\n    queryKey,\n    isFetched,\n  } = useGetChartData(\n    { apiClient, encounterId, requestedFields, enabled, refetchInterval },\n    (data) => {\n      onSuccess?.(data);\n      if (replaceStoreValues) {\n        Object.keys(requestedFields || {}).forEach((field) => {\n          setPartialChartData({ [field]: data[field as keyof GetChartDataResponse] });\n        });\n      }\n\n      if (!requestedFields) {\n        useAppointmentStore.setState({\n          isChartDataLoading: false,\n        });\n      }\n\n      // not set state for custom fields request, because data will be incomplete\n      if (requestedFields) return;\n\n      // should be updated only from root (useAppointment hook)\n      if (shouldUpdateExams) {\n        updateExamObservations(data.examObservations, true);\n      }\n    },\n    (error) => {\n      if (!requestedFields) {\n        useAppointmentStore.setState({\n          isChartDataLoading: false,\n        });\n      }\n      onError?.(error);\n    }\n  );\n\n  useEffect(() => {\n    if (!requestedFields && enabled) {\n      useAppointmentStore.setState({\n        isChartDataLoading: isFetching,\n      });\n    }\n  }, [chartData, isFetching, requestedFields, enabled]);\n\n  return { refetch, chartData, isLoading, error: chartDataError, queryKey, isFetching, isFetched };\n};\n"]}