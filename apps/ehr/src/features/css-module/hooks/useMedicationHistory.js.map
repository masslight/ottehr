{"version":3,"file":"useMedicationHistory.js","sourceRoot":"","sources":["useMedicationHistory.ts"],"names":[],"mappings":"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","sourcesContent":["import { QueryObserverResult } from 'react-query';\nimport { ChartDataFieldsKeys, GetChartDataResponse, MedicationDTO, removePrefix, SearchParams } from 'utils';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../telemed';\nimport { useChartData } from './useChartData';\n\nexport type MedicationHistoryField = Extract<ChartDataFieldsKeys, 'medications' | 'inhouseMedications'>;\n\nexport const MEDICATION_HISTORY_FIELDS: MedicationHistoryField[] = ['medications', 'inhouseMedications'];\nexport const PATIENT_MEDS_COUNT_TO_LOAD = 100;\nexport const COLLAPSED_MEDS_COUNT = 3;\n\nconst SEARCH_PARAMS: Record<MedicationHistoryField, SearchParams> = {\n  medications: {\n    _sort: '-effective',\n    _include: 'MedicationStatement:source',\n    _tag: 'current-medication',\n  },\n  inhouseMedications: {\n    _sort: '-effective',\n    _include: 'MedicationStatement:source',\n    _tag: 'in-house-medication',\n  },\n};\n\nexport interface MedicationWithTypeDTO extends MedicationDTO {\n  chartDataField: MedicationHistoryField;\n}\n\nexport const useMedicationHistory = ({\n  search_by = 'patient',\n  count = PATIENT_MEDS_COUNT_TO_LOAD,\n  chartDataFields = MEDICATION_HISTORY_FIELDS,\n}: {\n  search_by?: SearchParams['_search_by'];\n  count?: number;\n  chartDataFields?: MedicationHistoryField[];\n} = {}): {\n  isLoading: boolean;\n  medicationHistory: MedicationWithTypeDTO[];\n  refetchHistory: () => Promise<QueryObserverResult<GetChartDataResponse, unknown>>;\n} => {\n  const { encounter } = getSelectors(useAppointmentStore, ['encounter']);\n\n  const requestedFields = chartDataFields.reduce(\n    (acc, field) => {\n      acc[field] = {\n        ...SEARCH_PARAMS[field],\n        _search_by: search_by,\n        _count: count,\n      };\n      return acc;\n    },\n    {} as Record<MedicationHistoryField, SearchParams>\n  );\n\n  const {\n    isLoading,\n    chartData: historyData,\n    refetch: refetchHistory,\n  } = useChartData({\n    encounterId: encounter.id || '',\n    requestedFields,\n    enabled: !!encounter.id,\n  });\n\n  /**\n   * Enrich medication records with practitioner details.\n   * _include=MedicationStatement:source fetches related Practitioner resources.\n   * Replace practitioner references with full objects for display.\n   * todo: consider to move this logic to the backend\n   */\n  if (historyData?.practitioners?.length) {\n    chartDataFields.forEach((field) => {\n      historyData[field]?.forEach((val) => {\n        if (\n          'practitioner' in val &&\n          val.practitioner &&\n          'reference' in val.practitioner &&\n          val.practitioner.reference\n        ) {\n          const ref = removePrefix('Practitioner/', val.practitioner.reference);\n          const practitioner = historyData.practitioners?.find((practitioner) => practitioner.id === ref);\n          val.practitioner = practitioner;\n        }\n      });\n    });\n  }\n\n  const combinedMedicationHistory: MedicationWithTypeDTO[] = chartDataFields\n    .flatMap((field) => {\n      const fieldData = historyData?.[field] || [];\n      return fieldData.map((medication: MedicationDTO) => ({\n        ...medication,\n        chartDataField: field,\n      }));\n    })\n    .sort((a, b) => {\n      const FALLBACK_DATE = 0; // move elements without date to the end of the list\n      const dateA = a?.intakeInfo.date ? new Date(a.intakeInfo.date) : FALLBACK_DATE;\n      const dateB = b?.intakeInfo.date ? new Date(b.intakeInfo.date) : FALLBACK_DATE;\n      return new Date(dateB).getTime() - new Date(dateA).getTime();\n    });\n\n  return {\n    isLoading,\n    medicationHistory: combinedMedicationHistory,\n    refetchHistory,\n  };\n};\n"]}