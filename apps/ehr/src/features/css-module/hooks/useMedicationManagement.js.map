{"version":3,"file":"useMedicationManagement.js","sourceRoot":"","sources":["useMedicationManagement.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateTime } from 'luxon';\nimport React, { useCallback, useMemo } from 'react';\nimport {\n  ExtendedMedicationDataForResponse,\n  MedicationData,\n  MedicationOrderStatusesType,\n  UpdateMedicationOrderInput,\n} from 'utils';\nimport { MedicationOrderType } from '../components/medication-administration/medication-editable-card/fieldsConfig';\nimport { statusTransitions } from '../components/medication-administration/medicationTypes';\nimport { useMedicationAPI } from './useMedicationOperations';\n\nexport const useMedicationManagement = (): {\n  medications: ExtendedMedicationDataForResponse[];\n  getMedicationById: (id: string) => ExtendedMedicationDataForResponse | undefined;\n  getAvailableStatuses: (currentStatus?: MedicationOrderStatusesType) => MedicationOrderStatusesType[];\n  isValidStatusTransition: (\n    currentStatus: MedicationOrderStatusesType,\n    newStatus: MedicationOrderStatusesType\n  ) => boolean;\n  pendingMedications: ExtendedMedicationDataForResponse[];\n  completedMedications: ExtendedMedicationDataForResponse[];\n  canEditMedication: (medication: ExtendedMedicationDataForResponse) => boolean;\n  warnings: (string | React.ReactElement)[];\n  getMedicationFieldValue: <Field extends keyof MedicationData>(\n    medication: MedicationData,\n    field: Field,\n    type?: string\n  ) => MedicationData[Field] | '';\n  loadMedications: () => Promise<void>;\n  updateMedication: (updatedMedication: UpdateMedicationOrderInput) => Promise<{\n    id: string;\n    message: string;\n  }>;\n  deleteMedication: (idToDelete: string) => Promise<void>;\n  getIsMedicationEditable: (type: MedicationOrderType, medication?: ExtendedMedicationDataForResponse) => boolean;\n} => {\n  const { medications, loadMedications, updateMedication, deleteMedication } = useMedicationAPI();\n  const getMedicationById = useCallback((id: string) => medications?.find((med) => med.id === id), [medications]);\n\n  const getIsMedicationEditable = (\n    type: MedicationOrderType,\n    medication?: ExtendedMedicationDataForResponse\n  ): boolean => {\n    return {\n      'order-new': true,\n      'order-edit': medication?.status === 'pending',\n      dispense: medication?.status === 'pending',\n      'dispense-not-administered': medication?.status === 'pending',\n    }[type];\n  };\n\n  const getAvailableStatuses = useCallback(\n    (currentStatus?: MedicationOrderStatusesType): MedicationOrderStatusesType[] => {\n      return statusTransitions[currentStatus as MedicationOrderStatusesType] || [];\n    },\n    []\n  );\n\n  const isValidStatusTransition = useCallback(\n    (currentStatus: MedicationOrderStatusesType, newStatus: MedicationOrderStatusesType): boolean => {\n      return getAvailableStatuses(currentStatus).includes(newStatus);\n    },\n    [getAvailableStatuses]\n  );\n\n  const pendingMedications = useMemo(() => medications?.filter?.((med) => med.status === 'pending'), [medications]);\n\n  const completedMedications = useMemo(() => medications?.filter?.((med) => med.status !== 'pending'), [medications]);\n\n  const formatDate = useCallback((dateString: string | undefined): string => {\n    if (!dateString) return '';\n    const date = DateTime.fromISO(dateString);\n    return date.isValid ? date.toFormat('yyyy-MM-dd') : '';\n  }, []);\n\n  const formatTime = useCallback((timeString: string | undefined): string => {\n    if (!timeString) return '';\n    const time = DateTime.fromFormat(timeString, 'h:mm a');\n    return time.isValid ? time.toFormat('HH:mm') : '';\n  }, []);\n\n  const canEditMedication = useCallback((medication: ExtendedMedicationDataForResponse): boolean => {\n    return medication.status === 'pending';\n  }, []);\n\n  const warnings = useMemo((): (string | React.ReactElement)[] => {\n    // TODO: add allergy warnings\n    return [];\n  }, []);\n\n  const getMedicationFieldValue = useCallback(\n    <Field extends keyof MedicationData>(\n      medication: MedicationData,\n      field: Field,\n      type?: string\n    ): MedicationData[Field] | '' => {\n      const value = medication[field];\n      if (type === 'date') {\n        return formatDate(value as string) as MedicationData[Field];\n      } else if (type === 'time') {\n        return formatTime(value as string) as MedicationData[Field];\n      }\n      return (value as MedicationData[Field]) || '';\n    },\n    [formatDate, formatTime]\n  );\n\n  return {\n    medications,\n    getMedicationById,\n    updateMedication,\n    deleteMedication,\n    getAvailableStatuses,\n    isValidStatusTransition,\n    pendingMedications,\n    completedMedications,\n    canEditMedication,\n    warnings,\n    getMedicationFieldValue,\n    loadMedications,\n    getIsMedicationEditable,\n  };\n};\n"]}