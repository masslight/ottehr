{"version":3,"file":"useMedicationOperations.js","sourceRoot":"","sources":["useMedicationOperations.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA6C;AAC7C,+BAKe;AACf,4CAA+G;AAU/G,IAAM,UAAU,GAAwC,EAAE,CAAC;AAEpD,IAAM,gBAAgB,GAAG;IACtB,IAAA,SAAS,GAAK,IAAA,oBAAY,EAAC,6BAAmB,EAAE,CAAC,WAAW,CAAC,CAAC,UAArD,CAAsD;IACvE,IAAM,WAAW,GAAG,IAAA,4BAAc,GAAE,CAAC;IAC7B,IAAa,2BAA2B,GAAK,IAAA,wCAA8B,GAAE,YAArC,CAAsC;IAEtF,IAAM,QAAQ,GAAyC,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,SAAS,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC;IAErG,IAAA,KAAmC,IAAA,gCAAsB,EAAC,QAAQ,CAAC,EAA3D,WAAW,UAAA,EAAE,SAAS,eAAqC,CAAC;IAE1E,IAAM,eAAe,GAAG;;;wBACf,qBAAM,WAAW,CAAC,iBAAiB,CAAC;wBACzC,QAAQ,EAAE,CAAC,+BAA+B,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;wBACrE,mEAAmE;wBACnE,KAAK,EAAE,KAAK;qBACb,CAAC,EAAA;wBAJF,sBAAO,SAIL,EAAC;;;SACJ,CAAC;IAEF,OAAO;QACL,WAAW,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,KAAI,UAAU;QAC9C,SAAS,WAAA;QACT,eAAe,EAAE,eAAe;QAChC,gBAAgB,EAAE,UAAO,iBAA6C;;;;4BACvD,qBAAM,2BAA2B,CAAC,iBAAiB,EAAE;4BAChE,SAAS,EAAE,eAAe;yBAC3B,CAAC,EAAA;;wBAFI,IAAI,GAAG,SAEX;wBACF,sBAAO,IAAI,EAAC;;;aACb;QACD,gBAAgB,EAAE,UAAO,UAAU;;;4BACjC,qBAAM,2BAA2B,CAC/B,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,EAC/C,EAAE,SAAS,EAAE,eAAe,EAAE,CAC/B,EAAA;;wBAHD,SAGC,CAAC;;;;aACH;KACF,CAAC;AACJ,CAAC,CAAC;AAlCW,QAAA,gBAAgB,oBAkC3B","sourcesContent":["import { useQueryClient } from 'react-query';\nimport {\n  ExtendedMedicationDataForResponse,\n  GetMedicationOrdersInput,\n  getSelectors,\n  UpdateMedicationOrderInput,\n} from 'utils';\nimport { useAppointmentStore, useCreateUpdateMedicationOrder, useGetMedicationOrders } from '../../../telemed';\n\ninterface MedicationAPI {\n  medications: ExtendedMedicationDataForResponse[];\n  isLoading: boolean;\n  loadMedications: () => Promise<void>;\n  updateMedication: (updatedMedication: UpdateMedicationOrderInput) => Promise<{ id: string; message: string }>;\n  deleteMedication: (idsToDelete: string) => Promise<void>;\n}\n\nconst emptyArray: ExtendedMedicationDataForResponse[] = [];\n\nexport const useMedicationAPI = (): MedicationAPI => {\n  const { encounter } = getSelectors(useAppointmentStore, ['encounter']);\n  const queryClient = useQueryClient();\n  const { mutateAsync: createUpdateMedicationOrder } = useCreateUpdateMedicationOrder();\n\n  const searchBy: GetMedicationOrdersInput['searchBy'] = { field: 'encounterId', value: encounter.id || '' };\n\n  const { data: medications, isLoading } = useGetMedicationOrders(searchBy);\n\n  const invalidateCache = async (): Promise<void> => {\n    return await queryClient.invalidateQueries({\n      queryKey: ['telemed-get-medication-orders', JSON.stringify(searchBy)],\n      // 'exact: false' is used for ignoring other cache keys (apiClient)\n      exact: false,\n    });\n  };\n\n  return {\n    medications: medications?.orders || emptyArray,\n    isLoading,\n    loadMedications: invalidateCache,\n    updateMedication: async (updatedMedication: UpdateMedicationOrderInput) => {\n      const data = await createUpdateMedicationOrder(updatedMedication, {\n        onSuccess: invalidateCache,\n      });\n      return data;\n    },\n    deleteMedication: async (idToDelete) => {\n      await createUpdateMedicationOrder(\n        { orderId: idToDelete, newStatus: 'cancelled' },\n        { onSuccess: invalidateCache }\n      );\n    },\n  };\n};\n"]}