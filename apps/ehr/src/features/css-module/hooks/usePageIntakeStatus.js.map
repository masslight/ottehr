{"version":3,"file":"usePageIntakeStatus.js","sourceRoot":"","sources":["usePageIntakeStatus.ts"],"names":[],"mappings":";;;AAAA,qDAA+C;AAExC,IAAM,mBAAmB,GAAG;IACjC,IAAM,QAAQ,GAAG,IAAA,8BAAW,GAAE,CAAC;IAE/B,mFAAmF;IACnF,IAAM,WAAW,GAAG,EAAc,CAAC;IAEnC,IAAM,cAAc,GAAG,UAAC,IAAY;QAClC,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACjC,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC;IAEF,IAAM,WAAW,GAAG,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAEtD,OAAO,EAAE,WAAW,aAAA,EAAE,WAAW,aAAA,EAAE,CAAC;AACtC,CAAC,CAAC;AAdW,QAAA,mBAAmB,uBAc9B","sourcesContent":["import { useLocation } from 'react-router-dom';\n\nexport const usePageIntakeStatus = (): { filledPages: string[]; currentPage: string } => {\n  const location = useLocation();\n\n  // TODO now mock data for filled pages (replace with actual state management later)\n  const filledPages = [] as string[];\n\n  const getCurrentPage = (path: string): string => {\n    const segments = path.split('/');\n    return segments[segments.length - 1];\n  };\n\n  const currentPage = getCurrentPage(location.pathname);\n\n  return { filledPages, currentPage };\n};\n"]}