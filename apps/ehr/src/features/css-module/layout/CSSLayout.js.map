{"version":3,"file":"CSSLayout.js","sourceRoot":"","sources":["CSSLayout.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+BAAsC;AACtC,qDAA0C;AAC1C,+BAA8E;AAC9E,4CAA4D;AAC5D,0FAA2F;AAC3F,6FAA4F;AAC5F,+CAA8C;AAC9C,qDAAoD;AACpD,iDAAgD;AAChD,sDAAqD;AACrD,uDAAsD;AAEtD,IAAM,WAAW,GAAwB;IACvC,OAAO,EAAE,MAAM;IACf,aAAa,EAAE,QAAQ;IACvB,SAAS,EAAE,OAAO;CACnB,CAAC;AAEF,IAAM,eAAe,GAAwB;IAC3C,OAAO,EAAE,MAAM;IACf,QAAQ,EAAE,CAAC;IACX,QAAQ,EAAE,QAAQ;CACnB,CAAC;AAEF,IAAM,mBAAmB,GAAwB;IAC/C,QAAQ,EAAE,CAAC;IACX,OAAO,EAAE,CAAC;IACV,IAAI,EAAE,CAAC;IACP,OAAO,EAAE,MAAM;IACf,aAAa,EAAE,QAAQ;IACvB,SAAS,EAAE,MAAM;CAClB,CAAC;AAEK,IAAM,SAAS,GAAa;IAC3B,IAAA,KAA2B,IAAA,uCAAmB,GAAE,EAA9C,SAAS,eAAA,EAAE,SAAS,eAA0B,CAAC;IACvD,IAAM,aAAa,GAAG,IAAA,cAAM,EAAC,IAAI,CAAC,CAAC;IAEnC,IAAA,kCAAwB,GAAE,CAAC;IAE3B,IAAA,2BAAY,EAAC;QACX,WAAW,EAAE,SAAS,CAAC,EAAG;QAC1B,SAAS,EAAE,UAAC,IAAI;YACd,uCAAmB,CAAC,QAAQ,CAAC,EAAE,SAAS,wBAAO,SAAS,GAAK,IAAI,CAAE,EAAE,CAAC,CAAC;YACvE,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;QAChC,CAAC;QACD,OAAO,EAAE,UAAC,KAAK;YACb,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;QACD,OAAO,EAAE,aAAa,CAAC,OAAO;QAC9B,iBAAiB,EAAE,IAAI;KACxB,CAAC,CAAC;IAEH,IAAM,yBAAyB,GAAG,IAAA,iCAAyB,EAAC,SAAS,CAAC,CAAC;IAEvE,IAAM,kBAAkB,GAAG,IAAA,kCAA0B,EAAC,SAAS,CAAC,CAAC;IAEjE,OAAO,CACL,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CACtB;MAAA,CAAC,eAAM,CAAC,AAAD,EACP;MAAA,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,CAC1B;QAAA,CAAC,iBAAO,CAAC,AAAD,EACR;QAAA,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,CAC9B;UAAA,CAAC,GAAG,CACF,KAAK,CAAC,CAAC;YACL,IAAI,EAAE,CAAC;YACP,SAAS,EAAE,MAAM;YACjB,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,QAAQ;YACvB,OAAO,EAAE,qBAAqB;SAC/B,CAAC,CAEF;YAAA,CAAC,yBAAyB,IAAI,kBAAkB,CAAC,CAAC,CAAC,CACjD,EACE;gBAAA,CAAC,iDAAuB,CAAC,AAAD,EACxB;gBAAA,CAAC,yBAAM,CAAC,AAAD,EACT;cAAA,GAAG,CACJ,CAAC,CAAC,CAAC,CACF,CAAC,qBAAS,CAAC,IAAI,CAAC,uEAAuE,CAAC,UAAU,EAAG,CACtG,CACH;UAAA,EAAE,GAAG,CACL;UAAA,CAAC,mCAAgB,CAAC,AAAD,EACnB;QAAA,EAAE,GAAG,CACP;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,GAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AApDW,QAAA,SAAS,aAoDpB;AAEK,IAAM,iBAAiB,GAAa,cAAM,OAAA,CAC/C,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CACtB;IAAA,CAAC,eAAM,CAAC,AAAD,EACP;IAAA,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,CAC1B;MAAA,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC,CAC9B;QAAA,CAAC,yBAAM,CAAC,AAAD,EACT;MAAA,EAAE,GAAG,CACP;IAAA,EAAE,GAAG,CACP;EAAA,EAAE,GAAG,CAAC,CACP,EATgD,CAShD,CAAC;AATW,QAAA,iBAAiB,qBAS5B","sourcesContent":["import React, { useRef } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { getAdmitterPractitionerId, getAttendingPractitionerId } from 'utils';\nimport { useResetAppointmentStore } from '../../../telemed';\nimport { useAppointmentStore } from '../../../telemed/state/appointment/appointment.store';\nimport { CommonLayoutBreadcrumbs } from '../components/breadcrumbs/CommonLayoutBreadcrumbs';\nimport { Header } from '../components/Header';\nimport { InfoAlert } from '../components/InfoAlert';\nimport { Sidebar } from '../components/Sidebar';\nimport { useChartData } from '../hooks/useChartData';\nimport { BottomNavigation } from './BottomNavigation';\n\nconst layoutStyle: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n  minHeight: '100vh',\n};\n\nconst mainBlocksStyle: React.CSSProperties = {\n  display: 'flex',\n  flexGrow: 1,\n  overflow: 'hidden',\n};\n\nconst contentWrapperStyle: React.CSSProperties = {\n  flexGrow: 1,\n  padding: 0,\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  overflowX: 'auto',\n};\n\nexport const CSSLayout: React.FC = () => {\n  const { encounter, chartData } = useAppointmentStore();\n  const isInitialLoad = useRef(true);\n\n  useResetAppointmentStore();\n\n  useChartData({\n    encounterId: encounter.id!,\n    onSuccess: (data) => {\n      useAppointmentStore.setState({ chartData: { ...chartData, ...data } });\n      isInitialLoad.current = false;\n    },\n    onError: (error) => {\n      console.error(error);\n    },\n    enabled: isInitialLoad.current,\n    shouldUpdateExams: true,\n  });\n\n  const assignedIntakePerformerId = getAdmitterPractitionerId(encounter);\n\n  const assignedProviderId = getAttendingPractitionerId(encounter);\n\n  return (\n    <div style={layoutStyle}>\n      <Header />\n      <div style={mainBlocksStyle}>\n        <Sidebar />\n        <div style={contentWrapperStyle}>\n          <div\n            style={{\n              flex: 1,\n              overflowY: 'auto',\n              display: 'flex',\n              flexDirection: 'column',\n              padding: '20px 20px 24px 20px',\n            }}\n          >\n            {assignedIntakePerformerId && assignedProviderId ? (\n              <>\n                <CommonLayoutBreadcrumbs />\n                <Outlet />\n              </>\n            ) : (\n              <InfoAlert text=\"Select an intake performer and a provider in order to begin charting.\" persistent />\n            )}\n          </div>\n          <BottomNavigation />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const CSSSettingsLayout: React.FC = () => (\n  <div style={layoutStyle}>\n    <Header />\n    <div style={mainBlocksStyle}>\n      <div style={contentWrapperStyle}>\n        <Outlet />\n      </div>\n    </div>\n  </div>\n);\n"]}