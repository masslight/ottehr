{"version":3,"file":"Examination.js","sourceRoot":"","sources":["Examination.tsx"],"names":[],"mappings":";;;AAAA,0CAA2C;AAC3C,+BAAkC;AAClC,+BAAqE;AACrE,4CAAkE;AAClE,mEAAkE;AAClE,qEAI+C;AAC/C,uEAAsE;AAE/D,IAAM,WAAW,GAAO;IACrB,IAAuB,UAAU,GAAK,IAAA,wCAA8B,GAAE,sBAArC,CAAsC;IAE/E,OAAO,CACL,CAAC,cAAG,CACF,EAAE,CAAC,CAAC;YACF,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,QAAQ;YACvB,GAAG,EAAE,CAAC;SACP,CAAC,CAEF;MAAA,CAAC,UAAU,CAAC,CAAC,CAAC,CACZ,CAAC,2BAAY,CAAC,AAAD,EAAG,CACjB,CAAC,CAAC,CAAC,CACF,CAAC,gBAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAChB;UAAA,CAAC,qBAAS,CAAC,KAAK,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC,KAAK,CAAC,EAC5D;UAAA,CAAC,4BAAoB,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,CAClC,CAAC,0CAA4B,CAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,CACV,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACpE,QAAQ,CAAC,CAAC,IAAI,CAAC,CACf,cAAc,CAAC,CACb,CAAC,8BAAgB,CAAyB,IAAI,CAAC,CAAC,UAAG,IAAI,aAAoC,CAAC,EAC9F,CAAC,CACD,IAAI,CAAC,CAAC;oBACJ;wBACE,MAAM,EAAE,CAAC,+BAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAG;wBACxD,QAAQ,EAAE,CAAC,+BAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,EAAG;qBAC7D;iBACF,CAAC,EACF,CACH,EAfmC,CAenC,CAAC,CACJ;QAAA,EAAE,gBAAK,CAAC,CACT,CACH;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,WAAW,eAoCtB","sourcesContent":["import { Box, Stack } from '@mui/material';\nimport React, { FC } from 'react';\nimport { IN_PERSON_EXAM_CARDS, InPersonExamCardsNames } from 'utils';\nimport { useGetAppointmentAccessibility } from '../../../telemed';\nimport { PageTitle } from '../../../telemed/components/PageTitle';\nimport {\n  CollapsibleExamCardContainer,\n  ExamCommentField,\n  ExamFieldsFactory,\n} from '../../../telemed/features/appointment';\nimport { ExamReadOnly } from '../components/examination/ExamReadOnly';\n\nexport const Examination: FC = () => {\n  const { isAppointmentReadOnly: isReadOnly } = useGetAppointmentAccessibility();\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 1,\n      }}\n    >\n      {isReadOnly ? (\n        <ExamReadOnly />\n      ) : (\n        <Stack spacing={1}>\n          <PageTitle label=\"Examination\" showIntakeNotesButton={false} />\n          {IN_PERSON_EXAM_CARDS.map((card) => (\n            <CollapsibleExamCardContainer\n              key={card}\n              label={String(card).charAt(0).toUpperCase() + String(card).slice(1)}\n              cardName={card}\n              rightComponent={\n                <ExamCommentField<InPersonExamCardsNames> name={`${card}-comment` as InPersonExamCardsNames} />\n              }\n              grid={[\n                {\n                  Normal: <ExamFieldsFactory card={card} group=\"normal\" />,\n                  Abnormal: <ExamFieldsFactory card={card} group=\"abnormal\" />,\n                },\n              ]}\n            />\n          ))}\n        </Stack>\n      )}\n    </Box>\n  );\n};\n"]}