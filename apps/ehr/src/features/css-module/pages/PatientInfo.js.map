{"version":3,"file":"PatientInfo.js","sourceRoot":"","sources":["PatientInfo.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAkD;AAClD,+BAA0B;AAC1B,qDAA6C;AAC7C,+BAA8D;AAC9D,mEAAkE;AAClE,4CAAuD;AACvD,mEAAkE;AAClE,qDAAoD;AACpD,8EAAyE;AACzE,8EAAyE;AACzE,8EAA6E;AAC7E,wEAAuE;AACvE,0EAAyE;AACzE,oFAA+E;AAC/E,0DAAyD;AAMlD,IAAM,WAAW,GAA+B;;IAC7C,IAAI,aAAa,GAAK,IAAA,4BAAS,GAAE,GAAhB,CAAiB;IACpC,IAAA,KAIF,IAAA,+BAAc,EAAC,aAAa,CAAC,EAH/B,iBAAqC,EAAxB,WAAW,iBAAA,EAAE,SAAS,eAAA,EACnC,SAAS,eAAA,EACT,KAAK,WAC0B,CAAC;IAE1B,IAAA,kBAAkB,GAAK,IAAA,2BAAY,EAAC,6BAAmB,EAAE,CAAC,oBAAoB,CAAC,CAAC,mBAA9D,CAA+D;IAEzF,oJAAoJ;IACpJ,IAAM,UAAU,GAAG,IAAA,6BAAa,EAAC;QAC/B,WAAW,EAAE,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,EAAE,mCAAI,EAAE;KACjC,CAAC,CAAC;IAEH,IAAM,YAAY,GAAG,IAAA,iCAAe,EAAC;QACnC,WAAW,EAAE,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,EAAE,mCAAI,EAAE;KACjC,CAAC,CAAC;IAEH,IAAM,eAAe,GAAG,UAAO,WAAiC;;;wBAC9D,qBAAM,UAAU,CAAC,WAAW,CAAC,EAAA;;oBAA7B,SAA6B,CAAC;oBAC9B,qBAAM,sBAAsB,EAAE,EAAA;;oBAA9B,SAA8B,CAAC;;;;SAChC,CAAC;IAEF,IAAM,iBAAiB,GAAG,UAAO,WAAiC;;;wBAChE,qBAAM,YAAY,CAAC,WAAW,CAAC,EAAA;;oBAA/B,SAA+B,CAAC;oBAChC,qBAAM,sBAAsB,EAAE,EAAA;;oBAA9B,SAA8B,CAAC;;;;SAChC,CAAC;IAEI,IAAA,KAIF,IAAA,2BAAY,EAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,EAAE,CAAC,EAHvB,eAAe,UAAA,EACV,sBAAsB,eAAA,EACxB,sBAAsB,aACF,CAAC;IAEhC,IAAI,SAAS,IAAI,kBAAkB,IAAI,sBAAsB;QAAE,OAAO,CAAC,qBAAS,CAAC,AAAD,EAAG,CAAC;IACpF,IAAI,KAAK;QAAE,OAAO,CAAC,qBAAU,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,qBAAU,CAAC,CAAC;IAClE,IAAI,CAAC,WAAW;QAAE,OAAO,CAAC,qBAAU,CAAC,iBAAiB,EAAE,qBAAU,CAAC,CAAC;IAEpE,OAAO,CACL,CAAC,gBAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAChB;MAAA,CAAC,qBAAS,CAAC,KAAK,CAAC,cAAc,EAC/B;MAAA,CAAC,yBAAe,CAAC,AAAD,EAChB;MAAA,CAAC,2BAAiB,CAChB,eAAe,CAAC,CAAC,eAAe,CAAC,CACjC,iBAAiB,CAAC,CAAC,iBAAiB,CAAC,CACrC,UAAU,CAAC,CAAC,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAG,uBAAe,CAAC,WAAW,CAAC,mCAAI,EAAE,CAAC,CACjE,aAAa,CAAC,CAAC,EAAE,CAAC,EAEpB;MAAA,CAAC,yBAAe,CAAC,AAAD,EAClB;IAAA,EAAE,gBAAK,CAAC,CACT,CAAC;AACJ,CAAC,CAAC;AApDW,QAAA,WAAW,eAoDtB","sourcesContent":["import { Stack, Typography } from '@mui/material';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { VitalFieldNames, VitalsObservationDTO } from 'utils';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../telemed';\nimport { PageTitle } from '../../../telemed/components/PageTitle';\nimport { CSSLoader } from '../components/CSSLoader';\nimport GeneralInfoCard from '../components/patient-info/GeneralInfoCard';\nimport VitalsNotesCard from '../components/patient-info/VitalsNotesCard';\nimport { useDeleteVitals } from '../components/vitals/hooks/useDeleteVitals';\nimport { useGetVitals } from '../components/vitals/hooks/useGetVitals';\nimport { useSaveVitals } from '../components/vitals/hooks/useSaveVitals';\nimport VitalsWeightsCard from '../components/vitals/weights/VitalsWeightsCard';\nimport { useAppointment } from '../hooks/useAppointment';\n\ninterface PatientInfoProps {\n  appointmentID?: string;\n}\n\nexport const PatientInfo: React.FC<PatientInfoProps> = () => {\n  const { id: appointmentID } = useParams();\n  const {\n    resources: { appointment, encounter },\n    isLoading,\n    error,\n  } = useAppointment(appointmentID);\n\n  const { isChartDataLoading } = getSelectors(useAppointmentStore, ['isChartDataLoading']);\n\n  // todo: create a component so that this logic can be shared across this and PatientVitals page and anywhere else that needs this same functionality\n  const saveVitals = useSaveVitals({\n    encounterId: encounter?.id ?? '',\n  });\n\n  const deleteVitals = useDeleteVitals({\n    encounterId: encounter?.id ?? '',\n  });\n\n  const handleSaveVital = async (vitalEntity: VitalsObservationDTO): Promise<void> => {\n    await saveVitals(vitalEntity);\n    await refetchEncounterVitals();\n  };\n\n  const handleDeleteVital = async (vitalEntity: VitalsObservationDTO): Promise<void> => {\n    await deleteVitals(vitalEntity);\n    await refetchEncounterVitals();\n  };\n\n  const {\n    data: encounterVitals,\n    isLoading: encounterVitalsLoading,\n    refetch: refetchEncounterVitals,\n  } = useGetVitals(encounter?.id);\n\n  if (isLoading || isChartDataLoading || encounterVitalsLoading) return <CSSLoader />;\n  if (error) return <Typography>Error: {error.message}</Typography>;\n  if (!appointment) return <Typography>No data available</Typography>;\n\n  return (\n    <Stack spacing={1}>\n      <PageTitle label=\"General Info\" />\n      <GeneralInfoCard />\n      <VitalsWeightsCard\n        handleSaveVital={handleSaveVital}\n        handleDeleteVital={handleDeleteVital}\n        currentObs={encounterVitals?.[VitalFieldNames.VitalWeight] ?? []}\n        historicalObs={[]}\n      />\n      <VitalsNotesCard />\n    </Stack>\n  );\n};\n"]}