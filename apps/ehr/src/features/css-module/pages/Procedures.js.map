{"version":3,"file":"Procedures.js","sourceRoot":"","sources":["Procedures.tsx"],"names":[],"mappings":";;AAcA,6BAyGC;AAvHD,+CAA8C;AAC9C,0CAA6F;AAC7F,sCAAyC;AACzC,+BAAiC;AACjC,+BAA8C;AAC9C,qDAA0D;AAC1D,8DAA6D;AAC7D,uCAAiG;AACjG,8DAA6D;AAC7D,+BAAmF;AACnF,qDAAoD;AACpD,wDAA0D;AAC1D,kDAAmD;AAEnD,SAAwB,UAAU;;IAChC,IAAM,QAAQ,GAAG,IAAA,8BAAW,GAAE,CAAC;IACvB,IAAI,aAAa,GAAK,IAAA,4BAAS,GAAE,GAAhB,CAAiB;IACpC,IAAA,KAA4D,IAAA,oBAAY,EAAC,6BAAmB,EAAE;QAClG,WAAW;QACX,oBAAoB;QACpB,aAAa;QACb,WAAW;KACZ,CAAC,EALM,SAAS,eAAA,EAAE,kBAAkB,wBAAA,EAAE,WAAW,iBAAA,EAAE,SAAS,eAK3D,CAAC;IACH,IAAM,cAAc,GAAG,IAAA,eAAO,EAAC,cAAM,OAAA,WAAW,IAAI,IAAA,sBAAc,EAAC,WAAW,EAAE,SAAS,CAAC,EAArD,CAAqD,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC,CAAC;IACtH,IAAM,wBAAwB,GAAG,IAAA,wCAA8B,GAAE,CAAC;IAC1D,IAAA,GAAG,GAAK,IAAA,8BAAe,GAAE,IAAtB,CAAuB;IAClC,IAAM,UAAU,GAAG,IAAA,eAAO,EAAC;QACzB,IAAI,GAAG,EAAE,CAAC;YACR,OAAO,cAAc,KAAK,WAAW,CAAC;QACxC,CAAC;QACD,OAAO,wBAAwB,CAAC,MAAM,KAAK,oCAA4B,CAAC,QAAQ,CAAC;IACnF,CAAC,EAAE,CAAC,GAAG,EAAE,cAAc,EAAE,wBAAwB,CAAC,MAAM,CAAC,CAAC,CAAC;IAE3D,IAAM,mBAAmB,GAAG;QAC1B,QAAQ,CAAC,qBAAc,aAAa,cAAI,uBAAW,CAAC,cAAc,CAAE,CAAC,CAAC;IACxE,CAAC,CAAC;IACF,IAAM,gBAAgB,GAAG,UAAC,WAA+B;QACvD,QAAQ,CAAC,qBAAc,aAAa,yBAAe,WAAW,CAAE,CAAC,CAAC;IACpE,CAAC,CAAC;IACF,IAAI,kBAAkB;QAAE,OAAO,CAAC,qBAAS,CAAC,AAAD,EAAG,CAAC;IAC7C,OAAO,CACL,EACE;MAAA,CAAC,YAAG,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAC3E;QAAA,CAAC,qBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC,KAAK,CAAC,EAC3D;QAAA,CAAC,6BAAa,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,mBAAmB,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAO,CAAC,AAAD,EAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAC5G;;QACF,EAAE,6BAAa,CACjB;MAAA,EAAE,YAAG,CACL;MAAA,CAAC,uBAAa,CACZ;QAAA,CAAC,gBAAK,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAC3B;UAAA,CAAC,oBAAS,CACR;YAAA,CAAC,mBAAQ,CACP;cAAA,CAAC,oBAAS,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAC9B;gBAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,SAAS,EAAE,qBAAU,CAChF;cAAA,EAAE,oBAAS,CACX;cAAA,CAAC,oBAAS,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAC9B;gBAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,qBAAU,CACzE;cAAA,EAAE,oBAAS,CACX;cAAA,CAAC,oBAAS,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAC9B;gBAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,aAAa,EAAE,qBAAU,CACpF;cAAA,EAAE,oBAAS,CACb;YAAA,EAAE,mBAAQ,CACZ;UAAA,EAAE,oBAAS,CACX;UAAA,CAAC,oBAAS,CACR;YAAA,CAAC,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,0CAAE,GAAG,CAAC,UAAC,SAAS;;YACpC,IAAM,kBAAkB,GACtB,SAAS,CAAC,kBAAkB,IAAI,IAAI,CAAC,CAAC,CAAC,gBAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACpG,OAAO,CACL,CAAC,mBAAQ,CACP,EAAE,CAAC,CAAC,EAAE,iBAAiB,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAClE,OAAO,CAAC,CAAC,cAAM,OAAA,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,EAAtC,CAAsC,CAAC,CACtD,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAE1B;kBAAA,CAAC,oBAAS,CACR;oBAAA,CAAC,cAAK,CACJ;sBAAA,CAAC,MAAA,SAAS,CAAC,QAAQ,0CAAE,GAAG,CAAC,UAAC,OAAO;oBAC/B,OAAO,CACL,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CACtD;4BAAA,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CACjC;0BAAA,EAAE,qBAAU,CAAC,CACd,CAAC;gBACJ,CAAC,CAAC,CACF;sBAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,qBAAU,CACjG;oBAAA,EAAE,cAAK,CACT;kBAAA,EAAE,oBAAS,CACX;kBAAA,CAAC,oBAAS,CACR;oBAAA,CAAC,cAAK,CACJ;sBAAA,CAAC,MAAA,SAAS,CAAC,SAAS,0CAAE,GAAG,CAAC,UAAC,SAAS;oBAClC,OAAO,CACL,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CACxD;4BAAA,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CACrC;0BAAA,EAAE,qBAAU,CAAC,CACd,CAAC;gBACJ,CAAC,CAAC,CACJ;oBAAA,EAAE,cAAK,CACT;kBAAA,EAAE,oBAAS,CACX;kBAAA,CAAC,oBAAS,CACR;oBAAA,CAAC,cAAK,CACJ;sBAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CACnC;wBAAA,CAAC,kBAAkB,IAAI,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,SAAS,CAC7F;sBAAA,EAAE,qBAAU,CACZ;sBAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,qBAAU,CAChG;oBAAA,EAAE,cAAK,CACT;kBAAA,EAAE,oBAAS,CACb;gBAAA,EAAE,mBAAQ,CAAC,CACZ,CAAC;QACJ,CAAC,CAAC,CACF;YAAA,CAAC,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,KAAI,IAAI,IAAI,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,CAAC,MAAM,MAAK,CAAC,CAAC,CAAC,CAAC,CACrE,CAAC,mBAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,iBAAiB,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC,CACvD;gBAAA,CAAC,oBAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CACnC;kBAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC,aAAa,EAAE,qBAAU,CACrF;gBAAA,EAAE,oBAAS,CACb;cAAA,EAAE,mBAAQ,CAAC,CACZ,CAAC,CAAC,CAAC,SAAS,CACf;UAAA,EAAE,oBAAS,CACb;QAAA,EAAE,gBAAK,CACT;MAAA,EAAE,uBAAa,CACjB;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC","sourcesContent":["import AddIcon from '@mui/icons-material/Add';\nimport { Table, TableBody, TableCell, TableHead, TableRow, Typography } from '@mui/material';\nimport { Box, Stack } from '@mui/system';\nimport { DateTime } from 'luxon';\nimport { ReactElement, useMemo } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { RoundedButton } from 'src/components/RoundedButton';\nimport { AccordionCard, useAppointmentStore, useGetAppointmentAccessibility } from 'src/telemed';\nimport { PageTitle } from 'src/telemed/components/PageTitle';\nimport { getSelectors, getVisitStatus, TelemedAppointmentStatusEnum } from 'utils';\nimport { CSSLoader } from '../components/CSSLoader';\nimport { useFeatureFlags } from '../context/featureFlags';\nimport { ROUTER_PATH } from '../routing/routesCSS';\n\nexport default function Procedures(): ReactElement {\n  const navigate = useNavigate();\n  const { id: appointmentId } = useParams();\n  const { chartData, isChartDataLoading, appointment, encounter } = getSelectors(useAppointmentStore, [\n    'chartData',\n    'isChartDataLoading',\n    'appointment',\n    'encounter',\n  ]);\n  const inPersonStatus = useMemo(() => appointment && getVisitStatus(appointment, encounter), [appointment, encounter]);\n  const appointmentAccessibility = useGetAppointmentAccessibility();\n  const { css } = useFeatureFlags();\n  const isReadOnly = useMemo(() => {\n    if (css) {\n      return inPersonStatus === 'completed';\n    }\n    return appointmentAccessibility.status === TelemedAppointmentStatusEnum.complete;\n  }, [css, inPersonStatus, appointmentAccessibility.status]);\n\n  const onNewProcedureClick = (): void => {\n    navigate(`/in-person/${appointmentId}/${ROUTER_PATH.PROCEDURES_NEW}`);\n  };\n  const onProcedureClick = (procedureId: string | undefined): void => {\n    navigate(`/in-person/${appointmentId}/procedures/${procedureId}`);\n  };\n  if (isChartDataLoading) return <CSSLoader />;\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n        <PageTitle label=\"Procedures\" showIntakeNotesButton={false} />\n        <RoundedButton variant=\"contained\" onClick={onNewProcedureClick} startIcon={<AddIcon />} disabled={isReadOnly}>\n          Procedure\n        </RoundedButton>\n      </Box>\n      <AccordionCard>\n        <Table sx={{ width: '100%' }}>\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ width: '55%' }}>\n                <Typography sx={{ fontSize: '14px', fontWeight: '500' }}>Procedure</Typography>\n              </TableCell>\n              <TableCell sx={{ width: '25%' }}>\n                <Typography sx={{ fontSize: '14px', fontWeight: '500' }}>Dx</Typography>\n              </TableCell>\n              <TableCell sx={{ width: '20%' }}>\n                <Typography sx={{ fontSize: '14px', fontWeight: '500' }}>Documented by</Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {chartData?.procedures?.map((procedure) => {\n              const documentedDateTime =\n                procedure.documentedDateTime != null ? DateTime.fromISO(procedure.documentedDateTime) : undefined;\n              return (\n                <TableRow\n                  sx={{ '&:last-child td': { borderBottom: 0 }, cursor: 'pointer' }}\n                  onClick={() => onProcedureClick(procedure.resourceId)}\n                  key={procedure.resourceId}\n                >\n                  <TableCell>\n                    <Stack>\n                      {procedure.cptCodes?.map((cptCode) => {\n                        return (\n                          <Typography sx={{ fontSize: '14px' }} key={cptCode.code}>\n                            {cptCode.code}-{cptCode.display}\n                          </Typography>\n                        );\n                      })}\n                      <Typography sx={{ fontSize: '14px', color: '#00000099' }}>{procedure.procedureType}</Typography>\n                    </Stack>\n                  </TableCell>\n                  <TableCell>\n                    <Stack>\n                      {procedure.diagnoses?.map((diagnosis) => {\n                        return (\n                          <Typography sx={{ fontSize: '14px' }} key={diagnosis.code}>\n                            {diagnosis.code}-{diagnosis.display}\n                          </Typography>\n                        );\n                      })}\n                    </Stack>\n                  </TableCell>\n                  <TableCell>\n                    <Stack>\n                      <Typography sx={{ fontSize: '14px' }}>\n                        {documentedDateTime != null ? documentedDateTime.toFormat('MM/dd/yyyy HH:mm a') : undefined}\n                      </Typography>\n                      <Typography sx={{ fontSize: '14px', color: '#00000099' }}>{procedure.documentedBy}</Typography>\n                    </Stack>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n            {chartData?.procedures == null || chartData?.procedures.length === 0 ? (\n              <TableRow sx={{ '&:last-child td': { borderBottom: 0 } }}>\n                <TableCell colSpan={3} align=\"center\">\n                  <Typography sx={{ fontSize: '14px', color: '#00000099' }}>No procedures</Typography>\n                </TableCell>\n              </TableRow>\n            ) : undefined}\n          </TableBody>\n        </Table>\n      </AccordionCard>\n    </>\n  );\n}\n"]}