{"version":3,"file":"ProceduresNew.js","sourceRoot":"","sources":["ProceduresNew.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Autocomplete,\n  Backdrop,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  InputLabel,\n  MenuItem,\n  Radio,\n  RadioGroup,\n  Select,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { Box, Stack, useTheme } from '@mui/system';\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\nimport { DatePicker, LocalizationProvider, TimePicker } from '@mui/x-date-pickers-pro';\nimport Oystehr from '@oystehr/sdk';\nimport { ValueSet } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { enqueueSnackbar } from 'notistack';\nimport { ReactElement, useEffect, useMemo, useState } from 'react';\nimport { useQuery, UseQueryResult } from 'react-query';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { RoundedButton } from 'src/components/RoundedButton';\nimport { CPT_TOOLTIP_PROPS, TooltipWrapper } from 'src/components/WithTooltip';\nimport { QUERY_STALE_TIME } from 'src/constants';\nimport { useApiClients } from 'src/hooks/useAppClients';\nimport {\n  AccordionCard,\n  ActionsList,\n  DeleteIconButton,\n  useAppointmentStore,\n  useDebounce,\n  useDeleteChartData,\n  useGetAppointmentAccessibility,\n  useGetIcd10Search,\n  useSaveChartData,\n} from 'src/telemed';\nimport { PageTitle } from 'src/telemed/components/PageTitle';\nimport { DiagnosesField } from 'src/telemed/features/appointment/AssessmentTab';\nimport {\n  BODY_SIDES_VALUE_SET_URL,\n  BODY_SITES_VALUE_SET_URL,\n  COMPLICATIONS_VALUE_SET_URL,\n  CPTCodeDTO,\n  DiagnosisDTO,\n  getSelectors,\n  getVisitStatus,\n  IcdSearchResponse,\n  MEDICATIONS_USED_VALUE_SET_URL,\n  PATIENT_RESPONSES_VALUE_SET_URL,\n  POST_PROCEDURE_INSTRUCTIONS_VALUE_SET_URL,\n  PROCEDURE_TYPE_CPT_EXTENSION_URL,\n  PROCEDURE_TYPES_VALUE_SET_URL,\n  REQUIRED_FIELD_ERROR_MESSAGE,\n  SUPPLIES_VALUE_SET_URL,\n  TECHNIQUES_VALUE_SET_URL,\n  TelemedAppointmentStatusEnum,\n  TIME_SPENT_VALUE_SET_URL,\n} from 'utils';\nimport { InfoAlert } from '../components/InfoAlert';\nimport { useFeatureFlags } from '../context/featureFlags';\nimport { ROUTER_PATH } from '../routing/routesCSS';\n\nconst OTHER = 'Other';\nconst PERFORMED_BY = ['Healthcare staff', 'Provider', 'Both'];\nconst SPECIMEN_SENT = ['Yes', 'No'];\nconst DOCUMENTED_BY = ['Provider', 'Healthcare staff'];\n\ninterface PageState {\n  consentObtained?: boolean;\n  procedureType?: string;\n  cptCodes?: CPTCodeDTO[];\n  diagnoses?: DiagnosisDTO[];\n  procedureDate?: DateTime | null;\n  procedureTime?: DateTime | null;\n  performerType?: string;\n  medicationUsed?: string;\n  bodySite?: string;\n  otherBodySite?: string;\n  bodySide?: string;\n  technique?: string;\n  suppliesUsed?: string;\n  otherSuppliesUsed?: string;\n  procedureDetails?: string;\n  specimenSent?: boolean;\n  complications?: string;\n  otherComplications?: string;\n  patientResponse?: string;\n  postInstructions?: string;\n  otherPostInstructions?: string;\n  timeSpent?: string;\n  documentedBy?: string;\n}\n\ninterface ProcedureType {\n  name: string;\n  cpt?: {\n    code: string;\n    display: string;\n  };\n}\n\ninterface SelectOptions {\n  procedureTypes: ProcedureType[];\n  medicationsUsed: string[];\n  bodySites: string[];\n  bodySides: string[];\n  techniques: string[];\n  supplies: string[];\n  complications: string[];\n  patientResponses: string[];\n  postProcedureInstructions: string[];\n  timeSpent: string[];\n}\n\nexport default function ProceduresNew(): ReactElement {\n  const navigate = useNavigate();\n  const theme = useTheme();\n  const { id: appointmentId, procedureId } = useParams();\n  const { oystehr } = useApiClients();\n  const { data: selectOptions, isLoading: isSelectOptionsLoading } = useSelectOptions(oystehr);\n  const { chartData, setPartialChartData, appointment, encounter } = getSelectors(useAppointmentStore, [\n    'chartData',\n    'setPartialChartData',\n    'appointment',\n    'encounter',\n  ]);\n  const inPersonStatus = useMemo(() => appointment && getVisitStatus(appointment, encounter), [appointment, encounter]);\n  const appointmentAccessibility = useGetAppointmentAccessibility();\n  const { css } = useFeatureFlags();\n  const isReadOnly = useMemo(() => {\n    if (css) {\n      return inPersonStatus === 'completed';\n    }\n    return appointmentAccessibility.status === TelemedAppointmentStatusEnum.complete;\n  }, [css, inPersonStatus, appointmentAccessibility.status]);\n  const chartCptCodes = chartData?.cptCodes || [];\n  const chartDiagnoses = chartData?.diagnosis || [];\n  const chartProcedures = chartData?.procedures || [];\n  const { mutateAsync: saveChartData } = useSaveChartData();\n  const { mutateAsync: deleteChartData } = useDeleteChartData();\n\n  const [state, setState] = useState<PageState>({\n    procedureDate: DateTime.now(),\n    procedureTime: DateTime.now(),\n  });\n  const [saveInProgress, setSaveInProgress] = useState<boolean>(false);\n\n  const updateState = (stateMutator: (state: PageState) => void): void => {\n    stateMutator(state);\n    setState({ ...state });\n  };\n\n  const [initialValuesSet, setInitialValuesSet] = useState<boolean>(false);\n  useEffect(() => {\n    const procedure = chartData?.procedures?.find((procedure) => procedure.resourceId === procedureId);\n    if (procedure == null || initialValuesSet || isSelectOptionsLoading) {\n      return;\n    }\n    const procedureDateTime =\n      procedure.procedureDateTime != null ? DateTime.fromISO(procedure.procedureDateTime) : undefined;\n    setState({\n      procedureType: procedure.procedureType,\n      cptCodes: procedure.cptCodes,\n      diagnoses: procedure.diagnoses,\n      procedureDate: procedureDateTime,\n      procedureTime: procedureDateTime,\n      performerType: procedure.performerType,\n      medicationUsed: procedure.medicationUsed,\n      bodySite: getPredefinedValueOrOther(procedure.bodySite, selectOptions?.bodySites),\n      otherBodySite: getPredefinedValueIfOther(procedure.bodySite, selectOptions?.bodySites),\n      bodySide: procedure.bodySide,\n      technique: procedure.technique,\n      suppliesUsed: getPredefinedValueOrOther(procedure.suppliesUsed, selectOptions?.supplies),\n      otherSuppliesUsed: getPredefinedValueIfOther(procedure.suppliesUsed, selectOptions?.supplies),\n      procedureDetails: procedure.procedureDetails,\n      specimenSent: procedure.specimenSent,\n      complications: getPredefinedValueOrOther(procedure.complications, selectOptions?.complications),\n      otherComplications: getPredefinedValueIfOther(procedure.complications, selectOptions?.complications),\n      patientResponse: procedure.patientResponse,\n      postInstructions: getPredefinedValueOrOther(procedure.postInstructions, selectOptions?.postProcedureInstructions),\n      otherPostInstructions: getPredefinedValueIfOther(\n        procedure.postInstructions,\n        selectOptions?.postProcedureInstructions\n      ),\n      timeSpent: procedure.timeSpent,\n      documentedBy: procedure.documentedBy,\n      consentObtained: procedure.consentObtained,\n    });\n    setInitialValuesSet(true);\n  }, [procedureId, chartData?.procedures, setState, initialValuesSet, isSelectOptionsLoading, selectOptions]);\n\n  const onCancel = (): void => {\n    navigate(`/in-person/${appointmentId}/${ROUTER_PATH.PROCEDURES}`);\n  };\n\n  const onSave = async (): Promise<void> => {\n    setSaveInProgress(true);\n    try {\n      const saveCptAndDiagnosesResponse = await saveChartData({\n        cptCodes: state.cptCodes?.filter((cptCode) => cptCode.resourceId == null) ?? [],\n        diagnosis: state.diagnoses?.filter((diagnosis) => diagnosis.resourceId == null) ?? [],\n      });\n      const savedCptCodes = saveCptAndDiagnosesResponse.chartData?.cptCodes;\n      if (savedCptCodes) {\n        setPartialChartData({\n          cptCodes: [...chartCptCodes, ...savedCptCodes],\n        });\n      }\n      const savedDiagnoses = saveCptAndDiagnosesResponse.chartData?.diagnosis;\n      if (savedDiagnoses) {\n        setPartialChartData({\n          diagnosis: [...chartDiagnoses, ...savedDiagnoses],\n        });\n      }\n      const cptCodesToUse = [\n        ...(savedCptCodes ?? []),\n        ...(state.cptCodes?.filter((cptCode) => cptCode.resourceId != null) ?? []),\n      ];\n      const diagnosesToUse = [\n        ...(savedDiagnoses ?? []),\n        ...(state.diagnoses?.filter((diagnosis) => diagnosis.resourceId != null) ?? []),\n      ];\n      const saveProcedureResponse = await saveChartData({\n        procedures: [\n          {\n            resourceId: procedureId,\n            procedureType: state.procedureType,\n            cptCodes: cptCodesToUse,\n            diagnoses: diagnosesToUse,\n            procedureDateTime: state.procedureDate\n              ?.set({ hour: state.procedureTime?.hour, minute: state.procedureTime?.minute })\n              ?.toUTC()\n              ?.toString(),\n            documentedDateTime: DateTime.now().toUTC().toString(),\n            performerType: state.performerType,\n            medicationUsed: state.medicationUsed,\n            bodySite: state.bodySite !== OTHER ? state.bodySite : state.otherBodySite?.trim(),\n            bodySide: state.bodySide,\n            technique: state.technique,\n            suppliesUsed: state.suppliesUsed !== OTHER ? state.suppliesUsed : state.otherSuppliesUsed?.trim(),\n            procedureDetails: state.procedureDetails,\n            specimenSent: state.specimenSent,\n            complications: state.complications !== OTHER ? state.complications : state.otherComplications?.trim(),\n            patientResponse: state.patientResponse,\n            postInstructions:\n              state.postInstructions !== OTHER ? state.postInstructions : state.otherPostInstructions?.trim(),\n            timeSpent: state.timeSpent,\n            documentedBy: state.documentedBy,\n            consentObtained: state.consentObtained,\n          },\n        ],\n      });\n      const oldProcedure = chartData?.procedures?.find((procedure) => procedure.resourceId === procedureId);\n      if (oldProcedure != null) {\n        await deleteChartData({\n          cptCodes: oldProcedure.cptCodes?.filter(\n            (cptCode) => cptCodesToUse.find((cptCodeToUse) => cptCodeToUse.resourceId == cptCode.resourceId) == null\n          ),\n          diagnosis: oldProcedure.diagnoses?.filter(\n            (diagnosis) =>\n              diagnosesToUse.find((diagnosisToUse) => diagnosisToUse.resourceId == diagnosis.resourceId) == null\n          ),\n        });\n      }\n      const savedProcedure = saveProcedureResponse.chartData?.procedures?.[0];\n      if (savedProcedure) {\n        setPartialChartData({\n          procedures: [\n            ...chartProcedures.filter((procedure) => procedure.resourceId !== procedureId),\n            {\n              ...savedProcedure,\n              cptCodes: cptCodesToUse,\n              diagnoses: diagnosesToUse,\n            },\n          ],\n        });\n      }\n      setSaveInProgress(false);\n      enqueueSnackbar('Procedure saved!', { variant: 'success' });\n      navigate(`/in-person/${appointmentId}/${ROUTER_PATH.PROCEDURES}`);\n    } catch {\n      setSaveInProgress(false);\n      enqueueSnackbar('An error has occurred while saving procedure. Please try again.', { variant: 'error' });\n    }\n  };\n\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');\n  const { isFetching: isSearching, data } = useGetIcd10Search({ search: debouncedSearchTerm, sabs: 'CPT' });\n  const cptSearchOptions = data?.codes || [];\n  const { debounce } = useDebounce(800);\n  const debouncedHandleInputChange = (data: string): void => {\n    debounce(() => {\n      setDebouncedSearchTerm(data);\n    });\n  };\n\n  const cptWidget = (): ReactElement => {\n    return (\n      <>\n        <Autocomplete\n          fullWidth\n          blurOnSelect\n          options={cptSearchOptions}\n          filterOptions={(x) => x}\n          noOptionsText={\n            debouncedSearchTerm && cptSearchOptions.length === 0\n              ? 'Nothing found for this search criteria'\n              : 'Start typing to load results'\n          }\n          autoComplete\n          includeInputInList\n          disableClearable\n          value={null as unknown as undefined}\n          isOptionEqualToValue={(option, value) => value.code === option.code}\n          loading={isSearching}\n          onChange={(_e: unknown, data: CPTCodeDTO | null) => {\n            updateState((state) => {\n              if (data != null) {\n                state.cptCodes = [...(state.cptCodes ?? []), data];\n              }\n            });\n          }}\n          getOptionLabel={(option) => (typeof option === 'string' ? option : `${option.code} ${option.display}`)}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              size=\"small\"\n              label=\"CPT code\"\n              placeholder=\"Search CPT code\"\n              onChange={(e) => debouncedHandleInputChange(e.target.value)}\n            />\n          )}\n          disabled={isReadOnly}\n        />\n        <ActionsList\n          data={state.cptCodes ?? []}\n          getKey={(value, index) => value.resourceId || index}\n          renderItem={(value) => (\n            <Typography>\n              {value.code} {value.display}\n            </Typography>\n          )}\n          renderActions={(value) =>\n            !isReadOnly ? (\n              <DeleteIconButton\n                onClick={() =>\n                  updateState(\n                    (state) => (state.cptCodes = state.cptCodes?.filter((cptCode) => cptCode.code != value.code))\n                  )\n                }\n              />\n            ) : undefined\n          }\n          divider\n        />\n      </>\n    );\n  };\n\n  const diagnosesWidget = (): ReactElement => {\n    return (\n      <>\n        <DiagnosesField\n          label=\"Dx\"\n          onChange={(value: IcdSearchResponse['codes'][number]): void => {\n            const preparedValue = { ...value, isPrimary: false };\n            updateState((state) => {\n              state.diagnoses = [...(state.diagnoses ?? []), preparedValue];\n            });\n          }}\n          disableForPrimary={false}\n          disabled={isReadOnly}\n        />\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n          <ActionsList\n            data={state.diagnoses ?? []}\n            getKey={(value, index) => value.resourceId || index}\n            renderItem={(value) => (\n              <Typography>\n                {value.display} {value.code}\n              </Typography>\n            )}\n            renderActions={(value) =>\n              !isReadOnly ? (\n                <DeleteIconButton\n                  onClick={() =>\n                    updateState(\n                      (state) =>\n                        (state.diagnoses = state.diagnoses?.filter((diagnosis) => diagnosis.code != value.code))\n                    )\n                  }\n                />\n              ) : undefined\n            }\n            divider\n          />\n        </Box>\n      </>\n    );\n  };\n\n  const dropdown = (\n    label: string,\n    options: string[] | undefined,\n    value: string | undefined,\n    stateMutator: (value: string, state: PageState) => void\n  ): ReactElement => {\n    return (\n      <FormControl fullWidth sx={{ backgroundColor: 'white' }} size=\"small\" disabled={isReadOnly}>\n        <InputLabel id={label}>{label}</InputLabel>\n        <Select\n          label={label}\n          labelId={label}\n          variant=\"outlined\"\n          value={value ?? ''}\n          onChange={(e) => updateState((state) => stateMutator(e.target.value, state))}\n        >\n          {(options ?? []).map((option) => {\n            return (\n              <MenuItem key={option} value={option}>\n                <Typography color=\"textPrimary\" sx={{ fontSize: '16px' }}>\n                  {option}\n                </Typography>\n              </MenuItem>\n            );\n          })}\n        </Select>\n      </FormControl>\n    );\n  };\n\n  const otherTextInput = (\n    parentLabel: string,\n    parentValue: string | undefined,\n    value: string | undefined,\n    stateMutator: (value: string, state: PageState) => void\n  ): ReactElement => {\n    if (parentValue !== 'Other') {\n      return <></>;\n    }\n    return (\n      <TextField\n        label={'Other ' + parentLabel.toLocaleLowerCase()}\n        size=\"small\"\n        value={value ?? ''}\n        onChange={(e: any) => updateState((state) => stateMutator(e.target.value, state))}\n        disabled={isReadOnly}\n      />\n    );\n  };\n\n  const radio = (\n    label: string,\n    options: string[],\n    value: string | undefined,\n    stateMutator: (value: string, state: PageState) => void,\n    error = false\n  ): ReactElement => {\n    return (\n      <FormControl error={error} disabled={isReadOnly}>\n        <FormLabel id={label}>{label}</FormLabel>\n        <RadioGroup\n          row\n          aria-labelledby={label}\n          onChange={(e) => updateState((state) => stateMutator(e.target.value, state))}\n          value={value ?? ''}\n        >\n          {options.map((option) => {\n            return <FormControlLabel key={option} value={option} control={<Radio />} label={option} />;\n          })}\n        </RadioGroup>\n        {error ? <FormHelperText>{REQUIRED_FIELD_ERROR_MESSAGE}</FormHelperText> : undefined}\n      </FormControl>\n    );\n  };\n\n  return (\n    <>\n      <Stack spacing={1}>\n        <PageTitle label=\"Document Procedure\" showIntakeNotesButton={false} />\n        <AccordionCard>\n          <Stack spacing={2} style={{ padding: '24px' }}>\n            <Box style={{ display: 'flex', alignItems: 'center' }}>\n              <Checkbox\n                checked={state.consentObtained ?? false}\n                onChange={(_e: any, checked: boolean) => updateState((state) => (state.consentObtained = checked))}\n                disabled={isReadOnly}\n              />\n              <Typography>\n                I have obtained the{' '}\n                <Link target=\"_blank\" to={`/consent_procedure.pdf`} style={{ color: theme.palette.primary.main }}>\n                  Consent for Procedure\n                </Link>\n              </Typography>\n            </Box>\n\n            <Box sx={{ marginTop: '16px', color: '#0F347C' }}>\n              <TooltipWrapper tooltipProps={CPT_TOOLTIP_PROPS}>\n                <Typography style={{ color: '#0F347C', fontSize: '16px', fontWeight: '500' }}>\n                  Procedure Type & CPT Code\n                </Typography>\n              </TooltipWrapper>\n            </Box>\n\n            {dropdown(\n              'Procedure type',\n              selectOptions?.procedureTypes.map((procedureType) => procedureType.name),\n              state.procedureType,\n              (value, state) => {\n                state.procedureType = value;\n                const cpt = selectOptions?.procedureTypes.find((procedureType) => procedureType.name === value)?.cpt;\n                if (cpt != null) {\n                  state.cptCodes = [cpt];\n                } else {\n                  state.cptCodes = [];\n                }\n              }\n            )}\n            {cptWidget()}\n            <Typography style={{ marginTop: '8px', color: '#0F347C', fontSize: '16px', fontWeight: '500' }}>\n              Dx\n            </Typography>\n            {diagnosesWidget()}\n            <Typography style={{ marginTop: '8px', color: '#0F347C', fontSize: '16px', fontWeight: '500' }}>\n              Procedure Details\n            </Typography>\n            <Stack direction=\"row\" spacing={2}>\n              <LocalizationProvider dateAdapter={AdapterLuxon}>\n                <DatePicker\n                  label=\"Date of the procedure\"\n                  slotProps={{\n                    textField: {\n                      InputLabelProps: { shrink: true },\n                      InputProps: { size: 'small', placeholder: 'MM/DD/YYYY' },\n                    },\n                  }}\n                  value={state.procedureDate}\n                  onChange={(date: DateTime | null, _e: any) => updateState((state) => (state.procedureDate = date))}\n                  disabled={isReadOnly}\n                />\n              </LocalizationProvider>\n              <LocalizationProvider dateAdapter={AdapterLuxon}>\n                <TimePicker\n                  label=\"Time of the procedure\"\n                  slotProps={{\n                    textField: {\n                      InputLabelProps: { shrink: true },\n                      InputProps: { size: 'small' },\n                    },\n                  }}\n                  value={state.procedureTime}\n                  onChange={(time: DateTime | null, _e: any) => updateState((state) => (state.procedureTime = time))}\n                  disabled={isReadOnly}\n                />\n              </LocalizationProvider>\n            </Stack>\n            {radio('Performed by', PERFORMED_BY, state.performerType, (value, state) => (state.performerType = value))}\n            <InfoAlert text=\"Please include body part including laterality, type and quantity anesthesia used, specific materials (type and quantity) used, technique, findings, complications, specimen sent, and after-procedure status.\" />\n            {dropdown(\n              'Anaesthesia / medication used',\n              selectOptions?.medicationsUsed,\n              state.medicationUsed,\n              (value, state) => (state.medicationUsed = value)\n            )}\n            {dropdown('Site/location', selectOptions?.bodySites, state.bodySite, (value, state) => {\n              state.bodySite = value;\n              state.otherBodySite = undefined;\n            })}\n            {otherTextInput(\n              'Site/location',\n              state.bodySite,\n              state.otherBodySite,\n              (value, state) => (state.otherBodySite = value)\n            )}\n            {dropdown(\n              'Side of body',\n              selectOptions?.bodySides,\n              state.bodySide,\n              (value, state) => (state.bodySide = value)\n            )}\n            {dropdown(\n              'Technique',\n              selectOptions?.techniques,\n              state.technique,\n              (value, state) => (state.technique = value)\n            )}\n            {dropdown('Instruments / supplies used', selectOptions?.supplies, state.suppliesUsed, (value, state) => {\n              state.suppliesUsed = value;\n              state.otherSuppliesUsed = undefined;\n            })}\n            {otherTextInput(\n              'Instruments / supplies used',\n              state.suppliesUsed,\n              state.otherSuppliesUsed,\n              (value, state) => (state.otherSuppliesUsed = value)\n            )}\n            <TextField\n              label=\"Procedure details\"\n              multiline\n              rows={4}\n              value={state.procedureDetails ?? ''}\n              onChange={(e: any) => updateState((state) => (state.procedureDetails = e.target.value))}\n              disabled={isReadOnly}\n            />\n            {radio(\n              'Specimen sent',\n              SPECIMEN_SENT,\n              state.specimenSent != null ? (state.specimenSent ? 'Yes' : 'No') : undefined,\n              (value, state) => (state.specimenSent = value === 'Yes')\n            )}\n            {dropdown('Complications', selectOptions?.complications, state.complications, (value, state) => {\n              state.complications = value;\n              state.otherComplications = undefined;\n            })}\n            {otherTextInput(\n              'Complications',\n              state.complications,\n              state.otherComplications,\n              (value, state) => (state.otherComplications = value)\n            )}\n            {dropdown(\n              'Patient response',\n              selectOptions?.patientResponses,\n              state.patientResponse,\n              (value, state) => (state.patientResponse = value)\n            )}\n            {dropdown(\n              'Post-procedure Instructions',\n              selectOptions?.postProcedureInstructions,\n              state.postInstructions,\n              (value, state) => {\n                state.postInstructions = value;\n                state.otherPostInstructions = undefined;\n              }\n            )}\n            {otherTextInput(\n              'Post-procedure Instructions',\n              state.postInstructions,\n              state.otherPostInstructions,\n              (value, state) => (state.otherPostInstructions = value)\n            )}\n            {dropdown(\n              'Time spent',\n              selectOptions?.timeSpent,\n              state.timeSpent,\n              (value, state) => (state.timeSpent = value)\n            )}\n            {radio('Documented by', DOCUMENTED_BY, state.documentedBy, (value, state) => (state.documentedBy = value))}\n            <Divider orientation=\"horizontal\" />\n            <Box style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <RoundedButton color=\"primary\" onClick={onCancel}>\n                Cancel\n              </RoundedButton>\n              <RoundedButton color=\"primary\" variant=\"contained\" disabled={isReadOnly} onClick={onSave}>\n                Save\n              </RoundedButton>\n            </Box>\n          </Stack>\n        </AccordionCard>\n      </Stack>\n      <Backdrop sx={(theme) => ({ color: '#fff', zIndex: theme.zIndex.drawer + 1 })} open={saveInProgress}>\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </>\n  );\n}\n\nfunction getPredefinedValueOrOther(\n  value: string | undefined,\n  predefinedValues: string[] | undefined\n): string | undefined {\n  if (value != null && predefinedValues?.includes(value)) {\n    return value;\n  }\n  return value != null ? OTHER : undefined;\n}\n\nfunction getPredefinedValueIfOther(\n  value: string | undefined,\n  predefinedValues: string[] | undefined\n): string | undefined {\n  if (value != null && !predefinedValues?.includes(value)) {\n    return value;\n  }\n  return undefined;\n}\n\nfunction useSelectOptions(oystehr: Oystehr | undefined): UseQueryResult<SelectOptions, never> {\n  return useQuery(\n    ['procedures-new-dropdown-options'],\n    async () => {\n      if (oystehr == null) {\n        return [];\n      }\n      const valueSets = (\n        await oystehr.fhir.search<ValueSet>({\n          resourceType: 'ValueSet',\n          params: [\n            {\n              name: 'url',\n              value: [\n                PROCEDURE_TYPES_VALUE_SET_URL,\n                MEDICATIONS_USED_VALUE_SET_URL,\n                BODY_SITES_VALUE_SET_URL,\n                BODY_SIDES_VALUE_SET_URL,\n                TECHNIQUES_VALUE_SET_URL,\n                SUPPLIES_VALUE_SET_URL,\n                COMPLICATIONS_VALUE_SET_URL,\n                PATIENT_RESPONSES_VALUE_SET_URL,\n                POST_PROCEDURE_INSTRUCTIONS_VALUE_SET_URL,\n                TIME_SPENT_VALUE_SET_URL,\n              ].join(','),\n            },\n          ],\n        })\n      ).unbundle();\n      return {\n        procedureTypes: getProcedureTypes(valueSets),\n        medicationsUsed: getValueSetValues(MEDICATIONS_USED_VALUE_SET_URL, valueSets),\n        bodySites: getValueSetValues(BODY_SITES_VALUE_SET_URL, valueSets),\n        bodySides: getValueSetValues(BODY_SIDES_VALUE_SET_URL, valueSets),\n        techniques: getValueSetValues(TECHNIQUES_VALUE_SET_URL, valueSets),\n        supplies: getValueSetValues(SUPPLIES_VALUE_SET_URL, valueSets),\n        complications: getValueSetValues(COMPLICATIONS_VALUE_SET_URL, valueSets),\n        patientResponses: getValueSetValues(PATIENT_RESPONSES_VALUE_SET_URL, valueSets),\n        postProcedureInstructions: getValueSetValues(POST_PROCEDURE_INSTRUCTIONS_VALUE_SET_URL, valueSets),\n        timeSpent: getValueSetValues(TIME_SPENT_VALUE_SET_URL, valueSets),\n      };\n    },\n    {\n      onError: (_err) => {\n        return [];\n      },\n      keepPreviousData: true,\n      staleTime: QUERY_STALE_TIME,\n    }\n  );\n}\n\nfunction getValueSetValues(valueSetUrl: string, valueSets: ValueSet[] | undefined): string[] {\n  const valueSet = valueSets?.find((valueSet) => valueSet.url === valueSetUrl);\n  return valueSet?.expansion?.contains?.flatMap((item) => (item.display != null ? [item.display] : [])) ?? [];\n}\n\nfunction getProcedureTypes(valueSets: ValueSet[] | undefined): ProcedureType[] {\n  const valueSet = valueSets?.find((valueSet) => valueSet.url === PROCEDURE_TYPES_VALUE_SET_URL);\n  return (\n    valueSet?.expansion?.contains?.flatMap((item) => {\n      const name = item.display;\n      if (name == null) {\n        return [];\n      }\n      const cptCodeableConcept = item.extension?.find((extension) => extension.url === PROCEDURE_TYPE_CPT_EXTENSION_URL)\n        ?.valueCodeableConcept;\n      const cptCode = cptCodeableConcept?.coding?.[0].code;\n      const cptDisplay = cptCodeableConcept?.coding?.[0].display;\n      const cpt = cptCode != null && cptDisplay != null ? { code: cptCode, display: cptDisplay } : undefined;\n      return [{ name, cpt }];\n    }) ?? []\n  );\n}\n"]}