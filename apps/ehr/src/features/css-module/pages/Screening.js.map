{"version":3,"file":"Screening.js","sourceRoot":"","sources":["Screening.tsx"],"names":[],"mappings":";;;AAAA,0CAAkD;AAClD,+BAA0B;AAC1B,+BAAyD;AACzD,mEAAkE;AAClE,4CAAuD;AACvD,mEAAkE;AAClE,qDAAoD;AACpD,uEAAkE;AAClE,mDAAkD;AAClD,yGAAmF;AACnF,yEAAwE;AACxE,kEAAoE;AACpE,sDAAqD;AAM9C,IAAM,SAAS,GAA6B;IAC3C,IAAA,KAAuE,IAAA,2BAAY,EAAC,6BAAmB,EAAE;QAC7G,oBAAoB;QACpB,aAAa;QACb,sBAAsB;QACtB,WAAW;KACZ,CAAC,EALM,kBAAkB,wBAAA,EAAE,WAAW,iBAAA,EAAE,oBAAoB,0BAAA,EAAE,SAAS,eAKtE,CAAC;IAEH,IAAA,2BAAY,EAAC;QACX,WAAW,EAAE,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,EAAE,KAAI,EAAE;QAChC,eAAe,EAAE;YACf,YAAY,EAAE;gBACZ,IAAI,EAAE,wCAAgC;gBACtC,UAAU,EAAE,WAAW;aACxB;SACF;KACF,CAAC,CAAC;IAEK,IAAA,eAAe,GAAK,IAAA,wCAAoB,GAAE,gBAA3B,CAA4B;IAEnD,IAAI,kBAAkB,IAAI,oBAAoB;QAAE,OAAO,CAAC,qBAAS,CAAC,AAAD,EAAG,CAAC;IACrE,IAAI,CAAC,WAAW;QAAE,OAAO,CAAC,qBAAU,CAAC,iBAAiB,EAAE,qBAAU,CAAC,CAAC;IAEpE,OAAO,CACL,CAAC,gBAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAChB;MAAA,CAAC,qBAAS,CAAC,KAAK,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,eAAe,KAAK,QAAQ,CAAC,EACjF;MAAA,CAAC,0CAAS,CAAC,AAAD,EACV;MAAA,CAAC,uBAAa,CAAC,AAAD,EACd;MAAA,CAAC,SAAG,CAAC,AAAD,EACJ;MAAA,CAAC,+BAAc,CAAC,AAAD,EACjB;IAAA,EAAE,gBAAK,CAAC,CACT,CAAC;AACJ,CAAC,CAAC;AAhCW,QAAA,SAAS,aAgCpB","sourcesContent":["import { Stack, Typography } from '@mui/material';\nimport React from 'react';\nimport { ADDITIONAL_QUESTIONS_META_SYSTEM } from 'utils';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../telemed';\nimport { PageTitle } from '../../../telemed/components/PageTitle';\nimport { CSSLoader } from '../components/CSSLoader';\nimport AskThePatient from '../components/screening/AskThePatient';\nimport { ASQ } from '../components/screening/ASQ';\nimport { Questions } from '../components/screening/PaperworkAndConfirmedQuestions';\nimport { ScreeningNotes } from '../components/screening/ScreeningNotes';\nimport { useNavigationContext } from '../context/NavigationContext';\nimport { useChartData } from '../hooks/useChartData';\n\ninterface ScreeningProps {\n  appointmentID?: string;\n}\n\nexport const Screening: React.FC<ScreeningProps> = () => {\n  const { isChartDataLoading, appointment, isAppointmentLoading, encounter } = getSelectors(useAppointmentStore, [\n    'isChartDataLoading',\n    'appointment',\n    'isAppointmentLoading',\n    'encounter',\n  ]);\n\n  useChartData({\n    encounterId: encounter?.id || '',\n    requestedFields: {\n      observations: {\n        _tag: ADDITIONAL_QUESTIONS_META_SYSTEM,\n        _search_by: 'encounter',\n      },\n    },\n  });\n\n  const { interactionMode } = useNavigationContext();\n\n  if (isChartDataLoading || isAppointmentLoading) return <CSSLoader />;\n  if (!appointment) return <Typography>No data available</Typography>;\n\n  return (\n    <Stack spacing={1}>\n      <PageTitle label=\"Screening\" showIntakeNotesButton={interactionMode === 'intake'} />\n      <Questions />\n      <AskThePatient />\n      <ASQ />\n      <ScreeningNotes />\n    </Stack>\n  );\n};\n"]}