{"version":3,"file":"business-logic.js","sourceRoot":"","sources":["business-logic.ts"],"names":[],"mappings":";;;AAAA,+BAAiC;AACjC,+BAAyD;AACzD,yCAA0E;AAGnE,IAAM,0BAA0B,GAAG,UACxC,OAAsB,EACtB,aAA0C;;IACb,OAAA,CAAC;QAC9B,SAAS,EAAE,MAAA,OAAO,CAAC,SAAS,mCAAI,aAAa,CAAC,SAAS;QACvD,QAAQ,EAAE,MAAA,OAAO,CAAC,QAAQ,mCAAI,aAAa,CAAC,QAAQ;QACpD,SAAS,EAAE,MAAA,OAAO,CAAC,SAAS,mCAAI,aAAa,CAAC,SAAS;QACvD,cAAc,EAAE,MAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,OAAO,mCAAI,aAAa,CAAC,cAAc;QACxE,cAAc,EAAE,MAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,OAAO,mCAAI,aAAa,CAAC,cAAc;QACxE,WAAW,EAAE,MAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,IAAI,mCAAI,aAAa,CAAC,WAAW;QAC/D,YAAY,EAAE,MAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,KAAK,mCAAI,aAAa,CAAC,YAAY;QAClE,UAAU,EAAE,MAAA,MAAA,OAAO,CAAC,OAAO,0CAAE,UAAU,mCAAI,aAAa,CAAC,UAAU;QACnE,IAAI,EAAE,MAAA,OAAO,CAAC,IAAI,mCAAI,aAAa,CAAC,IAAI;QACxC,SAAS,EAAE,MAAA,OAAO,CAAC,SAAS,mCAAI,aAAa,CAAC,SAAS;QACvD,KAAK,EAAE,MAAA,OAAO,CAAC,KAAK,mCAAI,aAAa,CAAC,aAAa;QACnD,KAAK,EAAE,MAAA,OAAO,CAAC,KAAK,mCAAI,aAAa,CAAC,cAAc;KACrD,CAAC,CAAA;CAAA,CAAC;AAhBU,QAAA,0BAA0B,8BAgBpC;AAEI,IAAM,WAAW,GAAG,UAAC,aAA0C;IACpE,IAAM,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC;IACxC,IAAM,cAAc,GAAG,aAAa,CAAC,cAAc,CAAC;IACpD,IAAM,8BAA8B,GAAG,CAAC,8BAA8B,EAAE,4BAA4B,CAAC,CAAC;IACtG,OAAO,8BAA8B,CAAC,QAAQ,CAAC,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAC;AAC7F,CAAC,CAAC;AALW,QAAA,WAAW,eAKtB;AAEK,IAAM,SAAS,GAAG,UAAC,aAA4B;IAC5C,IAAA,MAAM,GAAwB,aAAa,OAArC,EAAE,iBAAiB,GAAK,aAAa,kBAAlB,CAAmB;IAEpD,IAAI,MAAM,IAAI,iBAAiB,EAAE,CAAC;QAChC,IAAM,UAAU,GACd,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,4BAAgB,GAAG,qCAAyB,CAAC,GAAG,qCAAyB,CAAC;QAExG,IAAM,aAAa,GAAG,gBAAQ,CAAC,UAAU,CAAC,iBAAiB,EAAE,mBAAW,CAAC,CAAC,QAAQ,CAAC,2BAAmB,CAAC,CAAC;QACxG,OAAO,UAAG,UAAU,0BAAgB,aAAa,MAAG,CAAC;IACvD,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAZW,QAAA,SAAS,aAYpB","sourcesContent":["import { DateTime } from 'luxon';\nimport { DATE_FORMAT, DISPLAY_DATE_FORMAT } from 'utils';\nimport { LBS_TO_KG_FACTOR, WEIGHT_ROUNDING_PRECISION } from './constants';\nimport { PatientValues, QuestionnaireResponseValues, VisitMappedData } from './types';\n\nexport const getPatientInfoWithFallback = (\n  patient: PatientValues,\n  questionnaire: QuestionnaireResponseValues\n): Partial<VisitMappedData> => ({\n  firstName: patient.firstName ?? questionnaire.firstName,\n  lastName: patient.lastName ?? questionnaire.lastName,\n  birthDate: patient.birthDate ?? questionnaire.birthDate,\n  addressStreet1: patient.address?.street1 ?? questionnaire.addressStreet1,\n  addressStreet2: patient.address?.street2 ?? questionnaire.addressStreet2,\n  addressCity: patient.address?.city ?? questionnaire.addressCity,\n  addressState: patient.address?.state ?? questionnaire.addressState,\n  addressZip: patient.address?.postalCode ?? questionnaire.addressZip,\n  race: patient.race ?? questionnaire.race,\n  ethnicity: patient.ethnicity ?? questionnaire.ethnicity,\n  email: patient.email ?? questionnaire.guardianEmail,\n  phone: patient.phone ?? questionnaire.guardianNumber,\n});\n\nexport const getPronouns = (questionnaire: QuestionnaireResponseValues): string | undefined => {\n  const pronouns = questionnaire.pronouns;\n  const customPronouns = questionnaire.customPronouns;\n  const patientPronounsNotListedValues = ['My pronounces are not listed', 'My pronouns are not listed'];\n  return patientPronounsNotListedValues.includes(pronouns ?? '') ? customPronouns : pronouns;\n};\n\nexport const getWeight = (patientValues: PatientValues): string | undefined => {\n  const { weight, weightLastUpdated } = patientValues;\n\n  if (weight && weightLastUpdated) {\n    const weightInKg =\n      Math.round(Number(weight) * LBS_TO_KG_FACTOR * WEIGHT_ROUNDING_PRECISION) / WEIGHT_ROUNDING_PRECISION;\n\n    const formattedDate = DateTime.fromFormat(weightLastUpdated, DATE_FORMAT).toFormat(DISPLAY_DATE_FORMAT);\n    return `${weightInKg} kg (updated ${formattedDate})`;\n  }\n\n  return undefined;\n};\n"]}