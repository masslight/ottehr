{"version":3,"file":"extractors.js","sourceRoot":"","sources":["extractors.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Appointment,\n  ContactPoint,\n  DocumentReference,\n  Encounter,\n  Extension,\n  FhirResource,\n  Location,\n  Patient,\n  QuestionnaireResponse,\n} from 'fhir/r4b';\nimport { getQuestionnaireResponseByLinkId, isLocationVirtual } from 'utils';\nimport { WEIGHT_EXTENSION_URL, WEIGHT_LAST_UPDATED_EXTENSION_URL } from './constants';\nimport {\n  AppointmentValues,\n  EncounterValues,\n  LocationValues,\n  PatientValues,\n  QuestionnaireResponseValues,\n} from './types';\n\nexport const getAnswer = <T>(\n  questionnaireResponse: QuestionnaireResponse | undefined,\n  linkId: string,\n  valueKey:\n    | 'valueBoolean'\n    | 'valueDecimal'\n    | 'valueInteger'\n    | 'valueDate'\n    | 'valueDateTime'\n    | 'valueTime'\n    | 'valueString'\n    | 'valueUri'\n    | 'valueAttachment'\n    | 'valueCoding'\n    | 'valueQuantity'\n    | 'valueReference'\n): T | undefined => {\n  const answer = questionnaireResponse?.item\n    ?.flatMap((item) => item.item || [item])\n    .find((item) => item.linkId === linkId)?.answer?.[0];\n\n  if (answer && valueKey in answer) {\n    return answer[valueKey] as T;\n  }\n\n  return undefined;\n};\n\nexport const getStringAnswer = (\n  questionnaireResponse: QuestionnaireResponse | undefined,\n  linkId: string\n): string | undefined => getAnswer<string>(questionnaireResponse, linkId, 'valueString');\n\nexport const getBooleanAnswer = (\n  questionnaireResponse: QuestionnaireResponse | undefined,\n  linkId: string\n): boolean | undefined => getAnswer<boolean>(questionnaireResponse, linkId, 'valueBoolean');\n\nexport const extractResourceValues = <T extends FhirResource, K extends keyof T>(\n  resource: T | undefined,\n  keys: K[]\n): Partial<Pick<T, K>> => {\n  if (!resource) return {};\n  return keys.reduce(\n    (acc, key) => {\n      if (resource[key] !== undefined) {\n        acc[key] = resource[key];\n      }\n      return acc;\n    },\n    {} as Partial<Pick<T, K>>\n  );\n};\n\nexport const getAppointmentValues = (appointment: Appointment | undefined): AppointmentValues => {\n  const values = extractResourceValues(appointment, ['id', 'start', 'end', 'status', 'description']);\n  return {\n    ...values,\n    appointmentType: appointment?.appointmentType?.text,\n  };\n};\n\nexport const getPatientValues = (patient: Patient | undefined): PatientValues => {\n  const values = extractResourceValues(patient, ['id', 'gender', 'birthDate']);\n  if (!patient) return values;\n\n  return {\n    ...values,\n    firstName: patient.name?.[0]?.given?.[0],\n    lastName: patient.name?.[0]?.family,\n    address: {\n      ...patient.address?.[0],\n      street1: patient.address?.[0]?.line?.[0],\n      street2: patient.address?.[0]?.line?.[1],\n    },\n    email: patient.telecom?.find((telecom: ContactPoint) => telecom.system === 'email')?.value,\n    phone: patient.telecom?.find((telecom: ContactPoint) => telecom.system === 'phone')?.value,\n    ethnicity: getExtensionValue(patient, '/ethnicity'),\n    race: getExtensionValue(patient, '/race'),\n    weight: patient.extension?.find((extension) => extension.url === WEIGHT_EXTENSION_URL)?.valueString,\n    weightLastUpdated: patient.extension?.find((extension) => extension.url === WEIGHT_LAST_UPDATED_EXTENSION_URL)\n      ?.valueString,\n  };\n};\n\nexport const getExtensionValue = (patient: Patient | undefined, extensionUrl: string): string | undefined => {\n  return patient?.extension?.find((extension: Extension) => extension.url.includes(extensionUrl))?.valueCodeableConcept\n    ?.coding?.[0]?.display;\n};\n\nexport const getLocationValues = (location: Location | undefined): LocationValues => {\n  const values = extractResourceValues(location, ['id', 'name']);\n  if (!location) return { ...values, address: {} };\n\n  return {\n    ...values,\n    address: {\n      ...location.address,\n      street1: location.address?.line?.[0],\n      street2: location.address?.line?.[1],\n    },\n    phone: location.telecom?.find((telecom: ContactPoint) => telecom.system === 'phone')?.value,\n  };\n};\n\nexport const getEncounterValues = (encounter: Encounter | undefined): EncounterValues =>\n  extractResourceValues(encounter, ['id', 'status']);\n\nexport const getQuestionnaireResponseValues = (\n  questionnaireResponse: QuestionnaireResponse | undefined\n): QuestionnaireResponseValues => {\n  if (!questionnaireResponse) return {};\n\n  const questionnaireResponseKeys = {\n    willBe18: 'patient-will-be-18',\n    isNewPatient: 'is-new-qrs-patient',\n    firstName: 'patient-first-name',\n    lastName: 'patient-last-name',\n    birthDateYear: 'patient-dob-year',\n    birthDateMonth: 'patient-dob-month',\n    birthDateDay: 'patient-dob-day',\n    birthSex: 'patient-birth-sex',\n    addressStreet1: 'patient-street-address',\n    addressStreet2: 'patient-street-address-2',\n    addressCity: 'patient-city',\n    addressState: 'patient-state',\n    addressZip: 'patient-zip',\n    fillingOutAs: 'patient-filling-out-as',\n    guardianEmail: 'guardian-email',\n    guardianNumber: 'guardian-number',\n    ethnicity: 'patient-ethnicity',\n    race: 'patient-race',\n    pronouns: 'patient-pronouns',\n    customPronouns: 'patient-pronouns-custom',\n  } as const;\n\n  const result = {} as QuestionnaireResponseValues;\n\n  for (const [key, linkId] of Object.entries(questionnaireResponseKeys)) {\n    const stringValue = getStringAnswer(questionnaireResponse, linkId);\n    const booleanValue = getBooleanAnswer(questionnaireResponse, linkId);\n    result[key as keyof QuestionnaireResponseValues] = (stringValue ?? booleanValue) as any;\n  }\n\n  if (result.birthDateYear && result.birthDateMonth && result.birthDateDay) {\n    result.birthDate = `${result.birthDateYear}-${result.birthDateMonth}-${result.birthDateDay}`;\n  }\n\n  return result;\n};\n\nexport const extractUrlsFromAppointmentData = (resourceBundle: FhirResource[], documentCode: string): string[] => {\n  return resourceBundle\n    .filter(\n      (resource: FhirResource): resource is DocumentReference =>\n        resource.resourceType === 'DocumentReference' &&\n        resource.status === 'current' &&\n        resource.type?.coding?.[0].code === documentCode\n    )\n    .flatMap((documentReference) =>\n      documentReference.content\n        .map((content) => content.attachment.url)\n        .filter((url): url is string => url !== undefined)\n    );\n};\n\nexport const getResources = (\n  resourceBundle: FhirResource[] | null\n): Partial<{\n  appointment: Appointment;\n  patient: Patient;\n  location: Location;\n  locationVirtual: Location;\n  encounter: Encounter;\n  questionnaireResponse: QuestionnaireResponse;\n}> => {\n  if (!resourceBundle) return {};\n\n  const findResources = <T extends FhirResource>(resourceType: string): T[] | undefined =>\n    resourceBundle.filter((resource: FhirResource) => resource.resourceType === resourceType) as T[] | undefined;\n\n  const locations = findResources<Location>('Location');\n  const virtualLocation = locations?.find(isLocationVirtual);\n  const physicalLocation = locations?.find((location) => !isLocationVirtual(location));\n\n  return {\n    appointment: findResources<Appointment>('Appointment')?.[0],\n    patient: findResources<Patient>('Patient')?.[0],\n    location: physicalLocation,\n    locationVirtual: virtualLocation,\n    encounter: findResources<Encounter>('Encounter')?.[0],\n    questionnaireResponse: findResources<QuestionnaireResponse>('QuestionnaireResponse')?.[0],\n  };\n};\n\nexport const getAllergies = (questionnaireResponse: QuestionnaireResponse | undefined): string | undefined => {\n  const knownAllergies = getQuestionnaireResponseByLinkId('allergies', questionnaireResponse)?.answer?.[0]?.valueArray;\n  return knownAllergies\n    ? knownAllergies.map((answer) => answer['allergies-form-agent-substance']).join(', ')\n    : undefined;\n};\n\nexport const getHospitalizations = (questionnaireResponse: QuestionnaireResponse | undefined): string[] | undefined => {\n  const knownHospitalizations = getQuestionnaireResponseByLinkId('hospitalization', questionnaireResponse)?.answer?.[0]\n    ?.valueArray;\n  return knownHospitalizations ? knownHospitalizations.map((item) => item.display) : undefined;\n};\n"]}