{"version":3,"file":"parser.js","sourceRoot":"","sources":["parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { FhirResource } from 'fhir/r4b';\nimport { formatDOB, getQuestionnaireResponseByLinkId, PATIENT_PHOTO_CODE, SCHOOL_WORK_NOTE_TEMPLATE_CODE } from 'utils';\nimport { getPatientName } from '../../../telemed/utils';\nimport { getPatientInfoWithFallback, getPronouns, getWeight } from './business-logic';\nimport { Gender } from './constants';\nimport {\n  extractUrlsFromAppointmentData,\n  getAllergies,\n  getAppointmentValues,\n  getEncounterValues,\n  getHospitalizations,\n  getLocationValues,\n  getPatientValues,\n  getQuestionnaireResponseValues,\n  getResources,\n} from './extractors';\nimport { VisitDataAndMappedData, VisitMappedData } from './types';\n\nexport const getVisitMappedData = (resourceBundle: FhirResource[]): Partial<VisitMappedData> => {\n  const { patient, questionnaireResponse } = getResources(resourceBundle);\n  const patientName = getPatientName(patient?.name);\n\n  return {\n    patientName:\n      patientName?.lastFirstMiddleName || patientName?.lastFirstName || patientName?.lastName || patientName?.firstName,\n    patientAvatarPhotoUrl: patient?.photo?.at(0)?.url,\n    patientConditionalPhotosUrls: extractUrlsFromAppointmentData(resourceBundle, PATIENT_PHOTO_CODE),\n    schoolWorkNoteUrls: extractUrlsFromAppointmentData(resourceBundle, SCHOOL_WORK_NOTE_TEMPLATE_CODE),\n    pronouns: getPronouns(getQuestionnaireResponseValues(questionnaireResponse)),\n    gender: patient?.gender ? Gender[patient.gender as keyof typeof Gender] : undefined,\n    preferredLanguage: getQuestionnaireResponseByLinkId('preferred-language', questionnaireResponse)?.answer?.[0]\n      ?.valueString,\n    DOB: formatDOB(patient?.birthDate),\n    allergies: getAllergies(questionnaireResponse),\n    hospitalizations: getHospitalizations(questionnaireResponse),\n    weight: getWeight(getPatientValues(patient)),\n  };\n};\n\nexport const parseBundle = (resourceBundle: FhirResource[]): VisitDataAndMappedData => {\n  const {\n    appointment: appointmentResource,\n    patient: patientResource,\n    location: locationResource,\n    locationVirtual: locationVirtualResource,\n    encounter: encounterResource,\n    questionnaireResponse: questionnaireResponseResource,\n  } = getResources(resourceBundle);\n\n  const appointment = getAppointmentValues(appointmentResource);\n  const patient = getPatientValues(patientResource);\n  const location = getLocationValues(locationResource);\n  const locationVirtual = getLocationValues(locationVirtualResource);\n  const encounter = getEncounterValues(encounterResource);\n  const questionnaire = getQuestionnaireResponseValues(questionnaireResponseResource);\n  const patientInfoWithFallback = getPatientInfoWithFallback(patient, questionnaire);\n  const parsedAppointmentData = getVisitMappedData(resourceBundle);\n\n  return {\n    resources: {\n      appointment,\n      location,\n      locationVirtual,\n      encounter,\n      questionnaire,\n      patient,\n    },\n    mappedData: {\n      ...patientInfoWithFallback,\n      ...parsedAppointmentData,\n    },\n  };\n};\n"]}