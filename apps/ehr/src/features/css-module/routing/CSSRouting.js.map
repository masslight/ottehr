{"version":3,"file":"CSSRouting.js","sourceRoot":"","sources":["CSSRouting.tsx"],"names":[],"mappings":";;AAAA,+BAA0B;AAC1B,qDAAwE;AACxE,qDAAoD;AACpD,wDAA+D;AAC/D,kEAAwF;AACxF,gEAA+D;AAC/D,iDAAgD;AAEhD,IAAM,UAAU,GAAa;IAC3B,IAAM,WAAW,GAAG,IAAA,qCAAiB,GAAE,CAAC;IACxC,IAAM,QAAQ,GAAG,IAAA,8BAAW,GAAE,CAAC;IACzB,IAAA,KAA6C,IAAA,wCAAoB,GAAE,IAAI,EAAE,EAAvE,uBAAoB,EAApB,eAAe,mBAAG,EAAE,KAAA,EAAE,iBAAgB,EAAhB,SAAS,mBAAG,IAAI,KAAiC,CAAC;IAEhF,IAAI,WAAW,CAAC,SAAS,IAAI,SAAS,EAAE,CAAC;QACvC,OAAO,CAAC,qBAAS,CAAC,AAAD,EAAG,CAAC;IACvB,CAAC;IAED,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QACtB,QAAQ,CAAC,SAAS,CAAC,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CACL,CAAC,mCAAoB,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAC9C;MAAA,CAAC,yBAAM,CACL;QAAA,CAAC,wBAAK,CAAC,OAAO,CAAC,CAAC,CAAC,qBAAS,CAAC,AAAD,EAAG,CAAC,CAC5B;UAAA,CAAC,wBAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,2BAAQ,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAG,CAAC,EACxE;UAAA,CAAC,eAAe,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CAC9B,CAAC,wBAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAG,CACrE,EAF+B,CAE/B,CAAC,CACF;UAAA,CAAC,gHAAgH,CACjH;UAAA,CAAC,wBAAK,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,2BAAQ,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAG,CAAC,EAC7E;QAAA,EAAE,wBAAK,CACT;MAAA,EAAE,yBAAM,CACV;IAAA,EAAE,mCAAoB,CAAC,CACxB,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,+BAA+B,GAAG;IACtC,OAAO,CACL,CAAC,sCAAkB,CACjB;MAAA,CAAC,UAAU,CAAC,AAAD,EACb;IAAA,EAAE,sCAAkB,CAAC,CACtB,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,+BAA+B,CAAC","sourcesContent":["import React from 'react';\nimport { Navigate, Route, Routes, useNavigate } from 'react-router-dom';\nimport { CSSLoader } from '../components/CSSLoader';\nimport { FeatureFlagsProvider } from '../context/featureFlags';\nimport { NavigationProvider, useNavigationContext } from '../context/NavigationContext';\nimport { useCSSPermissions } from '../hooks/useCSSPermissions';\nimport { CSSLayout } from '../layout/CSSLayout';\n\nconst CSSRouting: React.FC = () => {\n  const permissions = useCSSPermissions();\n  const navigate = useNavigate();\n  const { availableRoutes = [], isLoading = true } = useNavigationContext() || {};\n\n  if (permissions.isPending || isLoading) {\n    return <CSSLoader />;\n  }\n\n  if (!permissions.view) {\n    navigate('/visits');\n    return null;\n  }\n\n  return (\n    <FeatureFlagsProvider flagsToSet={{ css: true }}>\n      <Routes>\n        <Route element={<CSSLayout />}>\n          <Route index element={<Navigate to={availableRoutes[0].path} replace />} />\n          {availableRoutes.map((route) => (\n            <Route key={route.path} path={route.path} element={route.element} />\n          ))}\n          {/* redirect unavailable page to the first available page, use-case - intake mode trying to open provider page */}\n          <Route path=\"*\" element={<Navigate to={availableRoutes[0].path} replace />} />\n        </Route>\n      </Routes>\n    </FeatureFlagsProvider>\n  );\n};\n\nconst CSSRoutingWithNavigationContext = (): React.ReactElement => {\n  return (\n    <NavigationProvider>\n      <CSSRouting />\n    </NavigationProvider>\n  );\n};\n\nexport default CSSRoutingWithNavigationContext;\n"]}