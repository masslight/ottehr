{"version":3,"file":"AOEMultiSelectListQuestion.js","sourceRoot":"","sources":["AOEMultiSelectListQuestion.tsx"],"names":[],"mappings":";;;AAAA,0CAAuF;AAEvF,mDAAqF;AAW9E,IAAM,0BAA0B,GAAqC,UAAC,KAAK;IAChF,wBAAwB;IAET,IAAA,MAAM,GACjB,IAAA,gCAAc,GAAE,iBADC,CACA;IAEb,IAAA,YAAY,GAA8C,KAAK,aAAnD,EAAE,MAAM,GAAsC,KAAK,OAA3C,EAAE,YAAY,GAAwB,KAAK,aAA7B,EAAE,UAAU,GAAY,KAAK,WAAjB,EAAE,KAAK,GAAK,KAAK,MAAV,CAAW;IAExE,IAAM,OAAO,GAAG,uBAAgB,MAAM,WAAQ,CAAC;IAC/C,OAAO,CACL,EACE;MAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,qBAAU,CACnD;MAAA,CAAC,iBAAM,CACL,IAAI,KAAK,CAAC,CACV,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,EAAE,CAAC,CAAC,uBAAgB,MAAM,CAAE,CAAC,CAC7B,KAAK,CAAC,CAAC,YAAY,CAAC,CACpB,QAAQ,CACR,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CACxB,KAAK,CAAC,CAAC,CAAC,wBAAa,CAAC,EAAE,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,EAAG,CAAC,CAAC,wGAAwG;KACjL,WAAW,CAAC,CAAC,UAAC,QAAe,IAAK,OAAA,CAChC,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CACvD;YAAA,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,GAAG,CAAC,UAAC,KAAa,EAAE,GAAW,IAAK,OAAA,CAAC,eAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAG,EAAhC,CAAgC,CAAC,CAClF;UAAA,EAAE,cAAG,CAAC,CACP,EAJiC,CAIjC,CAAC,CACF,QAAQ,CAAC,CAAC,UAAU,CAAC,CAErB;QAAA,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,GAAG,IAAK,OAAA,CACjC,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAC5C;YAAA,CAAC,MAAM,CAAC,WAAW,CACrB;UAAA,EAAE,mBAAQ,CAAC,CACZ,EAJkC,CAIlC,CAAC,CACJ;MAAA,EAAE,iBAAM,CACV;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC;AAnCW,QAAA,0BAA0B,8BAmCrC","sourcesContent":["import { Box, Chip, InputLabel, MenuItem, OutlinedInput, Select } from '@mui/material';\nimport { QuestionnaireItemAnswerOption } from 'fhir/r4b';\nimport { ControllerRenderProps, FieldValues, useFormContext } from 'react-hook-form';\n\ninterface MultiListQuestionProps {\n  questionText: string;\n  linkId: string;\n  answerOption: QuestionnaireItemAnswerOption[];\n  required: boolean;\n  isReadOnly?: boolean;\n  field: ControllerRenderProps<FieldValues, string>;\n}\n\nexport const AOEMultiSelectListQuestion: React.FC<MultiListQuestionProps> = (props) => {\n  // multi select dropdown\n  const {\n    formState: { errors },\n  } = useFormContext();\n\n  const { questionText, linkId, answerOption, isReadOnly, field } = props;\n\n  const labelId = `multi-select-${linkId}-label`;\n  return (\n    <>\n      <InputLabel id={labelId}>{questionText}</InputLabel>\n      <Select\n        {...field}\n        labelId={labelId}\n        id={`multi-select-${linkId}`}\n        label={questionText}\n        multiple\n        error={!!errors[linkId]}\n        input={<OutlinedInput id=\"select-multiple-chip\" label={questionText} />} // the label here has to match the label on the input and select otherwise the label won't size properly\n        renderValue={(selected: any[]) => (\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {selected?.map((value: string, idx: number) => <Chip key={idx} label={value} />)}\n          </Box>\n        )}\n        readOnly={isReadOnly}\n      >\n        {answerOption.map((option, idx) => (\n          <MenuItem key={idx} value={option.valueString}>\n            {option.valueString}\n          </MenuItem>\n        ))}\n      </Select>\n    </>\n  );\n};\n"]}