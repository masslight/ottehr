{"version":3,"file":"AOENumberQuestion.js","sourceRoot":"","sources":["AOENumberQuestion.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,0CAA0C;AAE1C,+BAA0B;AAC1B,mDAAqF;AACrF,2DAAsD;AAY/C,IAAM,iBAAiB,GAAkC,UAAC,KAAK;;IAErD,IAAA,MAAM,GACjB,IAAA,gCAAc,GAAE,iBADC,CACA;IAErB,2GAA2G;IACnG,IAAA,YAAY,GAA+D,KAAK,aAApE,EAAE,MAAM,GAAuD,KAAK,OAA5D,EAAE,SAAS,GAA4C,KAAK,UAAjD,EAAE,QAAQ,GAAkC,KAAK,SAAvC,EAAE,UAAU,GAAsB,KAAK,WAA3B,EAAE,QAAQ,GAAY,KAAK,SAAjB,EAAE,KAAK,GAAK,KAAK,MAAV,CAAW;IAEzF,4FAA4F;IACpF,IAAK,QAAQ,GAAoB,KAAK,IAAzB,EAAK,UAAU,UAAK,KAAK,EAAxC,OAAgC,CAAF,CAAW;IAE/C,IAAM,UAAU,GAAG,MAAA,SAAS,CAAC,IAAI,CAC/B,UAAC,aAAa;QACZ,OAAA,aAAa,CAAC,GAAG,KAAK,6EAA6E;IAAnG,CAAmG,CACtG,0CAAE,WAAW,CAAC;IACf,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC/C,CAAC;IACD,IAAM,SAAS,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,+CAA+C;IACnG,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC/C,CAAC;IACD,oDAAoD;IACpD,IAAI,QAAQ,GAAG,IAAI,CAAC;IACpB,IAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QAC9B,QAAQ,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC;IAC9C,CAAC;IACD,OAAO,CACL,CAAC,oBAAS,CACR,IAAI,CAAC,MAAM,CACX,WAAW,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAC3C,IAAI,UAAU,CAAC,CACf,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,EAAE,CAAC,CAAC,QAAQ,CAAC,CACb,KAAK,CAAC,CAAC,YAAY,CAAC,CACpB,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CACtB,IAAI,CAAC,QAAQ,CACb,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CACxB,UAAU,CAAC,CAAC;YACV,cAAc,EAAE,mBAAgB;YAChC,UAAU,EAAE;gBACV,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,GAAG;gBACV,GAAG,EAAE,CAAC,SAAS;gBACf,GAAG,EAAE,SAAS;gBACd,kBAAkB,EAAE,IAAI;gBACxB,KAAK,EAAE,QAAQ;gBACf,mEAAmE;gBACnE,QAAQ,EAAE,UAAU;aACrB;SACF,CAAC,EACF,CACH,CAAC;AACJ,CAAC,CAAC;AAtDW,QAAA,iBAAiB,qBAsD5B","sourcesContent":["import { TextField } from '@mui/material';\nimport { Extension } from 'fhir/r4b';\nimport React from 'react';\nimport { ControllerRenderProps, FieldValues, useFormContext } from 'react-hook-form';\nimport InputMask from '../../../components/InputMask';\n\ninterface NumberQuestionProps {\n  questionText: string;\n  linkId: string;\n  extension: Extension[];\n  required: boolean;\n  isReadOnly?: boolean;\n  idString: string;\n  field: ControllerRenderProps<FieldValues, string>;\n}\n\nexport const AOENumberQuestion: React.FC<NumberQuestionProps> = (props) => {\n  const {\n    formState: { errors },\n  } = useFormContext();\n\n  // Note: the extension will tell you the necessary number validation. See Oystehr docs for full explanation\n  const { questionText, linkId, extension, required, isReadOnly, idString, field } = props;\n\n  // splitting out the RHF passed ref here so it gets passed correctly to the styled component\n  const { ref: fieldRef, ...otherField } = field;\n\n  const numberType = extension.find(\n    (extensionTemp) =>\n      extensionTemp.url === 'https://fhir.zapehr.com/r4/StructureDefinitions/formatted-input-requirement'\n  )?.valueString;\n  if (!numberType) {\n    throw new Error('numberType is not defined');\n  }\n  const maxNumber = +numberType.replaceAll('#', '9'); // replace #s with 9s, example ###.## -> 999.99\n  if (!maxNumber) {\n    throw new Error('maxNumber is not a number');\n  }\n  // if numberType is ###.## then `decimals` will be 2\n  let decimals = null;\n  if (numberType?.includes('.')) {\n    decimals = numberType?.split('.')[1].length;\n  }\n  return (\n    <TextField\n      type=\"text\"\n      placeholder={numberType.replace(/#/g, '0')}\n      {...otherField}\n      inputRef={fieldRef}\n      id={idString}\n      label={questionText}\n      sx={{ width: '100%' }}\n      size=\"medium\"\n      required={required}\n      error={!!errors[linkId]}\n      InputProps={{\n        inputComponent: InputMask as any,\n        inputProps: {\n          mask: Number,\n          radix: '.',\n          min: -maxNumber,\n          max: maxNumber,\n          padFractionalZeros: true,\n          scale: decimals,\n          // step: decimals ? `0.${'0'.padStart(decimals - 1, '0')}1` : null,\n          readOnly: isReadOnly,\n        },\n      }}\n    />\n  );\n};\n"]}