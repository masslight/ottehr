{"version":3,"file":"LabsAutocomplete.js","sourceRoot":"","sources":["LabsAutocomplete.tsx"],"names":[],"mappings":";;;AAAA,0CAAwD;AACxD,+BAAqC;AACrC,uCAA+D;AAC/D,uCAA0C;AAC1C,+BAA+D;AAOxD,IAAM,gBAAgB,GAA8B,UAAC,KAAK;IACvD,IAAA,WAAW,GAAqB,KAAK,YAA1B,EAAE,cAAc,GAAK,KAAK,eAAV,CAAW;IACxC,IAAA,KAAsD,IAAA,gBAAQ,EAAqB,SAAS,CAAC,EAA5F,sBAAsB,QAAA,EAAE,yBAAyB,QAA2C,CAAC;IAE9F,IAAA,KAKF,IAAA,0CAAgC,EAAC;QACnC,MAAM,EAAE,sBAAsB;KAC/B,CAAC,EANA,UAAU,gBAAA,EACV,IAAI,UAAA,EACJ,OAAO,aAAA,EACA,kBAAkB,WAGzB,CAAC;IAEH,IAAM,IAAI,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,KAAI,EAAE,CAAC;IAEtB,IAAA,QAAQ,GAAK,IAAA,qBAAW,EAAC,GAAG,CAAC,SAArB,CAAsB;IACtC,IAAM,6BAA6B,GAAG,UAAC,WAAmB;QACxD,QAAQ,CAAC;YACP,yBAAyB,CAAC,WAAW,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,kBAAkB;QAAE,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,CAAC;IAE9E,OAAO,CACL,CAAC,uBAAY,CACX,IAAI,CAAC,OAAO,CACZ,OAAO,CAAC,CAAC,IAAI,CAAC,CACd,cAAc,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,IAAA,mBAAW,EAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,EAA5D,CAA4D,CAAC,CACzF,aAAa,CAAC,CACZ,sBAAsB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,2BAC3E,CAAC,CACD,KAAK,CAAC,CAAC,WAAW,CAAC,CACnB,QAAQ,CAAC,CAAC,UAAC,CAAC,EAAE,QAAQ,IAAK,OAAA,cAAc,CAAC,QAAQ,CAAC,EAAxB,CAAwB,CAAC,CACpD,OAAO,CAAC,CAAC,UAAU,CAAC,CACpB,WAAW,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,CACvB,CAAC,oBAAS,CACR,QAAQ,CACR,IAAI,MAAM,CAAC,CACX,KAAK,CAAC,KAAK,CACX,OAAO,CAAC,UAAU,CAClB,KAAK,CAAC,CAAC,OAAO,CAAC,CACf,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE,CAAC,CACtD,QAAQ,CAAC,CAAC,UAAC,CAAC,IAAK,OAAA,6BAA6B,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAA7C,CAA6C,CAAC,EAC/D,CACH,EAVwB,CAUxB,CAAC,EACF,CACH,CAAC;AACJ,CAAC,CAAC;AAhDW,QAAA,gBAAgB,oBAgD3B","sourcesContent":["import { Autocomplete, TextField } from '@mui/material';\nimport { FC, useState } from 'react';\nimport { useGetCreateExternalLabResources } from 'src/telemed';\nimport { useDebounce } from 'src/telemed';\nimport { nameLabTest, OrderableItemSearchResult } from 'utils';\n\ntype LabsAutocompleteProps = {\n  selectedLab: OrderableItemSearchResult | null;\n  setSelectedLab: (value: OrderableItemSearchResult | null) => void;\n};\n\nexport const LabsAutocomplete: FC<LabsAutocompleteProps> = (props) => {\n  const { selectedLab, setSelectedLab } = props;\n  const [debouncedLabSearchTerm, setDebouncedLabSearchTerm] = useState<string | undefined>(undefined);\n\n  const {\n    isFetching,\n    data,\n    isError,\n    error: resourceFetchError,\n  } = useGetCreateExternalLabResources({\n    search: debouncedLabSearchTerm,\n  });\n\n  const labs = data?.labs || [];\n\n  const { debounce } = useDebounce(800);\n  const debouncedHandleLabInputChange = (searchValue: string): void => {\n    debounce(() => {\n      setDebouncedLabSearchTerm(searchValue);\n    });\n  };\n\n  if (resourceFetchError) console.log('resourceFetchError', resourceFetchError);\n\n  return (\n    <Autocomplete\n      size=\"small\"\n      options={labs}\n      getOptionLabel={(option) => nameLabTest(option.item.itemName, option.lab.labName, false)}\n      noOptionsText={\n        debouncedLabSearchTerm && labs.length === 0 ? 'No labs based on input' : 'Start typing to load labs'\n      }\n      value={selectedLab}\n      onChange={(_, newValue) => setSelectedLab(newValue)}\n      loading={isFetching}\n      renderInput={(params) => (\n        <TextField\n          required\n          {...params}\n          label=\"Lab\"\n          variant=\"outlined\"\n          error={isError}\n          helperText={isError ? 'Failed to load labs list' : ''}\n          onChange={(e) => debouncedHandleLabInputChange(e.target.value)}\n        />\n      )}\n    />\n  );\n};\n"]}