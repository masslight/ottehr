{"version":3,"file":"LabsAutocompleteForPatient.js","sourceRoot":"","sources":["LabsAutocompleteForPatient.tsx"],"names":[],"mappings":";;;AAAA,0CAAwD;AAejD,IAAM,0BAA0B,GAAwC,UAAC,EAS/E;QARC,eAAe,qBAAA,EACf,eAAe,qBAAA,EACf,kBAAkB,wBAAA,EAClB,eAAe,EAAf,OAAO,mBAAG,KAAK,KAAA,EACf,aAAa,EAAb,KAAK,mBAAG,KAAK,KAAA,EACb,kBAAe,EAAf,UAAU,mBAAG,EAAE,KAAA,EACf,aAAmB,EAAnB,KAAK,mBAAG,WAAW,KAAA,EACnB,gBAAgB,EAAhB,QAAQ,mBAAG,KAAK,KAAA;IAEhB,IAAM,sBAAsB,GAAG,eAAe;QAC5C,CAAC,CAAC;YACE,IAAI,EAAE,eAAe,CAAC,IAAI,CAAC,QAAQ;YACnC,OAAO,EAAE,eAAe,CAAC,IAAI,CAAC,QAAQ;SACvC;QACH,CAAC,CAAC,IAAI,CAAC;IAET,IAAM,YAAY,GAAG,UAAC,CAAM,EAAE,QAA+B;QAC3D,IAAI,QAAQ,EAAE,CAAC;YACb,IAAM,aAAa,GAA8B;gBAC/C,IAAI,EAAE;oBACJ,QAAQ,EAAE,QAAQ,CAAC,IAAI;oBACvB,QAAQ,EAAE,QAAQ,CAAC,OAAO;oBAC1B,SAAS,EAAE,QAAQ,CAAC,IAAI;iBACzB;gBACD,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;aACQ,CAAC;YAC/B,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACpC,CAAC;aAAM,CAAC;YACN,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,uBAAY,CACX,IAAI,CAAC,OAAO,CACZ,OAAO,CAAC,CAAC,eAAe,CAAC,CACzB,cAAc,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,UAAG,MAAM,CAAC,OAAO,eAAK,MAAM,CAAC,IAAI,MAAG,EAApC,CAAoC,CAAC,CACjE,aAAa,CAAC,yCAAyC,CACvD,KAAK,CAAC,CAAC,sBAAsB,CAAC,CAC9B,QAAQ,CAAC,CAAC,YAAY,CAAC,CACvB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,oBAAoB,CAAC,CAAC,UAAC,MAAM,EAAE,KAAK,IAAK,OAAA,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAA1B,CAA0B,CAAC,CACpE,WAAW,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,CACvB,CAAC,oBAAS,CACR,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,IAAI,MAAM,CAAC,CACX,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,OAAO,CAAC,UAAU,CAClB,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,UAAU,CAAC,CAAC,UAAU,CAAC,EACvB,CACH,EATwB,CASxB,CAAC,EACF,CACH,CAAC;AACJ,CAAC,CAAC;AAvDW,QAAA,0BAA0B,8BAuDrC","sourcesContent":["import { Autocomplete, TextField } from '@mui/material';\nimport { FC } from 'react';\nimport { OrderableItemSearchResult, PatientLabItem } from 'utils';\n\ntype LabsAutocompleteForPatientProps = {\n  patientLabItems: PatientLabItem[];\n  selectedLabItem: OrderableItemSearchResult | null;\n  setSelectedLabItem: (value: OrderableItemSearchResult | null) => void;\n  loading?: boolean;\n  error?: boolean;\n  helperText?: string;\n  label?: string;\n  required?: boolean;\n};\n\nexport const LabsAutocompleteForPatient: FC<LabsAutocompleteForPatientProps> = ({\n  patientLabItems,\n  selectedLabItem,\n  setSelectedLabItem,\n  loading = false,\n  error = false,\n  helperText = '',\n  label = 'Test Type',\n  required = false,\n}) => {\n  const selectedPatientLabItem = selectedLabItem\n    ? {\n        code: selectedLabItem.item.itemCode,\n        display: selectedLabItem.item.itemName,\n      }\n    : null;\n\n  const handleChange = (_: any, newValue: PatientLabItem | null): void => {\n    if (newValue) {\n      const orderableItem: OrderableItemSearchResult = {\n        item: {\n          itemCode: newValue.code,\n          itemName: newValue.display,\n          itemLoinc: newValue.code,\n        },\n        lab: { labName: '' },\n      } as OrderableItemSearchResult;\n      setSelectedLabItem(orderableItem);\n    } else {\n      setSelectedLabItem(null);\n    }\n  };\n\n  return (\n    <Autocomplete\n      size=\"small\"\n      options={patientLabItems}\n      getOptionLabel={(option) => `${option.display} (${option.code})`}\n      noOptionsText=\"No lab tests available for this patient\"\n      value={selectedPatientLabItem}\n      onChange={handleChange}\n      loading={loading}\n      isOptionEqualToValue={(option, value) => option.code === value.code}\n      renderInput={(params) => (\n        <TextField\n          required={required}\n          {...params}\n          label={label}\n          variant=\"outlined\"\n          error={error}\n          helperText={helperText}\n        />\n      )}\n    />\n  );\n};\n"]}