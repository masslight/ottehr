{"version":3,"file":"OrderHistoryCard.js","sourceRoot":"","sources":["OrderHistoryCard.tsx"],"names":[],"mappings":";;;AAAA,0CAA2D;AAC3D,+BAAwC;AACxC,+BAA2D;AAE3D,2EAA0E;AAC1E,mEAA+D;AAUxD,IAAM,gBAAgB,GAAgC,UAAC,EAK7D;QAJC,mBAAmB,EAAnB,WAAW,mBAAG,KAAK,KAAA,EACnB,oBAAiB,EAAjB,YAAY,mBAAG,EAAE,KAAA,EACjB,QAAQ,cAAA,EACR,cAAc,oBAAA;IAER,IAAA,KAA4B,IAAA,gBAAQ,EAAC,WAAW,CAAC,EAAhD,SAAS,QAAA,EAAE,YAAY,QAAyB,CAAC;IAExD,OAAO,CACL,EACE;MAAA,CAAC,6BAAa,CACZ,KAAK,CAAC,CAAC,eAAe,CAAC,CACvB,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,UAAU,CAAC,CAAC,KAAK,CAAC,CAClB,QAAQ,CAAC,CAAC;YACR,YAAY,CAAC,UAAC,SAAS,IAAK,OAAA,CAAC,SAAS,EAAV,CAAU,CAAC,CAAC;QAC1C,CAAC,CAAC,CAEF;QAAA,CAAC,gBAAK,CACJ;UAAA,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,GAAG;YACpB,IAAM,uBAAuB,GAC3B,GAAG,CAAC,MAAM,KAAK,UAAU,IAAI,GAAG,CAAC,MAAM,KAAK,UAAU,IAAI,GAAG,CAAC,MAAM,KAAK,WAAW,CAAC;YACvF,OAAO,CACL,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,UAAG,GAAG,CAAC,MAAM,cAAI,GAAG,CAAC,SAAS,cAAI,GAAG,CAAC,IAAI,CAAE,CAAC,CAC1D;gBAAA,CAAC,oBAAS,CACR;kBAAA,CAAC,CAAC,4CAAmB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAG,CAC5C;kBAAA,CAAC,uBAAuB,CAAC,CAAC,CAAC,YAAK,GAAG,CAAC,QAAQ,MAAG,CAAC,CAAC,CAAC,EAAE,CACtD;gBAAA,EAAE,oBAAS,CACX;gBAAA,CAAC,oBAAS,CACR;kBAAA,CAAC,GAAG,CAAC,MAAM,KAAK,WAAW,IAAI,cAAc;oBAC3C,CAAC,CAAC,uBAAe;oBACjB,CAAC,CAAC,GAAG,CAAC,SAAS;wBACf,CAAC,CAAC,aAAM,GAAG,CAAC,SAAS,CAAE;wBACvB,CAAC,CAAC,EAAE,CACR;gBAAA,EAAE,oBAAS,CACX;gBAAA,CAAC,oBAAS,CAAC,CAAC,IAAA,yBAAiB,EAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAE,oBAAS,CAC/D;cAAA,EAAE,mBAAQ,CAAC,CACZ,CAAC;QACJ,CAAC,CAAC,CACJ;QAAA,EAAE,gBAAK,CACT;MAAA,EAAE,6BAAa,CACjB;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC;AA3CW,QAAA,gBAAgB,oBA2C3B","sourcesContent":["import { Table, TableCell, TableRow } from '@mui/material';\nimport React, { useState } from 'react';\nimport { formatDateForLabs, PSC_HOLD_LOCALE } from 'utils';\nimport { LabOrderHistoryRow } from 'utils/lib/types/data/labs/labs.types';\nimport { AccordionCard } from '../../../telemed/components/AccordionCard';\nimport { LabsOrderStatusChip } from './ExternalLabsStatusChip';\n\ninterface OrderHistoryProps {\n  isLoading?: boolean;\n  isCollapsed?: boolean;\n  orderHistory?: LabOrderHistoryRow[];\n  timezone: string | undefined;\n  isPSCPerformed?: boolean;\n}\n\nexport const OrderHistoryCard: React.FC<OrderHistoryProps> = ({\n  isCollapsed = false,\n  orderHistory = [],\n  timezone,\n  isPSCPerformed,\n}) => {\n  const [collapsed, setCollapsed] = useState(isCollapsed);\n\n  return (\n    <>\n      <AccordionCard\n        label={'Order History'}\n        collapsed={collapsed}\n        withBorder={false}\n        onSwitch={() => {\n          setCollapsed((prevState) => !prevState);\n        }}\n      >\n        <Table>\n          {orderHistory.map((row) => {\n            const isReviewOrReceiveAction =\n              row.action === 'reviewed' || row.action === 'received' || row.action === 'corrected';\n            return (\n              <TableRow key={`${row.action}-${row.performer}-${row.date}`}>\n                <TableCell>\n                  {<LabsOrderStatusChip status={row.action} />}\n                  {isReviewOrReceiveAction ? ` (${row.testType})` : ''}\n                </TableCell>\n                <TableCell>\n                  {row.action === 'performed' && isPSCPerformed\n                    ? PSC_HOLD_LOCALE\n                    : row.performer\n                    ? `by ${row.performer}`\n                    : ''}\n                </TableCell>\n                <TableCell>{formatDateForLabs(row.date, timezone)}</TableCell>\n              </TableRow>\n            );\n          })}\n        </Table>\n      </AccordionCard>\n    </>\n  );\n};\n"]}