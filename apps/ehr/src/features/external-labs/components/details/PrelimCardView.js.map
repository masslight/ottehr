{"version":3,"file":"PrelimCardView.js","sourceRoot":"","sources":["PrelimCardView.tsx"],"names":[],"mappings":";;;AAAA,0CAA+D;AAE/D,+BAA0C;AAUnC,IAAM,cAAc,GAA4B,UAAC,EAMvD;QALC,YAAY,kBAAA,EACZ,YAAY,kBAAA,EACZ,YAAY,kBAAA,EACZ,YAAY,kBAAA,EACZ,QAAQ,cAAA;IAER,IAAM,YAAY,GAAG;QACnB,OAAO,YAAY;YACjB,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,IAAA,yBAAiB,EAAC,YAAY,EAAE,QAAQ,CAAC,EAAE;YACxE,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,IAAA,yBAAiB,EAAC,YAAY,EAAE,QAAQ,CAAC,EAAE,CAAC;IAC7E,CAAC,CAAC;IAEF,IAAM,OAAO,GAAG;QACd,IAAI,YAAY,EAAE,CAAC;YACjB,uJAAuJ;YACvJ,gHAAgH;YAChH,YAAY,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QACtC,CAAC;IACH,CAAC,CAAC;IAEI,IAAA,KAAkB,YAAY,EAAE,EAA9B,KAAK,WAAA,EAAE,IAAI,UAAmB,CAAC;IAEvC,OAAO,CACL,CAAC,gBAAK,CACJ,SAAS,CAAC,CAAC,CAAC,CAAC,CACb,EAAE,CAAC,CAAC;YACF,OAAO,EAAE,MAAM;YACf,cAAc,EAAE,eAAe;YAC/B,UAAU,EAAE,QAAQ;YACpB,CAAC,EAAE,CAAC;YACJ,YAAY,EAAE,CAAC;YACf,MAAM,EAAE,mBAAmB;YAC3B,eAAe,EAAE,MAAM;SACxB,CAAC,CAEF;MAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CACzD;QAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,cAAc,CAC9C;+BAAqB,CAAC,KAAK,CAAE,CAAA,CAAC,IAAI,CAAC;QACrC,EAAE,qBAAU,CACd;MAAA,EAAE,cAAG,CAEL;;MAAA,CAAC,iBAAM,CACL,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,CACxB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,OAAO,CAAC,MAAM,CACd,KAAK,CAAC,SAAS,CACf,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,aAAa,EAAE,MAAM,EAAE,CAAC,CAE/C;;MACF,EAAE,iBAAM,CACV;IAAA,EAAE,gBAAK,CAAC,CACT,CAAC;AACJ,CAAC,CAAC;AAtDW,QAAA,cAAc,kBAsDzB","sourcesContent":["import { Box, Button, Paper, Typography } from '@mui/material';\nimport { FC } from 'react';\nimport { formatDateForLabs } from 'utils';\n\ninterface PrelimCardViewProps {\n  resultPdfUrl: string | null;\n  receivedDate: string | null;\n  reviewedDate: string | null;\n  onPrelimView: () => void;\n  timezone: string | undefined;\n}\n\nexport const PrelimCardView: FC<PrelimCardViewProps> = ({\n  resultPdfUrl,\n  receivedDate,\n  reviewedDate,\n  onPrelimView,\n  timezone,\n}) => {\n  const getDateEvent = (): { event: 'received' | 'reviewed'; date: string } => {\n    return receivedDate\n      ? { event: 'received', date: formatDateForLabs(receivedDate, timezone) }\n      : { event: 'reviewed', date: formatDateForLabs(reviewedDate, timezone) };\n  };\n\n  const openPdf = (): void => {\n    if (resultPdfUrl) {\n      // additional handling for prelim, prelim resources are marked as reviewed when pdf is viewed (resources are updated, but we didn't show it in the UI),\n      // the final results resources are marked as reviewed by clicking on \"mark as reviewed\" and we show it in the UI\n      onPrelimView();\n      window.open(resultPdfUrl, '_blank');\n    }\n  };\n\n  const { event, date } = getDateEvent();\n\n  return (\n    <Paper\n      elevation={0}\n      sx={{\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        p: 2,\n        borderRadius: 1,\n        border: '1px solid #e0e0e0',\n        backgroundColor: '#fff',\n      }}\n    >\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n        <Typography variant=\"body1\" color=\"text.primary\">\n          Preliminary results ({event} {date})\n        </Typography>\n      </Box>\n\n      <Button\n        disabled={!resultPdfUrl}\n        onClick={openPdf}\n        variant=\"text\"\n        color=\"primary\"\n        sx={{ fontWeight: 700, textTransform: 'none' }}\n      >\n        View\n      </Button>\n    </Paper>\n  );\n};\n"]}