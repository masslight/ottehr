{"version":3,"file":"OrderDetails.js","sourceRoot":"","sources":["OrderDetails.tsx"],"names":[],"mappings":";;;AAAA,+BAA0B;AAC1B,qDAA6C;AAC7C,+EAA0E;AAC1E,qFAAoF;AACpF,+EAA8E;AAC9E,2EAA0E;AAC1E,6EAA4E;AAC5E,qFAAoF;AAE7E,IAAM,gBAAgB,GAAa;IACxC,IAAM,SAAS,GAAG,IAAA,4BAAS,GAAE,CAAC;IAC9B,IAAM,gBAAgB,GAAG,SAAS,CAAC,gBAA0B,CAAC;IAExD,IAAA,KAA6C,IAAA,yCAAmB,EAAC;QACrE,QAAQ,EAAE,EAAE,KAAK,EAAE,kBAAkB,EAAE,KAAK,EAAE,gBAAgB,EAAE;KACjE,CAAC,EAFM,SAAS,eAAA,EAAE,OAAO,aAAA,EAAE,kBAAkB,wBAE5C,CAAC;IAEH,2EAA2E;IAC3E,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,gBAAgB,KAAK,gBAAgB,EAA3C,CAA2C,CAAC,CAAC;IAExF,IAAM,MAAM,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,WAAW,CAAC;IAErC,IAAI,OAAO,EAAE,CAAC;QACZ,OAAO,CAAC,iCAAe,CAAC,AAAD,EAAG,CAAC;IAC7B,CAAC;IAED,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,OAAO,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAM,QAAQ,GAAG,UAAG,QAAQ,CAAC,QAAQ,SAAG,QAAQ,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAE,CAAC;IAE7F,IAAI,MAAM,KAAK,SAAS,KAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,CAAC,MAAM,CAAC,CAAA,EAAE,CAAC;QACrD,OAAO,CACL,CAAC,6BAAmB,CAClB;QAAA,CAAC,+BAAc,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CACpC;UAAA,CAAC,6CAAqB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAC5C;QAAA,EAAE,+BAAc,CAClB;MAAA,EAAE,6BAAmB,CAAC,CACvB,CAAC;IACJ,CAAC;IAED,OAAO,CACL,CAAC,6BAAmB,CAClB;MAAA,CAAC,+BAAc,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,CACpC;QAAA,CAAC,uCAAkB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EACnG;MAAA,EAAE,+BAAc,CAClB;IAAA,EAAE,6BAAmB,CAAC,CACvB,CAAC;AACJ,CAAC,CAAC;AAzCW,QAAA,gBAAgB,oBAyC3B","sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport DetailPageContainer from 'src/features/common/DetailPageContainer';\nimport { DetailsWithoutResults } from '../components/details/DetailsWithoutResults';\nimport { DetailsWithResults } from '../components/details/DetailsWithResults';\nimport { LabBreadcrumbs } from '../components/labs-orders/LabBreadcrumbs';\nimport { LabOrderLoading } from '../components/labs-orders/LabOrderLoading';\nimport { usePatientLabOrders } from '../components/labs-orders/usePatientLabOrders';\n\nexport const OrderDetailsPage: React.FC = () => {\n  const urlParams = useParams();\n  const serviceRequestId = urlParams.serviceRequestID as string;\n\n  const { labOrders, loading, markTaskAsReviewed } = usePatientLabOrders({\n    searchBy: { field: 'serviceRequestId', value: serviceRequestId },\n  });\n\n  // todo: validate response on the get-lab-orders zambda and use labOrder[0]\n  const labOrder = labOrders.find((order) => order.serviceRequestId === serviceRequestId);\n\n  const status = labOrder?.orderStatus;\n\n  if (loading) {\n    return <LabOrderLoading />;\n  }\n\n  if (!labOrder) {\n    console.error('No external lab order found');\n    return null;\n  }\n\n  const pageName = `${labOrder.testItem}${labOrder.reflexResultsCount > 0 ? ' + Reflex' : ''}`;\n\n  if (status === 'pending' || status?.includes('sent')) {\n    return (\n      <DetailPageContainer>\n        <LabBreadcrumbs sectionName={pageName}>\n          <DetailsWithoutResults labOrder={labOrder} />\n        </LabBreadcrumbs>\n      </DetailPageContainer>\n    );\n  }\n\n  return (\n    <DetailPageContainer>\n      <LabBreadcrumbs sectionName={pageName}>\n        <DetailsWithResults labOrder={labOrder} markTaskAsReviewed={markTaskAsReviewed} loading={loading} />\n      </LabBreadcrumbs>\n    </DetailPageContainer>\n  );\n};\n"]}