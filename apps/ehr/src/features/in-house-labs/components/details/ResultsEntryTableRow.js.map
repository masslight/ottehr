{"version":3,"file":"ResultsEntryTableRow.js","sourceRoot":"","sources":["ResultsEntryTableRow.tsx"],"names":[],"mappings":"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","sourcesContent":["import { SxProps, TableCell, TableRow, Theme, Typography } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { OBSERVATION_CODES, quantityRangeFormat, TestItemComponent } from 'utils';\nimport { ResultEntrySelect } from './ResultEntrySelect';\nimport { ResultEntryNumericInput } from './ResultsEntryNumericInput';\n\ninterface ResultEntryTableRowProps {\n  component: TestItemComponent;\n  isLastRow: boolean;\n  disabled?: boolean; // equates to the final view\n}\n\nconst ROW_STYLING = { paddingLeft: 0 };\n\nexport const ResultEntryTableRow: React.FC<ResultEntryTableRowProps> = ({ component, disabled, isLastRow }) => {\n  const [isAbnormal, setIsAbnormal] = useState<boolean>(false);\n  console.log('component', component.result);\n\n  useEffect(() => {\n    if (component.result?.interpretationCode) {\n      const code = component.result?.interpretationCode;\n      if (code === OBSERVATION_CODES.ABNORMAL) {\n        setIsAbnormal(true);\n      }\n    }\n  }, [component.result]);\n\n  let units = '';\n  let referenceRange = '';\n  let valueElement = <div>Could not parse input type</div>;\n  if (component.dataType === 'Quantity') {\n    units = component.unit;\n    referenceRange = quantityRangeFormat(component);\n  }\n  if (component.dataType === 'CodeableConcept') {\n    units = component.unit ?? '';\n    referenceRange =\n      component.referenceRangeValues\n        ?.map((refRange) => {\n          return refRange.display.charAt(0).toUpperCase() + refRange.display.slice(1);\n        })\n        .join(', ') ?? '';\n  }\n  if (component.displayType === 'Numeric') {\n    valueElement = (\n      <ResultEntryNumericInput\n        testItemComponent={component}\n        isAbnormal={isAbnormal}\n        setIsAbnormal={setIsAbnormal}\n        disabled={disabled}\n      />\n    );\n  }\n  if (component.displayType === 'Select') {\n    valueElement = (\n      <ResultEntrySelect\n        testItemComponent={component}\n        isAbnormal={isAbnormal}\n        setIsAbnormal={setIsAbnormal}\n        disabled={disabled}\n      />\n    );\n  }\n\n  const rowStyling: SxProps<Theme> = isLastRow\n    ? { ...ROW_STYLING, borderBottom: 'none', paddingBottom: 0 }\n    : ROW_STYLING;\n\n  return (\n    <TableRow>\n      <TableCell sx={rowStyling}>\n        <Typography variant=\"body1\" sx={{ color: `${isAbnormal ? 'error.dark' : ''}` }}>\n          {component.componentName}\n        </Typography>\n      </TableCell>\n      <TableCell sx={rowStyling}>{valueElement}</TableCell>\n      <TableCell sx={rowStyling}>\n        <Typography variant=\"body1\">{units}</Typography>\n      </TableCell>\n      <TableCell sx={rowStyling}>\n        <Typography variant=\"body1\">{referenceRange}</Typography>\n      </TableCell>\n    </TableRow>\n  );\n};\n"]}