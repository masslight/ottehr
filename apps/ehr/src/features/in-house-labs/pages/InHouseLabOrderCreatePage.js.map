{"version":3,"file":"InHouseLabOrderCreatePage.js","sourceRoot":"","sources":["InHouseLabOrderCreatePage.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Autocomplete,\n  Box,\n  Button,\n  Checkbox,\n  Chip,\n  CircularProgress,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  Stack,\n  TextField,\n  Typography,\n  useTheme,\n} from '@mui/material';\nimport Oystehr from '@oystehr/sdk';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport DetailPageContainer from 'src/features/common/DetailPageContainer';\nimport { getAttendingPractitionerId, isApiError, TestItem } from 'utils';\nimport { DiagnosisDTO } from 'utils/lib/types/api/chart-data';\nimport { createInHouseLabOrder, getCreateInHouseLabOrderResources, getOrCreateVisitLabel } from '../../../api/api';\nimport { useApiClients } from '../../../hooks/useAppClients';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { ActionsList, DeleteIconButton, useDebounce, useGetIcd10Search } from '../../../telemed';\nimport { useAppointmentStore } from '../../../telemed/state/appointment/appointment.store';\nimport { InHouseLabsNotesCard } from '../components/details/InHouseLabsNotesCard';\nimport { InHouseLabsBreadcrumbs } from '../components/InHouseLabsBreadcrumbs';\n\nexport const InHouseLabOrderCreatePage: React.FC = () => {\n  const theme = useTheme();\n  const { oystehrZambda } = useApiClients();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [loading, setLoading] = useState(false);\n  const [availableTests, setAvailableTests] = useState<TestItem[]>([]);\n  const [selectedTest, setSelectedTest] = useState<TestItem | null>(null);\n  const [relatedCptCode, setRelatedCptCode] = useState<string>('');\n  const [notes, setNotes] = useState<string>('');\n  const [providerName, setProviderName] = useState<string>('');\n  const [error, setError] = useState<string[] | undefined>(undefined);\n  const [repeatTest, setRepeatTest] = useState<boolean>(false);\n\n  const prefillData = location.state as {\n    testItemName?: string;\n    diagnoses?: DiagnosisDTO[];\n  };\n\n  const { chartData, encounter, appointment, setPartialChartData } = getSelectors(useAppointmentStore, [\n    'chartData',\n    'encounter',\n    'appointment',\n    'setPartialChartData',\n  ]);\n\n  const { diagnosis = [] } = chartData || {};\n  const didPrimaryDiagnosisInit = useRef(false);\n\n  // already added diagnoses may have \"added via in-house lab order\" flag with true and false values\n  // so, the \"select dx\" dropdown will show all diagnoses that are displayed on the Assessment page regardless of their source\n  const [selectedAssessmentDiagnoses, setSelectedAssessmentDiagnoses] = useState<DiagnosisDTO[]>([]);\n\n  // new diagnoses, the will have \"added via in-house lab order\" flag with true value,\n  // and they will be linked to appointment resources in the create-in-house-lab-order zambda\n  const [selectedNewDiagnoses, setSelectedNewDiagnoses] = useState<DiagnosisDTO[]>([]);\n\n  // init selectedAssessmentDiagnoses with primary diagnosis\n  useEffect(() => {\n    if (didPrimaryDiagnosisInit.current) {\n      return;\n    }\n    const primaryDiagnosis = [chartData?.diagnosis?.find((d) => d.isPrimary)].filter((d): d is DiagnosisDTO => !!d);\n\n    if (primaryDiagnosis.length && !selectedAssessmentDiagnoses.length) {\n      setSelectedAssessmentDiagnoses(primaryDiagnosis);\n      didPrimaryDiagnosisInit.current = true;\n    }\n  }, [chartData?.diagnosis, selectedAssessmentDiagnoses]);\n\n  // used to fetch dx icd10 codes\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');\n  const { isFetching: isSearching, data } = useGetIcd10Search({ search: debouncedSearchTerm, sabs: 'ICD10CM' });\n  const icdSearchOptions = data?.codes || [];\n  const { debounce } = useDebounce(800);\n  const debouncedHandleInputChange = (data: string): void => {\n    debounce(() => {\n      setDebouncedSearchTerm(data);\n    });\n  };\n\n  const attendingPractitionerId = getAttendingPractitionerId(encounter);\n\n  useEffect(() => {\n    if (!oystehrZambda) {\n      return;\n    }\n\n    const fetchLabs = async (): Promise<void> => {\n      try {\n        setLoading(true);\n        const response = await getCreateInHouseLabOrderResources(oystehrZambda, {\n          encounterId: encounter.id,\n        });\n        const testItems = Object.values(response.labs || {});\n        setAvailableTests(testItems.sort((a, b) => a.name.localeCompare(b.name)));\n        setProviderName(response.providerName);\n      } catch (error) {\n        console.error('Error fetching labs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (encounter.id) {\n      void fetchLabs();\n    }\n  }, [oystehrZambda, encounter?.id]);\n\n  useEffect(() => {\n    if (prefillData) {\n      const { testItemName, diagnoses } = prefillData;\n      if (testItemName) {\n        const found = availableTests.find((test) => test.name === testItemName);\n        console.log('found', found);\n        if (found) {\n          setSelectedTest(found);\n          setRepeatTest(true);\n          setRelatedCptCode(found.cptCode[0]); // we dont have any tests with more than one\n        }\n      }\n      if (diagnoses) {\n        setSelectedAssessmentDiagnoses(diagnoses);\n      }\n    }\n  }, [prefillData, availableTests]);\n\n  const handleBack = (): void => {\n    navigate(-1);\n  };\n\n  const canBeSubmitted = !!(encounter?.id && selectedTest && relatedCptCode);\n\n  const handleSubmit = async (e: React.FormEvent | React.MouseEvent, shouldPrintLabel = false): Promise<void> => {\n    e.preventDefault();\n    setLoading(true);\n    const GENERIC_ERROR_MSG = 'There was an error creating in-house lab order';\n    if (oystehrZambda && canBeSubmitted) {\n      try {\n        const res = await createInHouseLabOrder(oystehrZambda, {\n          encounterId: encounter.id!,\n          testItem: selectedTest,\n          cptCode: relatedCptCode,\n          diagnosesAll: [...selectedAssessmentDiagnoses, ...selectedNewDiagnoses],\n          diagnosesNew: selectedNewDiagnoses,\n          isRepeatTest: repeatTest,\n          notes: notes,\n        });\n\n        let savedDiagnoses: DiagnosisDTO[] = [];\n\n        try {\n          savedDiagnoses = res?.saveChartDataResponse?.output?.chartData?.diagnosis || [];\n        } catch (error) {\n          console.error('Failed to extract diagnosis from response:', error);\n        }\n\n        // update chart data local state with new diagnoses after successful creation to see actual diagnoses in the Assessment page\n        setPartialChartData({\n          diagnosis: [...(chartData?.diagnosis || []), ...savedDiagnoses],\n        });\n\n        if (shouldPrintLabel) {\n          const labelPdfs = await getOrCreateVisitLabel(oystehrZambda, { encounterId: encounter.id! });\n\n          if (labelPdfs.length !== 1) {\n            setError(['Expected 1 label pdf, received unexpected number']);\n          }\n\n          const labelPdf = labelPdfs[0];\n          window.open(labelPdf.presignedURL, '_blank');\n        }\n\n        if (res.serviceRequestId) {\n          navigate(`/in-person/${appointment?.id}/in-house-lab-orders/${res.serviceRequestId}/order-details`);\n        }\n      } catch (e) {\n        const sdkError = e as Oystehr.OystehrSdkError;\n        console.error('error creating in house lab order', sdkError.code, sdkError.message);\n        if (isApiError(sdkError)) {\n          console.log('is api error');\n          setError([sdkError.message || GENERIC_ERROR_MSG]);\n        } else {\n          setError([GENERIC_ERROR_MSG]);\n        }\n      } finally {\n        setLoading(false);\n      }\n    } else if (!canBeSubmitted) {\n      const errorMessage: string[] = [];\n      if (!selectedTest) errorMessage.push('Please select a test to order');\n      if (!attendingPractitionerId) errorMessage.push('No attending practitioner has been assigned to this encounter');\n      if (errorMessage.length === 0) errorMessage.push(GENERIC_ERROR_MSG);\n      setError(errorMessage);\n      setLoading(false);\n    }\n  };\n\n  const handleTestSelection = (selectedTest: string): void => {\n    if (!availableTests?.length) {\n      return;\n    }\n\n    const foundEntry = availableTests.find((test) => test.name === selectedTest);\n\n    if (!foundEntry) {\n      return;\n    }\n\n    setSelectedTest(foundEntry);\n    setRelatedCptCode(foundEntry.cptCode[0]); // we dont have any tests with more than one\n  };\n\n  return (\n    <DetailPageContainer>\n      <InHouseLabsBreadcrumbs pageName=\"Order In-House Lab\">\n        <Typography variant=\"h4\" color=\"primary.dark\" sx={{ mb: 3 }}>\n          Order In-house Lab\n        </Typography>\n\n        <Paper sx={{ p: 4 }}>\n          {loading ? (\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"200px\">\n              <CircularProgress />\n            </Box>\n          ) : (\n            <form onSubmit={handleSubmit}>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <FormControl\n                    fullWidth\n                    required\n                    sx={{\n                      '& .MuiInputBase-root': {\n                        height: '40px',\n                      },\n                      '& .MuiSelect-select': {\n                        display: 'flex',\n                        alignItems: 'center',\n                        paddingTop: 0,\n                        paddingBottom: 0,\n                      },\n                    }}\n                  >\n                    <InputLabel\n                      id=\"test-type-label\"\n                      sx={{\n                        transform: 'translate(14px, 10px) scale(1)',\n                        '&.MuiInputLabel-shrink': {\n                          transform: 'translate(14px, -9px) scale(0.75)',\n                        },\n                      }}\n                    >\n                      Test\n                    </InputLabel>\n                    <Select\n                      labelId=\"test-type-label\"\n                      id=\"test-type\"\n                      value={selectedTest?.name || ''}\n                      label=\"Test\"\n                      onChange={(e) => handleTestSelection(e.target.value)}\n                    >\n                      {availableTests.map((test) => (\n                        <MenuItem key={test.name} value={test.name}>\n                          {test.name}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n\n                {relatedCptCode && (\n                  <>\n                    <Grid item xs={selectedTest?.repeatable ? 8.5 : 12}>\n                      <TextField\n                        InputProps={{\n                          readOnly: true,\n                          sx: {\n                            '& input': {\n                              cursor: 'default',\n                            },\n                            height: '40px',\n                          },\n                        }}\n                        fullWidth\n                        label=\"CPT Code\"\n                        focused={false}\n                        value={relatedCptCode}\n                        sx={{\n                          '& .MuiOutlinedInput-root': {\n                            '&:hover .MuiOutlinedInput-notchedOutline': {\n                              borderColor: 'rgba(0, 0, 0, 0.23)',\n                            },\n                          },\n                        }}\n                      />\n                    </Grid>\n                    {selectedTest?.repeatable && (\n                      <Grid item xs={3.5}>\n                        <FormControlLabel\n                          sx={{\n                            backgroundColor: 'transparent',\n                            pr: 0,\n                          }}\n                          control={\n                            <Checkbox size=\"small\" checked={repeatTest} onChange={() => setRepeatTest(!repeatTest)} />\n                          }\n                          label={<Typography variant=\"body1\">Run as Repeat</Typography>}\n                        />\n                      </Grid>\n                    )}\n                  </>\n                )}\n\n                {repeatTest && (\n                  <>\n                    <Grid item xs={10}>\n                      <TextField\n                        InputProps={{\n                          readOnly: true,\n                          sx: {\n                            '& input': {\n                              cursor: 'default',\n                            },\n                            height: '40px',\n                          },\n                        }}\n                        fullWidth\n                        label=\"CPT Code Modifier\"\n                        focused={false}\n                        value={'91'}\n                        sx={{\n                          '& .MuiOutlinedInput-root': {\n                            '&:hover .MuiOutlinedInput-notchedOutline': {\n                              borderColor: 'rgba(0, 0, 0, 0.23)',\n                            },\n                          },\n                        }}\n                      />\n                    </Grid>\n                    {/* indicates that the test is “CLIA waived”, should just be hardcoded for repeats */}\n                    <Grid item xs={2} sx={{ display: 'flex', alignItems: 'center' }}>\n                      <Typography variant=\"body1\">QW</Typography>\n                    </Grid>\n                  </>\n                )}\n\n                <Grid item xs={12}>\n                  <FormControl\n                    fullWidth\n                    sx={{\n                      '& .MuiInputBase-root': {\n                        height: '40px',\n                      },\n                      '& .MuiSelect-select': {\n                        display: 'flex',\n                        alignItems: 'center',\n                        paddingTop: 0,\n                        paddingBottom: 0,\n                      },\n                    }}\n                  >\n                    <InputLabel\n                      id=\"diagnosis-label\"\n                      sx={{\n                        transform: 'translate(14px, 10px) scale(1)',\n                        '&.MuiInputLabel-shrink': {\n                          transform: 'translate(14px, -9px) scale(0.75)',\n                        },\n                      }}\n                    >\n                      Select Dx\n                    </InputLabel>\n                    <Select\n                      labelId=\"diagnosis-label\"\n                      id=\"diagnosis\"\n                      multiple\n                      value={selectedAssessmentDiagnoses.map((dx) => dx.code)}\n                      label=\"Select Dx\"\n                      onChange={(e) => {\n                        const dxCodesFromSelect = Array.isArray(e.target.value) ? e.target.value : [e.target.value];\n\n                        const diagnosesFomSelect = dxCodesFromSelect\n                          .map((code) => diagnosis.find((dx) => dx.code === code))\n                          .filter((dx): dx is DiagnosisDTO => Boolean(dx));\n\n                        setSelectedAssessmentDiagnoses([...diagnosesFomSelect]);\n                      }}\n                      renderValue={(selected) => {\n                        if (selected.length === 0) {\n                          return <em>Select diagnoses</em>;\n                        }\n                        return selected.map((code) => {\n                          const dx = diagnosis.find((d) => d.code === code);\n                          return dx ? <Chip key={dx.code} size=\"small\" label={`${dx.code} ${dx.display}`} /> : code;\n                        });\n                      }}\n                    >\n                      {diagnosis?.map((dx) => (\n                        <MenuItem key={dx.code} value={dx.code}>\n                          {dx.code} {dx.display}\n                        </MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <Autocomplete\n                    blurOnSelect\n                    id=\"select-additional-dx\"\n                    size=\"small\"\n                    fullWidth\n                    filterOptions={(x) => x}\n                    noOptionsText={\n                      debouncedSearchTerm && icdSearchOptions.length === 0\n                        ? 'Nothing found for this search criteria'\n                        : 'Start typing to load results'\n                    }\n                    value={null}\n                    isOptionEqualToValue={(option, value) => value.code === option.code}\n                    onChange={(_event, selectedDx) => {\n                      if (!selectedDx) {\n                        return;\n                      }\n                      const alreadySelected =\n                        selectedNewDiagnoses.find((tempDx) => tempDx.code === selectedDx?.code) ||\n                        selectedAssessmentDiagnoses.find((tempDx) => tempDx.code === selectedDx?.code);\n                      if (!alreadySelected) {\n                        setSelectedNewDiagnoses((diagnoses) => [\n                          ...diagnoses,\n                          { ...selectedDx, addedViaLabOrder: true, isPrimary: false },\n                        ]);\n                      } else {\n                        enqueueSnackbar('This Dx is already added to the order', {\n                          variant: 'error',\n                        });\n                      }\n                    }}\n                    loading={isSearching}\n                    options={icdSearchOptions}\n                    getOptionLabel={(option) =>\n                      typeof option === 'string' ? option : `${option.code} ${option.display}`\n                    }\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        onChange={(e) => debouncedHandleInputChange(e.target.value)}\n                        label=\"Additional Dx\"\n                        placeholder=\"Search for Dx if not on list above\"\n                        InputLabelProps={{ shrink: true }}\n                      />\n                    )}\n                  />\n                </Grid>\n\n                {(selectedAssessmentDiagnoses.length > 0 || selectedNewDiagnoses.length > 0) && (\n                  <Grid item xs={12}>\n                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                      <ActionsList\n                        data={selectedAssessmentDiagnoses}\n                        getKey={(value, index) => value.resourceId || index}\n                        renderItem={(value) => (\n                          <Typography>\n                            {value.display} {value.code}\n                          </Typography>\n                        )}\n                        renderActions={(value) => (\n                          <DeleteIconButton\n                            onClick={() =>\n                              setSelectedAssessmentDiagnoses((diagnoses) =>\n                                diagnoses.filter((dxVal) => dxVal.code !== value.code)\n                              )\n                            }\n                          />\n                        )}\n                      />\n                      <ActionsList\n                        data={selectedNewDiagnoses}\n                        getKey={(value, index) => value.resourceId || index}\n                        renderItem={(value) => (\n                          <Typography>\n                            {value.display} {value.code}\n                          </Typography>\n                        )}\n                        renderActions={(value) => (\n                          <DeleteIconButton\n                            onClick={() =>\n                              setSelectedNewDiagnoses((diagnoses) =>\n                                diagnoses.filter((dxVal) => dxVal.code !== value.code)\n                              )\n                            }\n                          />\n                        )}\n                      />\n                    </Box>\n                  </Grid>\n                )}\n\n                {/* <Grid item xs={12}>\n                  <TextField\n                    fullWidth\n                    id=\"notes\"\n                    label=\"Notes (optional)\"\n                    multiline\n                    rows={4}\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                  />\n                </Grid> */}\n\n                <Grid item xs={12}>\n                  <InHouseLabsNotesCard\n                    notes={notes}\n                    notesLabel={'Notes (optional)'}\n                    readOnly={false}\n                    additionalBoxSxProps={{ mb: 3 }}\n                    additionalTextFieldProps={{ minRows: 4 }}\n                    handleNotesUpdate={(newNote: string) => setNotes(newNote)}\n                  />\n                </Grid>\n\n                {providerName && (\n                  <Grid item xs={12}>\n                    <Typography variant=\"body1\" sx={{ mt: 2 }}>\n                      Ordering provider: {providerName}\n                    </Typography>\n                  </Grid>\n                )}\n\n                <Grid item xs={12} sx={{ mt: 3 }}>\n                  <Stack direction=\"row\" spacing={2} justifyContent=\"space-between\">\n                    <Button\n                      variant=\"outlined\"\n                      onClick={handleBack}\n                      sx={{\n                        borderRadius: '50px',\n                        px: 4,\n                        py: 1,\n                      }}\n                    >\n                      Cancel\n                    </Button>\n                    <Box>\n                      <Button\n                        variant=\"contained\"\n                        onClick={(e) => handleSubmit(e, true)}\n                        disabled={!canBeSubmitted}\n                        sx={{\n                          borderRadius: '50px',\n                          px: 4,\n                          py: 1,\n                          mr: 2,\n                        }}\n                      >\n                        Order & Print Label\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                        disabled={!canBeSubmitted}\n                        sx={{\n                          borderRadius: '50px',\n                          px: 4,\n                          py: 1,\n                        }}\n                      >\n                        Order\n                      </Button>\n                    </Box>\n                  </Stack>\n                </Grid>\n                {error &&\n                  error.length > 0 &&\n                  error.map((msg, idx) => (\n                    <Grid item xs={12} sx={{ textAlign: 'right', paddingTop: 1 }} key={idx}>\n                      <Typography sx={{ color: theme.palette.error.main }}>\n                        {typeof msg === 'string' ? msg : JSON.stringify(msg, null, 2)}\n                      </Typography>\n                    </Grid>\n                  ))}\n              </Grid>\n            </form>\n          )}\n        </Paper>\n      </InHouseLabsBreadcrumbs>\n    </DetailPageContainer>\n  );\n};\n"]}