{"version":3,"file":"InHouseLabOrderDetailsPage.js","sourceRoot":"","sources":["InHouseLabOrderDetailsPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Button, CircularProgress, Paper, Typography } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { collectInHouseLabSpecimen, getInHouseOrders } from 'src/api/api';\nimport DetailPageContainer from 'src/features/common/DetailPageContainer';\nimport { useAppointmentStore } from 'src/telemed';\nimport { getSelectors, InHouseOrderDetailPageItemDTO, LoadingState, MarkAsCollectedData } from 'utils';\nimport { useApiClients } from '../../../hooks/useAppClients';\nimport { CollectSampleView } from '../components/details/CollectSampleView';\nimport { FinalResultView } from '../components/details/FinalResultView';\nimport { PerformTestView } from '../components/details/PerformTestView';\nimport { InHouseLabsBreadcrumbs } from '../components/InHouseLabsBreadcrumbs';\n\nexport const InHouseLabTestDetailsPage: React.FC = () => {\n  const navigate = useNavigate();\n  const { serviceRequestID } = useParams<{ testId: string; serviceRequestID: string }>();\n  const { encounter } = getSelectors(useAppointmentStore, ['encounter', 'appointment']);\n  const [loadingState, setLoadingState] = useState(LoadingState.initial);\n  const [testDetails, setTestDetails] = useState<InHouseOrderDetailPageItemDTO | null>(null);\n  const [allTestDetails, setAllTestDetails] = useState<InHouseOrderDetailPageItemDTO[] | undefined>(undefined);\n  const { oystehrZambda } = useApiClients();\n\n  useEffect(() => {\n    const fetchTestDetails = async (): Promise<void> => {\n      if (!encounter.id || !serviceRequestID) {\n        return;\n      }\n\n      setLoadingState(LoadingState.loading);\n\n      try {\n        if (!oystehrZambda) {\n          return;\n        }\n        const testData = await getInHouseOrders(oystehrZambda, {\n          searchBy: { field: 'serviceRequestId', value: serviceRequestID },\n        });\n        setAllTestDetails(testData);\n        const specificTestDetail = testData.find((data) => data.serviceRequestId === serviceRequestID) || null;\n        setTestDetails(specificTestDetail);\n      } catch (error) {\n        // todo better error handling\n        console.error('Error fetching test details:', error);\n      } finally {\n        setLoadingState(LoadingState.loaded);\n      }\n    };\n\n    if (loadingState === LoadingState.initial) {\n      void fetchTestDetails();\n    }\n  }, [oystehrZambda, encounter.id, serviceRequestID, loadingState]);\n\n  const handleBack = (): void => {\n    navigate(-1);\n  };\n\n  const handleCollectSampleSubmit = async (updatedData: MarkAsCollectedData): Promise<void> => {\n    setLoadingState(LoadingState.loading);\n    let loadingError = false;\n    try {\n      if (!oystehrZambda || !encounter.id || !serviceRequestID) {\n        return;\n      }\n      await collectInHouseLabSpecimen(oystehrZambda, {\n        encounterId: encounter.id,\n        serviceRequestId: serviceRequestID,\n        data: updatedData,\n      });\n    } catch (error) {\n      console.error('Error submitting test details:', error);\n      loadingError = true;\n    } finally {\n      if (loadingError) {\n        setLoadingState(LoadingState.loadedWithError);\n      } else {\n        setLoadingState(LoadingState.initial);\n      }\n    }\n  };\n\n  if (loadingState === LoadingState.loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"300px\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (!testDetails) {\n    return (\n      <Box>\n        <Button variant=\"outlined\" onClick={handleBack} sx={{ mb: 2, borderRadius: '50px', px: 4 }}>\n          Back\n        </Button>\n        <Paper sx={{ p: 3, textAlign: 'center' }}>\n          <Typography variant=\"h6\" color=\"error\">\n            Test details not found\n          </Typography>\n        </Paper>\n      </Box>\n    );\n  }\n\n  const pageName = `${testDetails.testItemName}${(allTestDetails || []).length > 1 ? ' + Repeat' : ''}`;\n\n  return (\n    <DetailPageContainer>\n      <InHouseLabsBreadcrumbs pageName={pageName}>\n        {(() => {\n          switch (testDetails.status) {\n            case 'ORDERED':\n              return (\n                <CollectSampleView testDetails={testDetails} onBack={handleBack} onSubmit={handleCollectSampleSubmit} />\n              );\n            case 'COLLECTED':\n              return (\n                <PerformTestView testDetails={testDetails} onBack={handleBack} setLoadingState={setLoadingState} />\n              );\n            case 'FINAL':\n              return <FinalResultView testDetails={allTestDetails} onBack={handleBack} />;\n            default:\n              // temp for debugging\n              return <p>Status could not be parsed: {testDetails.status}</p>;\n          }\n        })()}\n      </InHouseLabsBreadcrumbs>\n    </DetailPageContainer>\n  );\n};\n"]}