{"version":3,"file":"ProviderNotifications.js","sourceRoot":"","sources":["ProviderNotifications.tsx"],"names":[],"mappings":"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","sourcesContent":["import { NotificationsOutlined } from '@mui/icons-material';\nimport { alpha, Badge, Box, Button, Menu, Typography, useTheme } from '@mui/material';\nimport { DateTime } from 'luxon';\nimport { EventHandler, FC, memo, MouseEvent, useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  getProviderNotificationSettingsForPractitioner,\n  ProviderNotificationMethod,\n  ProviderNotificationSettings,\n} from 'utils';\nimport useEvolveUser from '../../hooks/useEvolveUser';\nimport { IconButtonContained } from '../../telemed/components/IconButtonContained';\nimport { useGetProviderNotifications, useUpdateProviderNotificationsMutation } from './notifications.queries';\nimport { useProviderNotificationsStore } from './notifications.store';\n\ntype ProviderNotificationDisplay = {\n  id: string;\n  message: string;\n  isUnread: boolean;\n  link?: string;\n  sent: string;\n};\n\nexport const ProviderNotifications: FC = memo(() => {\n  const theme = useTheme();\n  const user = useEvolveUser();\n  const navigate = useNavigate();\n  const { data: notificationsData } = useGetProviderNotifications();\n  const updateNotifications = useUpdateProviderNotificationsMutation();\n  const [notificationsOpen, setNotificationsOpen] = useState<boolean>(false);\n  const [notificationsElement, setNotificationsElement] = useState<undefined | HTMLElement>(undefined);\n\n  const { enabled: notificationsEnabled, method: notificationMethod }: ProviderNotificationSettings = useMemo(\n    () =>\n      getProviderNotificationSettingsForPractitioner(user?.profileResource) || {\n        method: ProviderNotificationMethod['phone and computer'],\n        enabled: false,\n      },\n    [user?.profileResource]\n  );\n\n  const notifications: ProviderNotificationDisplay[] = useMemo(() => {\n    return (\n      notificationsData?.map<ProviderNotificationDisplay>((notification) => {\n        // if isUnread play sound\n        // notificationAudio.play().catch((error) => console.log(error));\n        return {\n          id: notification.communication.id!,\n          isUnread: notification.communication.status === 'in-progress',\n          message: notification.communication.payload?.[0]?.contentString || '',\n          sent: notification.communication.sent\n            ? DateTime.fromISO(notification.communication.sent).toRelative()!\n            : 'N/A',\n          link: notification.appointmentID ? `/telemed/appointments/${notification.appointmentID}` : undefined,\n        };\n      }) || []\n    ).sort((a, b) => (a.sent && b.sent && DateTime.fromISO(a.sent) > DateTime.fromISO(b.sent) ? -1 : 0));\n  }, [notificationsData]);\n\n  const hasUnread = notifications.some((notification) => notification.isUnread);\n\n  useEffect(() => {\n    useProviderNotificationsStore.setState({ notificationsEnabled, notificationMethod: notificationMethod });\n  }, [notificationsEnabled, notificationMethod]);\n\n  const handleIconButtonClick: EventHandler<MouseEvent<HTMLElement>> = (event) => {\n    setNotificationsOpen(true);\n    setNotificationsElement(event.currentTarget);\n    if (hasUnread) {\n      void updateNotifications.mutateAsync({\n        ids: notifications.filter((notification) => notification.isUnread).map((notification) => notification.id),\n        status: 'completed',\n      });\n    }\n  };\n\n  const IconButton = (\n    <IconButtonContained\n      id=\"notifications-button\"\n      sx={{ marginRight: { sm: 0, md: 2 } }}\n      aria-controls=\"notifications-menu\"\n      aria-haspopup=\"true\"\n      variant=\"primary.lightest\"\n      aria-expanded={notificationsOpen ? 'true' : undefined}\n      onClick={handleIconButtonClick}\n    >\n      <NotificationsOutlined sx={{ color: theme.palette.primary.main }} />\n    </IconButtonContained>\n  );\n\n  return (\n    <>\n      {hasUnread ? (\n        <Badge\n          variant=\"dot\"\n          color=\"warning\"\n          sx={{\n            '& .MuiBadge-badge': {\n              width: '10px',\n              height: '10px',\n              borderRadius: '10px',\n              top: '6px',\n              right: '21px',\n            },\n          }}\n        >\n          {IconButton}\n        </Badge>\n      ) : (\n        IconButton\n      )}\n      <Menu\n        id=\"notifications-menu\"\n        anchorEl={notificationsElement}\n        open={notificationsOpen}\n        onClose={() => {\n          setNotificationsOpen(false);\n          setNotificationsElement(undefined);\n        }}\n        MenuListProps={{\n          'aria-labelledby': 'notifications-button',\n        }}\n      >\n        <Box sx={{ p: 3 }}>\n          <Typography sx={{ fontWeight: 'bold' }} variant=\"h5\" color=\"primary.dark\">\n            Notifications\n          </Typography>\n          {notifications\n            ? notifications.map((notification) => (\n                <MenuItem\n                  cursor={notification.link ? 'pointer' : 'default'}\n                  title={notification.message}\n                  subtitle={notification.sent}\n                  key={`notification-link-${notification.id}`}\n                  onClick={() => {\n                    if (notification.link) {\n                      navigate(notification.link);\n                    }\n                  }}\n                />\n              ))\n            : 'Loading...'}\n        </Box>\n      </Menu>\n    </>\n  );\n});\n\ninterface MenuItemProps {\n  onClick?: () => void;\n  cursor: 'pointer' | 'default';\n  title: string;\n  subtitle: string;\n}\n\nconst MenuItem = ({ onClick, title, subtitle }: MenuItemProps): JSX.Element => {\n  const theme = useTheme();\n\n  const titleColor = theme.palette.getContrastText(theme.palette.background.default);\n  return (\n    <Button\n      sx={{\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        borderRadius: 2,\n        backgroundColor: 'background.default',\n        py: 1,\n        px: 2,\n        mt: 1,\n        cursor: 'pointer',\n        '&:hover': { backgroundColor: alpha(theme.palette.primary.main, 0.1) },\n      }}\n      onClick={onClick}\n    >\n      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'start', textTransform: 'none' }}>\n        <Typography variant=\"body1\" color={titleColor}>\n          {title}\n        </Typography>\n        {subtitle && (\n          <Typography variant=\"caption\" sx={{ mt: 1 }} color={alpha(titleColor, 0.5)}>\n            {subtitle}\n          </Typography>\n        )}\n      </Box>\n    </Button>\n  );\n};\n"]}