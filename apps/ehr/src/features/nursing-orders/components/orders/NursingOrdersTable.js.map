{"version":3,"file":"NursingOrdersTable.js","sourceRoot":"","sources":["NursingOrdersTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Box,\n  Button,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@mui/material';\nimport { ReactElement } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { getNursingOrderDetailsUrl } from 'src/features/css-module/routing/helpers';\nimport { NursingOrdersSearchBy } from 'utils';\nimport { NursingOrdersTableRow } from './NursingOrdersTableRow';\nimport { useGetNursingOrders } from './useNursingOrders';\n\nexport type NursingOrdersTableColumn = 'order' | 'orderAdded' | 'status';\n\ntype NursingOrdersTableProps = {\n  columns: NursingOrdersTableColumn[];\n  searchBy: NursingOrdersSearchBy;\n  appointmentId: string;\n  allowDelete?: boolean;\n  onCreateOrder?: () => void;\n};\n\nexport const NursingOrdersTable = ({\n  columns,\n  searchBy,\n  appointmentId,\n  onCreateOrder,\n}: NursingOrdersTableProps): ReactElement => {\n  const navigateTo = useNavigate();\n\n  const { nursingOrders, loading, error, fetchNursingOrders: refetch } = useGetNursingOrders({ searchBy });\n\n  const onRowClick = (nursingOrderData: { serviceRequestId: string }): void => {\n    navigateTo(getNursingOrderDetailsUrl(appointmentId, nursingOrderData.serviceRequestId));\n  };\n\n  if (loading) {\n    return (\n      <Paper sx={{ p: 4, textAlign: 'center' }}>\n        <Typography variant=\"body1\">Loading nursing orders...</Typography>\n      </Paper>\n    );\n  }\n\n  if (error) {\n    return (\n      <Paper sx={{ p: 4, textAlign: 'center' }}>\n        <Typography color=\"error\" variant=\"body1\" gutterBottom>\n          {error.message || 'Failed to fetch nursing orders. Please try again later.'}\n        </Typography>\n        {onCreateOrder && (\n          <Button variant=\"contained\" onClick={() => onCreateOrder()} sx={{ mt: 2 }}>\n            Create New Nursing Order\n          </Button>\n        )}\n      </Paper>\n    );\n  }\n\n  const getColumnWidth = (column: NursingOrdersTableColumn): string => {\n    switch (column) {\n      case 'order':\n        return '60%';\n      case 'orderAdded':\n        return '20%';\n      case 'status':\n        return '20%';\n      default:\n        return '10%';\n    }\n  };\n\n  const getColumnHeader = (column: NursingOrdersTableColumn): string => {\n    switch (column) {\n      case 'order':\n        return 'Order';\n      case 'orderAdded':\n        return 'Ordered';\n      case 'status':\n        return 'Status';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      {!Array.isArray(nursingOrders) || nursingOrders.length === 0 ? (\n        <Box sx={{ p: 3, textAlign: 'center' }}>\n          <Typography variant=\"body1\" gutterBottom>\n            No nursing orders to display\n          </Typography>\n          {onCreateOrder && (\n            <Button variant=\"contained\" onClick={() => onCreateOrder()} sx={{ mt: 2 }}>\n              Create New Nursing Order\n            </Button>\n          )}\n        </Box>\n      ) : (\n        <TableContainer sx={{ border: '1px solid #e0e0e0' }}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                {columns.map((column) => (\n                  <TableCell\n                    key={column}\n                    align=\"left\"\n                    sx={{\n                      fontWeight: 'bold',\n                      width: getColumnWidth(column),\n                      padding: '8px 16px',\n                    }}\n                  >\n                    {getColumnHeader(column)}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {nursingOrders.map((order) => (\n                <NursingOrdersTableRow\n                  key={order.serviceRequestId}\n                  nursingOrderData={order}\n                  onRowClick={() => onRowClick(order)}\n                  columns={columns}\n                  refetchOrders={refetch}\n                />\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n    </Box>\n  );\n};\n"]}