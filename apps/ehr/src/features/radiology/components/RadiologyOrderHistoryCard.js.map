{"version":3,"file":"RadiologyOrderHistoryCard.js","sourceRoot":"","sources":["RadiologyOrderHistoryCard.tsx"],"names":[],"mappings":";;;AAAA,0CAA2D;AAC3D,+BAAiC;AACjC,+BAAwC;AAExC,2EAA0E;AASnE,IAAM,yBAAyB,GAAyC,UAAC,EAI/E;QAHC,mBAAmB,EAAnB,WAAW,mBAAG,KAAK,KAAA,EACnB,oBAAiB,EAAjB,YAAY,mBAAG,EAAE,KAAA,EACjB,QAAQ,cAAA;IAEF,IAAA,KAA4B,IAAA,gBAAQ,EAAC,WAAW,CAAC,EAAhD,SAAS,QAAA,EAAE,YAAY,QAAyB,CAAC;IAExD,IAAM,UAAU,GAAG,UAAC,QAA4B;QAC9C,IAAI,CAAC,QAAQ,IAAI,CAAC,gBAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO;YAAE,OAAO,EAAE,CAAC;QAChE,OAAO,gBAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;IACrF,CAAC,CAAC;IAEF,OAAO,CACL,EACE;MAAA,CAAC,6BAAa,CACZ,KAAK,CAAC,CAAC,mBAAmB,CAAC,CAC3B,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,UAAU,CAAC,CAAC,KAAK,CAAC,CAClB,QAAQ,CAAC,CAAC;YACR,YAAY,CAAC,UAAC,SAAS,IAAK,OAAA,CAAC,SAAS,EAAV,CAAU,CAAC,CAAC;QAC1C,CAAC,CAAC,CAEF;QAAA,CAAC,gBAAK,CACJ;UAAA,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,GAAG;YACpB,OAAO,CACL,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,UAAG,GAAG,CAAC,MAAM,cAAI,GAAG,CAAC,SAAS,cAAI,GAAG,CAAC,IAAI,CAAE,CAAC,CAC1D;gBAAA,CAAC,oBAAS,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE,oBAAS,CAChD;gBAAA,CAAC,oBAAS,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,oBAAS,CACrC;gBAAA,CAAC,oBAAS,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,oBAAS,CAC9C;cAAA,EAAE,mBAAQ,CAAC,CACZ,CAAC;QACJ,CAAC,CAAC,CACJ;QAAA,EAAE,gBAAK,CACT;MAAA,EAAE,6BAAa,CACjB;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,yBAAyB,6BAoCpC","sourcesContent":["import { Table, TableCell, TableRow } from '@mui/material';\nimport { DateTime } from 'luxon';\nimport React, { useState } from 'react';\nimport { RadiologyOrderHistoryRow } from 'utils';\nimport { AccordionCard } from '../../../telemed/components/AccordionCard';\n\ninterface RadiologyOrderHistoryProps {\n  isLoading?: boolean;\n  isCollapsed?: boolean;\n  orderHistory?: RadiologyOrderHistoryRow[];\n  timezone?: string;\n}\n\nexport const RadiologyOrderHistoryCard: React.FC<RadiologyOrderHistoryProps> = ({\n  isCollapsed = false,\n  orderHistory = [],\n  timezone,\n}) => {\n  const [collapsed, setCollapsed] = useState(isCollapsed);\n\n  const formatDate = (datetime: string | undefined): string => {\n    if (!datetime || !DateTime.fromISO(datetime).isValid) return '';\n    return DateTime.fromISO(datetime).setZone(timezone).toFormat('MM/dd/yyyy hh:mm a');\n  };\n\n  return (\n    <>\n      <AccordionCard\n        label={'Procedure History'}\n        collapsed={collapsed}\n        withBorder={false}\n        onSwitch={() => {\n          setCollapsed((prevState) => !prevState);\n        }}\n      >\n        <Table>\n          {orderHistory.map((row) => {\n            return (\n              <TableRow key={`${row.status}-${row.performer}-${row.date}`}>\n                <TableCell>{row.status.toUpperCase()}</TableCell>\n                <TableCell>{row.performer}</TableCell>\n                <TableCell>{formatDate(row.date)}</TableCell>\n              </TableRow>\n            );\n          })}\n        </Table>\n      </AccordionCard>\n    </>\n  );\n};\n"]}