{"version":3,"file":"RadiologyTableRow.js","sourceRoot":"","sources":["RadiologyTableRow.tsx"],"names":[],"mappings":"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","sourcesContent":["import { otherColors } from '@ehrTheme/colors';\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\nimport { Box, Button, Chip, TableCell, TableRow, Typography, useTheme } from '@mui/material';\nimport { ReactElement } from 'react';\nimport { formatDate, GetRadiologyOrderListZambdaOrder } from 'utils';\nimport { RadiologyTableColumn } from './RadiologyTable';\nimport { RadiologyTableStatusChip } from './RadiologyTableStatusChip';\n\ninterface RadiologyTableRowProps {\n  columns: RadiologyTableColumn[];\n  order: GetRadiologyOrderListZambdaOrder;\n  onDeleteOrder?: () => void;\n  allowDelete?: boolean;\n  onRowClick?: () => void;\n}\n\nexport const RadiologyTableRow = ({\n  order,\n  onDeleteOrder,\n  columns,\n  allowDelete = false,\n  onRowClick,\n}: RadiologyTableRowProps): ReactElement => {\n  const theme = useTheme();\n\n  const handleDeleteClick = (e: React.MouseEvent): void => {\n    e.stopPropagation();\n    if (onDeleteOrder) {\n      onDeleteOrder();\n    }\n  };\n\n  const renderCellContent = (column: RadiologyTableColumn): React.ReactNode => {\n    switch (column) {\n      case 'studyType':\n        return <Typography variant=\"body2\">{order.studyType}</Typography>;\n      case 'dx': {\n        return <Typography variant=\"body2\">{order.diagnosis}</Typography>;\n      }\n      case 'ordered':\n        return (\n          <Box>\n            <DateTimeDisplay dateTimeString={order.orderAddedDateTime} />\n            <Typography\n              variant=\"body2\"\n              sx={{\n                color: 'gray',\n              }}\n            >{`${order.providerName}`}</Typography>\n          </Box>\n        );\n      case 'stat':\n        if (order.isStat) {\n          return (\n            <Chip\n              size=\"small\"\n              label=\"STAT\"\n              sx={{\n                borderRadius: '4px',\n                border: 'none',\n                fontWeight: 900,\n                fontSize: '14px',\n                textTransform: 'uppercase',\n                background: theme.palette.error.main,\n                color: 'white',\n                padding: '8px',\n                height: '24px',\n                width: 'fit-content',\n              }}\n              variant=\"outlined\"\n            />\n          );\n        } else {\n          return <></>;\n        }\n      case 'status':\n        return <RadiologyTableStatusChip status={order.status} />;\n      case 'actions':\n        if (allowDelete && order.status === 'pending') {\n          return (\n            <Button\n              onClick={handleDeleteClick}\n              sx={{\n                textTransform: 'none',\n                borderRadius: 28,\n                fontWeight: 'bold',\n              }}\n            >\n              <DeleteIcon sx={{ color: otherColors.priorityHighText }} />\n            </Button>\n          );\n        }\n        return null;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <TableRow\n      sx={{\n        '&:hover': { backgroundColor: '#f5f5f5' },\n        cursor: 'pointer',\n      }}\n      onClick={onRowClick}\n    >\n      {columns.map((column) => (\n        <TableCell key={column}>{renderCellContent(column)}</TableCell>\n      ))}\n    </TableRow>\n  );\n};\n\nconst DateTimeDisplay = ({ dateTimeString }: { dateTimeString: string }): ReactElement => {\n  const dateTimeRegex = /^(\\d{2}\\/\\d{2}\\/\\d{4}) (\\d{2}:\\d{2} [AP]M)$/;\n  const formattedDate = formatDate(dateTimeString, 'MM/dd/yyyy hh:mm a');\n  const match = formattedDate.match(dateTimeRegex);\n\n  if (!match) {\n    return <Box>{formattedDate}</Box>;\n  }\n\n  const [, dateStr, timeStr] = match;\n\n  return (\n    <Box>\n      <Typography variant=\"body2\">\n        {dateStr}&nbsp;{timeStr}\n      </Typography>\n    </Box>\n  );\n};\n"]}