{"version":3,"file":"usePatientRadiologyOrders.js","sourceRoot":"","sources":["usePatientRadiologyOrders.ts"],"names":[],"mappings":"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","sourcesContent":["import { ReactElement, useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  CancelRadiologyOrderZambdaInput,\n  EMPTY_PAGINATION,\n  GetRadiologyOrderListZambdaInput,\n  GetRadiologyOrderListZambdaOrder,\n} from 'utils';\nimport { cancelRadiologyOrder, getRadiologyOrders } from '../../../api/api';\nimport { useApiClients } from '../../../hooks/useAppClients';\nimport { useDeleteRadiologyOrderDialog } from './useDeleteRadiologyOrderDialog';\n\ninterface UsePatientRadiologyOrdersResult {\n  orders: GetRadiologyOrderListZambdaOrder[];\n  loading: boolean;\n  error: Error | null;\n  totalPages: number;\n  page: number;\n  setPage: (page: number) => void;\n  fetchOrders: (params: GetRadiologyOrderListZambdaInput) => Promise<void>;\n  getCurrentSearchParams: () => GetRadiologyOrderListZambdaInput;\n  showPagination: boolean;\n  deleteOrder: (params: CancelRadiologyOrderZambdaInput) => Promise<boolean>;\n  showDeleteRadiologyOrderDialog: ({\n    serviceRequestId,\n    studyType,\n  }: {\n    serviceRequestId: string;\n    studyType: string;\n  }) => void;\n  DeleteOrderDialog: ReactElement | null;\n}\n\nexport const usePatientRadiologyOrders = (options: {\n  patientId?: string;\n  encounterIds?: string | string[];\n  serviceRequestId?: string;\n}): UsePatientRadiologyOrdersResult => {\n  const { oystehrZambda } = useApiClients();\n\n  // Memoize options to prevent unnecessary re-renders\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const memoizedOptions = useMemo(() => options, [JSON.stringify(options)]);\n\n  const [orders, setOrders] = useState<GetRadiologyOrderListZambdaOrder[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [totalPages, setTotalPages] = useState(1);\n  const [page, setPage] = useState(1);\n  const [showPagination, setShowPagination] = useState(false);\n\n  const getCurrentSearchParamsWithoutPageIndex = useCallback((): GetRadiologyOrderListZambdaInput => {\n    const params: GetRadiologyOrderListZambdaInput = {} as GetRadiologyOrderListZambdaInput;\n\n    const { patientId, encounterIds, serviceRequestId } = memoizedOptions;\n\n    if (patientId) {\n      params.patientId = patientId;\n    }\n\n    if (encounterIds) {\n      params.encounterIds = encounterIds;\n    }\n\n    if (serviceRequestId) {\n      params.serviceRequestId = serviceRequestId;\n    }\n\n    return params;\n  }, [memoizedOptions]);\n\n  const getCurrentSearchParamsForPage = useCallback(\n    (pageNumber: number): GetRadiologyOrderListZambdaInput => {\n      if (pageNumber < 1) {\n        throw Error('Page number must be greater than 0');\n      }\n      return { ...getCurrentSearchParamsWithoutPageIndex(), pageIndex: pageNumber - 1 };\n    },\n    [getCurrentSearchParamsWithoutPageIndex]\n  );\n\n  const fetchOrders = useCallback(\n    async (searchParams: GetRadiologyOrderListZambdaInput): Promise<void> => {\n      if (!oystehrZambda) {\n        console.error('oystehrZambda is not defined');\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        let response;\n        try {\n          response = await getRadiologyOrders(oystehrZambda, searchParams);\n        } catch (err) {\n          response = {\n            data: [],\n            pagination: EMPTY_PAGINATION,\n          };\n          console.error('Error fetching lab orders:', err);\n          setError(err instanceof Error ? err : new Error('Unknown error occurred'));\n        }\n\n        if (response?.orders) {\n          setOrders(response.orders);\n\n          if (response.pagination) {\n            setTotalPages(response.pagination.totalPages || 1);\n            setShowPagination(response.pagination.totalPages > 1);\n          } else {\n            setTotalPages(1);\n            setShowPagination(false);\n          }\n        } else {\n          setOrders([]);\n          setTotalPages(1);\n          setShowPagination(false);\n        }\n      } catch (error) {\n        console.error('error with setting lab orders:', error);\n        setError(error instanceof Error ? error : new Error('Unknown error occurred'));\n        setOrders([]);\n        setTotalPages(1);\n        setShowPagination(false);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [oystehrZambda]\n  );\n\n  // initial fetch of lab orders\n  useEffect(() => {\n    const searchParams = getCurrentSearchParamsForPage(1);\n    let encounterIdsHasValue = false;\n    if (searchParams.encounterIds) {\n      if (Array.isArray(searchParams.encounterIds)) {\n        // we don't want to call this until there are values in the array\n        encounterIdsHasValue = searchParams.encounterIds.length > 0;\n      } else {\n        encounterIdsHasValue = true;\n      }\n    }\n    if (searchParams.patientId || encounterIdsHasValue || searchParams.serviceRequestId) {\n      void fetchOrders(searchParams);\n    }\n  }, [fetchOrders, getCurrentSearchParamsForPage]);\n\n  const didOrdersFetch = orders.length > 0;\n\n  // fetch orders when the page changes\n  useEffect(() => {\n    // skip if the orders haven't been fetched yet, to prevent fetching when the page is first loaded\n    if (didOrdersFetch) {\n      const searchParams = getCurrentSearchParamsForPage(page);\n      void fetchOrders(searchParams);\n    }\n  }, [fetchOrders, getCurrentSearchParamsForPage, didOrdersFetch, page]);\n\n  const handleDeleteOrder = useCallback(\n    async (params: CancelRadiologyOrderZambdaInput): Promise<boolean> => {\n      const { serviceRequestId } = params;\n\n      if (!serviceRequestId) {\n        console.error('Cannot cancel order: Missing order ID');\n        setError(new Error('Missing order ID'));\n        return false;\n      }\n\n      if (!oystehrZambda) {\n        console.error('Cannot delete order: API client is not available');\n        setError(new Error('API client is not available'));\n        return false;\n      }\n\n      setLoading(true);\n      setError(null);\n\n      try {\n        await cancelRadiologyOrder(oystehrZambda, params);\n\n        setPage(1);\n        const searchParams = getCurrentSearchParamsForPage(1);\n        await fetchOrders(searchParams);\n\n        return true;\n      } catch (err) {\n        console.error('Error deleting radiology order:', err);\n\n        const errorObj =\n          err instanceof Error ? err : new Error(typeof err === 'string' ? err : 'Failed to delete lab order');\n\n        setError(errorObj);\n\n        return false;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [fetchOrders, getCurrentSearchParamsForPage, oystehrZambda]\n  );\n\n  // handle delete dialog\n  const { showDeleteRadiologyOrderDialog, DeleteOrderDialog } = useDeleteRadiologyOrderDialog({\n    deleteOrder: handleDeleteOrder,\n  });\n\n  return {\n    orders,\n    loading,\n    error,\n    totalPages,\n    page,\n    setPage,\n    fetchOrders,\n    showPagination,\n    deleteOrder: handleDeleteOrder,\n    showDeleteRadiologyOrderDialog,\n    DeleteOrderDialog,\n    getCurrentSearchParams: getCurrentSearchParamsWithoutPageIndex,\n  };\n};\n"]}