{"version":3,"file":"activityLogsUtils.js","sourceRoot":"","sources":["activityLogsUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,6CAA6C;AAC7C,+BAAiC;AACjC,+BAMe;AA0TkB,uGA/T/B,8BAAsB,OA+T+B;AAA9C,uGA7TP,8BAAsB,OA6TO;AAzT/B,0CAA6C;AAC7C,wCAAuD;AACvD,mDAA0D;AAE1D,IAAM,iBAAiB,GAAG,YAAY,CAAC,CAAC,2BAA2B;AAEnE,IAAY,YAOX;AAPD,WAAY,YAAY;IACtB,+CAA+B,CAAA;IAC/B,0CAA0B,CAAA;IAC1B,kDAAkC,CAAA;IAClC,sDAAsC,CAAA;IACtC,sDAAsC,CAAA;IACtC,8CAA8B,CAAA;AAChC,CAAC,EAPW,YAAY,4BAAZ,YAAY,QAOvB;AAkBM,IAAM,sBAAsB,GAAG,UAAC,QAAkB,EAAE,KAAa;;IACtE,0FAA0F;IAC1F,sCAAsC;IACtC,IAAM,kBAAkB,GAAG,MAAA,MAAA,QAAQ,CAAC,IAAI,0CAAE,GAAG,0CAAE,SAAS,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,MAAM,KAAK,+BAAwB,KAAK,CAAE,EAA9C,CAA8C,CAAC,CAAC;IAClH,IAAI,kBAAkB,KAAK,SAAS,IAAI,kBAAkB,IAAI,CAAC,EAAE,CAAC;QAChE,OAAO;YACL,EAAE,EAAE,QAAQ;YACZ,IAAI,EAAE,oBAAa,kBAAkB,CAAE;SACxC,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,OAAO;IACT,CAAC;AACH,CAAC,CAAC;AAZW,QAAA,sBAAsB,0BAYjC;AAEK,IAAM,+BAA+B,GAAG,UAC7C,WAAoC,EACpC,OAA4B;;;;;;gBAE5B,IAAI,CAAC,WAAW,IAAI,CAAC,OAAO;oBAAE,sBAAO;gBAC/B,aAAa,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,EAAE,CAAC;gBAChC,SAAS,GAAG,MAAA,MAAA,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,WAAW,CACvC,IAAI,CAAC,UAAC,IAAI,gBAAK,OAAA,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,SAAS,0CAAE,UAAU,CAAC,UAAU,CAAC,CAAA,EAAA,CAAC,0CAC5D,KAAK,0CAAE,SAAS,0CAAE,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBAC/B,qBAAM,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;wBACtC,QAAQ,EAAE;4BACR;gCACE,MAAM,EAAE,KAAK;gCACb,GAAG,EAAE,uBAAgB,aAAa,cAAW;6BAC9C;4BACD;gCACE,MAAM,EAAE,KAAK;gCACb,GAAG,EAAE,mBAAY,SAAS,cAAW;6BACtC;yBACF;qBACF,CAAC,EAAA;;gBAXI,MAAM,GAAG,SAWb;gBAEI,cAAc,GAAc,EAAE,CAAC;gBAC/B,kBAAkB,GAAkB,EAAE,CAAC;gBAC7C,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;oBACjB,WAAgC,EAAZ,KAAA,MAAM,CAAC,KAAK,EAAZ,cAAY,EAAZ,IAAY,EAAE,CAAC;wBAAxB,KAAK;wBACd,IAAI,CAAA,MAAA,MAAA,KAAK,CAAC,QAAQ,0CAAE,OAAO,0CAAE,EAAE,MAAK,IAAI,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,YAAY,KAAK,QAAQ,EAAE,CAAC;4BACjG,WAAW,GAAG,KAAK,CAAC,QAAkB,CAAC;4BACvC,YAAY,GAAG,WAAW,CAAC,KAAK,CAAC;4BACvC,IAAI,YAAY,EAAE,CAAC;gCACjB,WAA+B,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY,EAAE,CAAC;oCAAvB,IAAI;oCACP,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;oCAC/B,IAAI,QAAQ,EAAE,CAAC;wCACb,IAAI,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,YAAY,MAAK,aAAa,EAAE,CAAC;4CACvC,eAAe,GAAG,QAAuB,CAAC;4CAChD,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;wCAC3C,CAAC;wCACD,IAAI,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,YAAY,MAAK,SAAS,EAAE,CAAC;4CACnC,WAAW,GAAG,QAAmB,CAAC;4CACxC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wCACnC,CAAC;oCACH,CAAC;gCACH,CAAC;4BACH,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;gBAED,sBAAO,EAAE,cAAc,gBAAA,EAAE,kBAAkB,oBAAA,EAAE,EAAC;;;KAC/C,CAAC;AAjDW,QAAA,+BAA+B,mCAiD1C;AAEK,IAAM,kBAAkB,GAAG,UAChC,WAAwB,EACxB,kBAAiC,EACjC,cAAyB,EACzB,oBAAsC,EACtC,QAAgB;;IAEhB,IAAM,IAAI,GAAsB,EAAE,CAAC;4BAG1B,CAAC;QACR,IAAM,iBAAiB,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAM,sBAAsB,GAAG,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACrD,IAAI,UAA8B,CAAC;QAEnC,oHAAoH;QACpH,IAAM,KAAK,GAAG,IAAA,mBAAI,EAAC,sBAAsB,EAAE,iBAAiB,EAAE,EAAE,eAAe,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAE7G,wFAAwF;QACxF,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;;YACjB,qEAAqE;YACrE,wGAAwG;YACxG,0EAA0E;YAC1E,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM,EAAE,CAAC;gBACxB,IAAM,oBAAoB,GAAG,uBAAuB,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;gBAC9E,IAAI,oBAAoB;oBAAE,UAAU,GAAG,oBAAoB,CAAC;YAC9D,CAAC;YACD,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM,EAAE,CAAC;gBACxB,IAAM,qBAAqB,GAAoB;oBAC7C,YAAY,EAAE,YAAY,CAAC,UAAU;oBACrC,mBAAmB,EAAE,MAAA,iBAAiB,CAAC,IAAI,0CAAE,WAAW;oBACxD,gBAAgB,EAAE,IAAA,8BAAsB,EAAC,CAAA,MAAA,iBAAiB,CAAC,IAAI,0CAAE,WAAW,KAAI,EAAE,EAAE,QAAQ,CAAC;oBAC7F,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK;oBAC3C,WAAW,EAAE;wBACX,WAAW,EAAE,IAAA,mBAAW,EAAC,sBAAsB,CAAC;wBAChD,UAAU,EAAE,IAAA,mBAAW,EAAC,iBAAiB,CAAC;qBAC3C;iBACF,CAAC;gBACF,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACnC,CAAC;YACD,IAAI,IAAI,CAAC,GAAG,KAAK,WAAW,EAAE,CAAC;gBAC7B,IAAM,oBAAoB,GAAoB;oBAC5C,YAAY,EAAE,YAAY,CAAC,SAAS;oBACpC,mBAAmB,EAAE,MAAA,iBAAiB,CAAC,IAAI,0CAAE,WAAW;oBACxD,gBAAgB,EAAE,IAAA,8BAAsB,EAAC,CAAA,MAAA,iBAAiB,CAAC,IAAI,0CAAE,WAAW,KAAI,EAAE,EAAE,QAAQ,CAAC;oBAC7F,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK;oBAC3C,WAAW,EAAE;wBACX,WAAW,EAAE,IAAA,uCAAsB,EAAC,sBAAsB,CAAC,SAAS,CAAC,IAAI,EAAE;wBAC3E,UAAU,EAAE,IAAA,uCAAsB,EAAC,iBAAiB,CAAC,SAAS,CAAC,IAAI,EAAE;qBACtE;iBACF,CAAC;gBACF,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAClC,CAAC;QACH,CAAC,CAAC,CAAC;;IA5CL,mEAAmE;IACnE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE;gBAAzC,CAAC;KA4CT;4BAGQ,CAAC;QACR,IAAM,cAAc,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAM,mBAAmB,GAAG,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtD,IAAI,UAA8B,CAAC;QAEnC,IAAM,KAAK,GAAG,IAAA,mBAAI,EAAC,mBAAmB,EAAE,cAAc,EAAE,EAAE,eAAe,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEvG,wFAAwF;QACxF,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;;YACjB,qEAAqE;YACrE,wGAAwG;YACxG,0EAA0E;YAC1E,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM,EAAE,CAAC;gBACxB,IAAM,oBAAoB,GAAG,uBAAuB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;gBAC3E,IAAI,oBAAoB;oBAAE,UAAU,GAAG,oBAAoB,CAAC;gBAC5D,IAAM,UAAU,GAAG,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,GAAG,KAAK,KAAK,EAApB,CAAoB,CAAC,0CAAE,OAAO,CAAC;gBACjF,IAAI,UAAU,EAAE,CAAC;oBACf,IAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,GAAG,KAAK,yBAAa,EAA5B,CAA4B,CAAC,CAAC;oBAC9E,IAAI,WAAW,EAAE,CAAC;wBAChB,IAAM,cAAc,GAAoB;4BACtC,YAAY,EAAE,YAAY,CAAC,WAAW;4BACtC,mBAAmB,EAAE,MAAA,cAAc,CAAC,IAAI,0CAAE,WAAW;4BACrD,gBAAgB,EAAE,IAAA,8BAAsB,EAAC,CAAA,MAAA,cAAc,CAAC,IAAI,0CAAE,WAAW,KAAI,EAAE,EAAE,QAAQ,CAAC;4BAC1F,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK;yBAC5C,CAAC;wBACF,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBAC5B,CAAC;oBACD,IAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,GAAG,KAAK,gCAAwB,EAAvC,CAAuC,CAAC,CAAC,CAAC,uBAAuB;oBAClH,IAAI,YAAY,EAAE,CAAC;wBACjB,IAAM,eAAe,GAAoB;4BACvC,YAAY,EAAE,YAAY,CAAC,YAAY;4BACvC,sBAAsB,EAAE,kBAAkB,CAAC,YAAY,CAAC;4BACxD,mBAAmB,EAAE,MAAA,cAAc,CAAC,IAAI,0CAAE,WAAW;4BACrD,gBAAgB,EAAE,IAAA,8BAAsB,EAAC,CAAA,MAAA,cAAc,CAAC,IAAI,0CAAE,WAAW,KAAI,EAAE,EAAE,QAAQ,CAAC;4BAC1F,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK;yBAC5C,CAAC;wBACF,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;oBAC7B,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;;IAzCL,uEAAuE;IACvE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE;gBAA7C,CAAC;KAyCT;IAED,IAAI,oBAAoB,EAAE,CAAC;QACzB,IAAM,2BAA2B,GAAG,IAAA,iCAAyB,EAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;QAC9F,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IACzC,CAAC;IACD,IAAM,oBAAoB,GAAG,MAAA,WAAW,CAAC,eAAe,0CAAE,IAAI,CAAC;IAC/D,IAAI,CAAC,IAAI,CAAC;QACR,YAAY,EAAE,YAAY,CAAC,YAAY;QACvC,sBAAsB,EAAE,oBAAoB;YAC1C,CAAC,CAAC,6BAAqB,CAAC,oBAA2C,CAAC;YACpE,CAAC,CAAC,EAAE;QACN,mBAAmB,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO;QACzC,gBAAgB,EAAE,IAAA,8BAAsB,EAAC,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,KAAI,EAAE,EAAE,QAAQ,CAAC;QAC9E,UAAU,EAAE,CAAA,MAAA,MAAA,MAAA,WAAW,CAAC,IAAI,0CAAE,GAAG,0CAAE,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,MAAM,KAAK,iBAAiB,EAAhC,CAAgC,CAAC,0CAAE,OAAO,KAAI,KAAK;KACrG,CAAC,CAAC;IAEH,OAAO,IAAA,gBAAQ,EAAC,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;AApHW,QAAA,kBAAkB,sBAoH7B;AAEK,IAAM,yBAAyB,GAAG,UAAC,oBAA0B,EAAE,QAAgB;;IACpF,IAAM,UAAU,GAAG,MAAA,MAAA,oBAAoB,CAAC,IAAI,0CAAE,GAAG,0CAAE,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,MAAK,mBAAmB,EAAnC,CAAmC,CAAC,CAAC;IACtG,IAAM,mBAAmB,GAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,CAAC;IAChD,IAAM,gBAAgB,GAAG,IAAA,8BAAsB,EAAC,mBAAmB,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;IACrF,IAAM,UAAU,GAAG,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,OAAO,KAAI,KAAK,CAAC;IAChD,IAAM,2BAA2B,GAAoB;QACnD,YAAY,EAAE,YAAY,CAAC,gBAAgB;QAC3C,mBAAmB,qBAAA;QACnB,gBAAgB,kBAAA;QAChB,UAAU,YAAA;KACX,CAAC;IACF,OAAO,2BAA2B,CAAC;AACrC,CAAC,CAAC;AAZW,QAAA,yBAAyB,6BAYpC;AAEK,IAAM,QAAQ,GAAG,UAAC,IAAuB;IAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;QACpB,IAAM,KAAK,GAAG,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC;QAC5D,IAAM,KAAK,GAAG,gBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC;QAC5D,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,YAAY,CAAC;IACxD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AANW,QAAA,QAAQ,YAMnB;AAEF,IAAM,uBAAuB,GAAG,UAAC,IAAa,EAAE,QAAkB;;IAChE,IAAI,UAA8B,CAAC;IACnC,IAAM,SAAS,GAAG,MAAA,IAAI,CAAC,OAAO,0CAAE,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,GAAG,KAAK,KAAK,EAAf,CAAe,CAAC,CAAC;IAC7D,IAAI,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI,MAAK,QAAQ,EAAE,CAAC;QACjC,IAAM,gBAAgB,GAAG,MAAA,SAAS,CAAC,OAAO,0CAAE,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,GAAG,KAAK,8BAAsB,EAArC,CAAqC,CAAC,CAAC;QACpG,IAAI,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,MAAK,QAAQ,EAAE,CAAC;YACxC,IAAM,uBAAuB,GAAG,MAAA,MAAA,gBAAgB,CAAC,OAAO,0CAAE,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,GAAG,KAAK,SAAS,EAAxB,CAAwB,CAAC,0CAAE,KAAK,CAAC;YAC5G,IAAI,uBAAuB;gBACzB,UAAU,GAAG,MAAA,MAAA,MAAA,QAAQ,CAAC,IAAI,0CAAE,GAAG,0CAAE,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,MAAM,KAAK,8BAAsB,EAArC,CAAqC,CAAC,0CAAE,OAAO,CAAC;QACnG,CAAC;QACD,IAAI,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,MAAK,KAAK,EAAE,CAAC;YACrC,IAAM,sBAAsB,GAAG,gBAAgB,CAAC,KAAe,CAAC;YAChE,UAAU,GAAG,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,OAAO,CAAC;QAC/C,CAAC;IACH,CAAC;IACD,IAAI,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,IAAI,MAAK,KAAK,EAAE,CAAC;QAC9B,IAAM,gBAAgB,GAAG,MAAA,SAAS,CAAC,KAAK,0CAAE,IAAI,CAAC,UAAC,KAAa,IAAK,OAAA,KAAK,CAAC,MAAM,KAAK,8BAAsB,EAAvC,CAAuC,CAAC,CAAC;QAC3G,IAAI,gBAAgB,EAAE,CAAC;YACrB,IAAM,sBAAsB,GAAG,gBAA0B,CAAC;YAC1D,UAAU,GAAG,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,OAAO,CAAC;QAC/C,CAAC;IACH,CAAC;IACD,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AACF,IAAM,kBAAkB,GAAG,UAAC,IAAa;;IACvC,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,MAAK,QAAQ,EAAE,CAAC;QAC5B,OAAO,GAAG,CAAA,MAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,GAAG,KAAK,SAAS,EAAxB,CAAwB,CAAC,0CAAE,KAAK,KAAI,EAAE,CAAC;IAClF,CAAC;IACD,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,MAAK,KAAK,EAAE,CAAC;QACzB,OAAO,GAAG,CAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,0CAAE,OAAO,KAAI,EAAE,CAAC;IACvC,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEK,IAAM,sBAAsB,GAAG,UAAC,QAAgB,EAAE,QAAgB;IACvE,IAAM,IAAI,GAAG,gBAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC1D,IAAM,aAAa,GAAG,IAAA,uCAAsB,EAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IACjE,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAQ,CAAC,WAAW,CAAC,CAAC;IAChE,IAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC;IAC3C,OAAO,UAAG,aAAa,cAAI,aAAa,cAAI,aAAa,aAAb,aAAa,cAAb,aAAa,GAAI,EAAE,CAAE,CAAC;AACpE,CAAC,CAAC;AANW,QAAA,sBAAsB,0BAMjC;AAEK,IAAM,kBAAkB,GAAG,UAAC,QAAgB,EAAE,kBAAiC;IACpF,IAAM,KAAK,GAAkB,EAAE,CAAC;4BACvB,CAAC;QACR,IAAM,cAAc,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAC7C,IAAM,mBAAmB,GAAG,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACtD,IAAI,UAA8B,CAAC;QAEnC,IAAM,KAAK,GAAG,IAAA,mBAAI,EAAC,mBAAmB,EAAE,cAAc,EAAE,EAAE,eAAe,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;QACvG,wFAAwF;QACxF,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;;YACjB,qEAAqE;YACrE,wGAAwG;YACxG,0EAA0E;YAC1E,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM,EAAE,CAAC;gBACxB,IAAM,oBAAoB,GAAG,uBAAuB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;gBAC3E,IAAI,oBAAoB;oBAAE,UAAU,GAAG,oBAAoB,CAAC;YAC9D,CAAC;YACD,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,EAAE,CAAC;gBAC3B,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;gBACzB,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;oBAC3B,OAAO,GAAG,EAAE,CAAC;gBACf,CAAC;gBACD,IAAM,OAAO,GAAG,IAAA,8BAAsB,EAAC,CAAA,MAAA,cAAc,CAAC,IAAI,0CAAE,WAAW,KAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;gBACzF,IAAM,IAAI,GAAgB;oBACxB,IAAI,EAAE,OAAO;oBACb,kBAAkB,EAAE,UAAG,OAAO,iBAAO,UAAU,CAAE;iBAClD,CAAC;gBACF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;;IA3BL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE;gBAA7C,CAAC;KA4BT;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAhCW,QAAA,kBAAkB,sBAgC7B","sourcesContent":["import Oystehr from '@oystehr/sdk';\nimport { Operation } from 'fast-json-patch';\nimport { Appointment, Bundle, Coding, Flag, Patient, Resource } from 'fhir/r4b';\nimport { diff, IChange } from 'json-diff-ts';\nimport { DateTime } from 'luxon';\nimport {\n  CRITICAL_CHANGE_SYSTEM,\n  FhirAppointmentType,\n  getCriticalUpdateTagOp,\n  getFullName,\n  STATUS_UPDATE_TAG_SYSTEM,\n} from 'utils';\nimport { HOP_QUEUE_URI } from '../constants';\nimport { appointmentTypeLabels } from '../types/types';\nimport { formatDateUsingSlashes } from './formatDateTime';\n\nconst CREATED_BY_SYSTEM = 'created-by'; // exists in intake as well\n\nexport enum ActivityName {\n  apptCreation = 'Visit Creation',\n  nameChange = 'Name Update',\n  dobChange = 'Date of Birth Update',\n  movedToNext = 'Moved to next in queue',\n  paperworkStarted = 'Paperwork started',\n  statusChange = 'Status Update',\n}\nexport interface ActivityLogData {\n  activityDateTimeISO: string | undefined;\n  activityDateTime: string;\n  activityName: ActivityName;\n  activityNameSupplement?: string;\n  activityBy: string;\n  moreDetails?: {\n    valueBefore: string;\n    valueAfter: string;\n  };\n}\n\nexport interface NoteHistory {\n  note: string;\n  noteAddedByAndWhen: string;\n}\n\nexport const cleanUpStaffHistoryTag = (resource: Resource, field: string): Operation | undefined => {\n  // going forward we will be using the history of the patient resource so this isn't needed\n  // check if there is a tag to clean up\n  const staffHistoryTagIdx = resource.meta?.tag?.findIndex((tag) => tag.system === `staff-update-history-${field}`);\n  if (staffHistoryTagIdx !== undefined && staffHistoryTagIdx >= 0) {\n    return {\n      op: 'remove',\n      path: `/meta/tag/${staffHistoryTagIdx}`,\n    };\n  } else {\n    return;\n  }\n};\n\nexport const getAppointmentAndPatientHistory = async (\n  appointment: Appointment | undefined,\n  oystehr: Oystehr | undefined\n): Promise<{ patientHistory: Patient[]; appointmentHistory: Appointment[] } | undefined> => {\n  if (!appointment || !oystehr) return;\n  const appointmentId = appointment?.id;\n  const patientId = appointment?.participant\n    .find((appt) => appt.actor?.reference?.startsWith('Patient/'))\n    ?.actor?.reference?.replace('Patient/', '');\n  const bundle = await oystehr.fhir.batch({\n    requests: [\n      {\n        method: 'GET',\n        url: `/Appointment/${appointmentId}/_history`,\n      },\n      {\n        method: 'GET',\n        url: `/Patient/${patientId}/_history`,\n      },\n    ],\n  });\n\n  const patientHistory: Patient[] = [];\n  const appointmentHistory: Appointment[] = [];\n  if (bundle.entry) {\n    for (const entry of bundle.entry) {\n      if (entry.response?.outcome?.id === 'ok' && entry.resource && entry.resource.resourceType === 'Bundle') {\n        const innerBundle = entry.resource as Bundle;\n        const innerEntries = innerBundle.entry;\n        if (innerEntries) {\n          for (const item of innerEntries) {\n            const resource = item.resource;\n            if (resource) {\n              if (resource?.resourceType === 'Appointment') {\n                const fhirAppointment = resource as Appointment;\n                appointmentHistory.push(fhirAppointment);\n              }\n              if (resource?.resourceType === 'Patient') {\n                const fhirPatient = resource as Patient;\n                patientHistory.push(fhirPatient);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return { patientHistory, appointmentHistory };\n};\n\nexport const formatActivityLogs = (\n  appointment: Appointment,\n  appointmentHistory: Appointment[],\n  patientHistory: Patient[],\n  paperworkStartedFlag: Flag | undefined,\n  timezone: string\n): ActivityLogData[] => {\n  const logs: ActivityLogData[] = [];\n\n  // check each patient history object against the previous for diffs\n  for (let i = 0; i < patientHistory.length - 1; i++) {\n    const curPatientHistory = patientHistory[i];\n    const previousPatientHistory = patientHistory[i + 1];\n    let activityBy: string | undefined;\n\n    // console.log(`checking ${curPatientHistory?.meta?.versionId} against ${previousPatientHistory?.meta?.versionId}`);\n    const diffs = diff(previousPatientHistory, curPatientHistory, { embeddedObjKeys: { 'meta.tag': 'system' } });\n\n    // check diffs for critical updates (ie updates that need to be surfaced in change logs)\n    diffs.forEach((diff) => {\n      // make sure that a critical update by tag was added with this change\n      // the display may be the same but the version should always be different if it was \"new\" for the change\n      // this ensures that we aren't assuming anything about who made the update\n      if (diff.key === 'meta') {\n        const criticalUpdateMadeBy = getCriticalUpdateMadeBy(diff, curPatientHistory);\n        if (criticalUpdateMadeBy) activityBy = criticalUpdateMadeBy;\n      }\n      if (diff.key === 'name') {\n        const nameChangeActivityLog: ActivityLogData = {\n          activityName: ActivityName.nameChange,\n          activityDateTimeISO: curPatientHistory.meta?.lastUpdated,\n          activityDateTime: formatActivityDateTime(curPatientHistory.meta?.lastUpdated || '', timezone),\n          activityBy: activityBy ? activityBy : 'n/a',\n          moreDetails: {\n            valueBefore: getFullName(previousPatientHistory),\n            valueAfter: getFullName(curPatientHistory),\n          },\n        };\n        logs.push(nameChangeActivityLog);\n      }\n      if (diff.key === 'birthDate') {\n        const dobChangeActivityLog: ActivityLogData = {\n          activityName: ActivityName.dobChange,\n          activityDateTimeISO: curPatientHistory.meta?.lastUpdated,\n          activityDateTime: formatActivityDateTime(curPatientHistory.meta?.lastUpdated || '', timezone),\n          activityBy: activityBy ? activityBy : 'n/a',\n          moreDetails: {\n            valueBefore: formatDateUsingSlashes(previousPatientHistory.birthDate) || '',\n            valueAfter: formatDateUsingSlashes(curPatientHistory.birthDate) || '',\n          },\n        };\n        logs.push(dobChangeActivityLog);\n      }\n    });\n  }\n\n  // check each appointment history object against the previous for diffs\n  for (let i = 0; i < appointmentHistory.length - 1; i++) {\n    const curApptHistory = appointmentHistory[i];\n    const previousApptHistory = appointmentHistory[i + 1];\n    let activityBy: string | undefined;\n\n    const diffs = diff(previousApptHistory, curApptHistory, { embeddedObjKeys: { 'meta.tag': 'system' } });\n\n    // check diffs for critical updates (ie updates that need to be surfaced in change logs)\n    diffs.forEach((diff) => {\n      // make sure that a critical update by tag was added with this change\n      // the display may be the same but the version should always be different if it was \"new\" for the change\n      // this ensures that we aren't assuming anything about who made the update\n      if (diff.key === 'meta') {\n        const criticalUpdateMadeBy = getCriticalUpdateMadeBy(diff, curApptHistory);\n        if (criticalUpdateMadeBy) activityBy = criticalUpdateMadeBy;\n        const tagChanges = diff.changes?.find((change) => change.key === 'tag')?.changes;\n        if (tagChanges) {\n          const movedToNext = tagChanges.find((change) => change.key === HOP_QUEUE_URI);\n          if (movedToNext) {\n            const movedToNextLog: ActivityLogData = {\n              activityName: ActivityName.movedToNext,\n              activityDateTimeISO: curApptHistory.meta?.lastUpdated,\n              activityDateTime: formatActivityDateTime(curApptHistory.meta?.lastUpdated || '', timezone),\n              activityBy: activityBy ? activityBy : 'n/a',\n            };\n            logs.push(movedToNextLog);\n          }\n          const statusUpdate = tagChanges.find((change) => change.key === STATUS_UPDATE_TAG_SYSTEM); // todo update to const\n          if (statusUpdate) {\n            const statusUpdateLog: ActivityLogData = {\n              activityName: ActivityName.statusChange,\n              activityNameSupplement: getStatusToDisplay(statusUpdate),\n              activityDateTimeISO: curApptHistory.meta?.lastUpdated,\n              activityDateTime: formatActivityDateTime(curApptHistory.meta?.lastUpdated || '', timezone),\n              activityBy: activityBy ? activityBy : 'n/a',\n            };\n            logs.push(statusUpdateLog);\n          }\n        }\n      }\n    });\n  }\n\n  if (paperworkStartedFlag) {\n    const paperworkStartedActivityLog = formatPaperworkStartedLog(paperworkStartedFlag, timezone);\n    logs.push(paperworkStartedActivityLog);\n  }\n  const appointmentVisitType = appointment.appointmentType?.text;\n  logs.push({\n    activityName: ActivityName.apptCreation,\n    activityNameSupplement: appointmentVisitType\n      ? appointmentTypeLabels[appointmentVisitType as FhirAppointmentType]\n      : '',\n    activityDateTimeISO: appointment?.created,\n    activityDateTime: formatActivityDateTime(appointment?.created || '', timezone),\n    activityBy: appointment.meta?.tag?.find((tag) => tag.system === CREATED_BY_SYSTEM)?.display || 'n/a',\n  });\n\n  return sortLogs(logs);\n};\n\nexport const formatPaperworkStartedLog = (paperworkStartedFlag: Flag, timezone: string): ActivityLogData => {\n  const createdTag = paperworkStartedFlag.meta?.tag?.find((tag) => tag?.system === 'created-date-time');\n  const activityDateTimeISO = createdTag?.version;\n  const activityDateTime = formatActivityDateTime(activityDateTimeISO || '', timezone);\n  const activityBy = createdTag?.display || 'n/a';\n  const paperworkStartedActivityLog: ActivityLogData = {\n    activityName: ActivityName.paperworkStarted,\n    activityDateTimeISO,\n    activityDateTime,\n    activityBy,\n  };\n  return paperworkStartedActivityLog;\n};\n\nexport const sortLogs = (logs: ActivityLogData[]): ActivityLogData[] => {\n  return logs.sort((a, b) => {\n    const dateA = DateTime.fromISO(a.activityDateTimeISO || '');\n    const dateB = DateTime.fromISO(b.activityDateTimeISO || '');\n    return dateB.diff(dateA, 'milliseconds').milliseconds;\n  });\n};\n\nconst getCriticalUpdateMadeBy = (diff: IChange, resource: Resource): string | undefined => {\n  let activityBy: string | undefined;\n  const tagChange = diff.changes?.find((d) => d.key === 'tag');\n  if (tagChange?.type === 'UPDATE') {\n    const criticalUpdateBy = tagChange.changes?.find((change) => change.key === CRITICAL_CHANGE_SYSTEM);\n    if (criticalUpdateBy?.type === 'UPDATE') {\n      const criticalUpdateByVersion = criticalUpdateBy.changes?.find((change) => change.key === 'version')?.value;\n      if (criticalUpdateByVersion)\n        activityBy = resource.meta?.tag?.find((tag) => tag.system === CRITICAL_CHANGE_SYSTEM)?.display;\n    }\n    if (criticalUpdateBy?.type === 'ADD') {\n      const criticalUpdateByCoding = criticalUpdateBy.value as Coding;\n      activityBy = criticalUpdateByCoding?.display;\n    }\n  }\n  if (tagChange?.type === 'ADD') {\n    const criticalUpdateBy = tagChange.value?.find((value: Coding) => value.system === CRITICAL_CHANGE_SYSTEM);\n    if (criticalUpdateBy) {\n      const criticalUpdateByCoding = criticalUpdateBy as Coding;\n      activityBy = criticalUpdateByCoding?.display;\n    }\n  }\n  return activityBy;\n};\nconst getStatusToDisplay = (diff: IChange): string => {\n  let display = '';\n  if (diff?.type === 'UPDATE') {\n    display = diff.changes?.find((change) => change.key === 'display')?.value || '';\n  }\n  if (diff?.type === 'ADD') {\n    display = diff?.value?.display || '';\n  }\n  return display;\n};\n\nexport const formatActivityDateTime = (dateTime: string, timezone: string): string => {\n  const date = DateTime.fromISO(dateTime).setZone(timezone);\n  const dateFormatted = formatDateUsingSlashes(date.toISO() || '');\n  const timeFormatted = date.toLocaleString(DateTime.TIME_SIMPLE);\n  const timezoneShort = date.offsetNameShort;\n  return `${dateFormatted} ${timeFormatted} ${timezoneShort ?? ''}`;\n};\n\nexport const formatNotesHistory = (timezone: string, appointmentHistory: Appointment[]): NoteHistory[] => {\n  const notes: NoteHistory[] = [];\n  for (let i = 0; i < appointmentHistory.length - 1; i++) {\n    const curApptHistory = appointmentHistory[i];\n    const previousApptHistory = appointmentHistory[i + 1];\n    let activityBy: string | undefined;\n\n    const diffs = diff(previousApptHistory, curApptHistory, { embeddedObjKeys: { 'meta.tag': 'system' } });\n    // check diffs for critical updates (ie updates that need to be surfaced in change logs)\n    diffs.forEach((diff) => {\n      // make sure that a critical update by tag was added with this change\n      // the display may be the same but the version should always be different if it was \"new\" for the change\n      // this ensures that we aren't assuming anything about who made the update\n      if (diff.key === 'meta') {\n        const criticalUpdateMadeBy = getCriticalUpdateMadeBy(diff, curApptHistory);\n        if (criticalUpdateMadeBy) activityBy = criticalUpdateMadeBy;\n      }\n      if (diff.key === 'comment') {\n        let noteVal = diff.value;\n        if (diff.type === 'REMOVE') {\n          noteVal = '';\n        }\n        const dtAdded = formatActivityDateTime(curApptHistory.meta?.lastUpdated || '', timezone);\n        const note: NoteHistory = {\n          note: noteVal,\n          noteAddedByAndWhen: `${dtAdded} By ${activityBy}`,\n        };\n        notes.push(note);\n      }\n    });\n  }\n  return notes;\n};\n\nexport { getCriticalUpdateTagOp, CRITICAL_CHANGE_SYSTEM };\n"]}