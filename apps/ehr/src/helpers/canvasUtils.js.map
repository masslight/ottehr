{"version":3,"file":"canvasUtils.js","sourceRoot":"","sources":["canvasUtils.ts"],"names":[],"mappings":"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","sourcesContent":["export type CropArea = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\n\nexport type ImageCropResult = {\n  imageUrl: string;\n  imageFile?: File;\n};\n\nexport const getCroppedImg = async (imageSrc: string, cropArea: CropArea): Promise<ImageCropResult | null> => {\n  const canvas = document.createElement('canvas');\n  const img = new Image();\n\n  const imageBlobPromise = new Promise<Blob | null>((resolve) => {\n    img.onload = () => {\n      const scaleX = img.width / img.naturalWidth;\n      const scaleY = img.height / img.naturalHeight;\n      canvas.width = cropArea.width;\n      canvas.height = cropArea.height;\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        // Draw the cropped image\n        ctx.drawImage(\n          img,\n          cropArea.x * scaleX,\n          cropArea.y * scaleY,\n          cropArea.width * scaleX,\n          cropArea.height * scaleY,\n          0,\n          0,\n          cropArea.width,\n          cropArea.height\n        );\n      }\n\n      canvas.toBlob((blob: Blob | null) => {\n        if (!blob) {\n          console.error('Canvas is empty');\n          return resolve(null);\n        }\n        resolve(blob);\n      }, 'image/jpeg');\n    };\n    img.onerror = () => {\n      console.error('Failed to load image');\n      resolve(null);\n    };\n    img.src = imageSrc;\n  });\n\n  const imageBlob = await imageBlobPromise;\n  if (!imageBlob) {\n    return null;\n  }\n\n  const processedImageUrl = URL.createObjectURL(imageBlob);\n  const processedImageFile = new File([imageBlob], 'croppedImage', {\n    type: imageBlob.type, // MIME type 'image/jpeg' ??\n    lastModified: Date.now(),\n  });\n\n  return { imageUrl: processedImageUrl, imageFile: processedImageFile };\n};\n\nexport const blobToBase64 = (blob: Blob): Promise<string | undefined> => {\n  return new Promise((resolve, _) => {\n    try {\n      const reader = new FileReader();\n      reader.onloadend = () => resolve(reader.result as string);\n      reader.readAsDataURL(blob);\n    } catch {\n      resolve(undefined);\n    }\n  });\n};\n"]}