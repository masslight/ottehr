{"version":3,"file":"files.helper.js","sourceRoot":"","sources":["files.helper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAuBC;AAvBD,SAAsB,mBAAmB,CAAC,GAAW,EAAE,KAAa;;;;;;oBAClE,IAAI,CAAC,GAAG,EAAE,CAAC;wBACT,sBAAO;oBACT,CAAC;oBAGK,WAAW,GAAG;wBAClB,MAAM,EAAE,MAAM;wBACd,OAAO,EAAE;4BACP,aAAa,EAAE,iBAAU,KAAK,CAAE;yBACjC;wBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;qBAC7C,CAAC;oBAC2B,qBAAM,KAAK,CAAC,GAAG,EAAE,WAAW,CAAC,EAAA;;oBAApD,oBAAoB,GAAG,SAA6B;oBAE1D,IAAI,CAAC,oBAAoB,CAAC,EAAE,EAAE,CAAC;wBAC7B,OAAO,CAAC,KAAK,CAAC,4CAAqC,GAAG,CAAE,CAAC,CAAC;wBAC1D,sBAAO;oBACT,CAAC;oBAEwB,qBAAM,oBAAoB,CAAC,IAAI,EAAE,EAAA;;oBAApD,gBAAgB,GAAG,SAAiC;oBAE1D,sBAAO,gBAAgB,CAAC,SAAS,EAAC;;;;CACnC;AAEM,IAAM,kBAAkB,GAAG,UAAC,OAAgB;;IACjD,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,IAAM,QAAQ,GAAG,MAAA,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,0CAAG,CAAC,CAAC,CAAC;IAC5C,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAJW,QAAA,kBAAkB,sBAI7B","sourcesContent":["export async function getPresignedFileUrl(url: string, token: string): Promise<string | undefined> {\n  if (!url) {\n    return;\n  }\n\n  // get signedUrl\n  const fetchParams = {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ action: 'download' }),\n  };\n  const presignedUrlResponse = await fetch(url, fetchParams);\n\n  if (!presignedUrlResponse.ok) {\n    console.error(`failed to fetch presigned url for ${url}`);\n    return;\n  }\n\n  const presignedUrlJSON = await presignedUrlResponse.json();\n\n  return presignedUrlJSON.signedUrl;\n}\n\nexport const parseFileExtension = (fileUrl?: string): string | undefined => {\n  if (!fileUrl) return;\n  const filetype = fileUrl.match(/\\w+$/)?.[0];\n  return filetype;\n};\n"]}