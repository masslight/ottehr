{"version":3,"file":"formatDateTime.js","sourceRoot":"","sources":["formatDateTime.ts"],"names":[],"mappings":";;;AAQA,4CAEC;AAED,wDASC;AAED,wCASC;AAED,8DAUC;AAED,oEASC;AAED,kCASC;AAjED,+BAAiC;AACjC,+BAA+C;AAElC,QAAA,oBAAoB,GAAG,UAAU,CAAC;AAElC,QAAA,WAAW,GAAG,YAAY,CAAC;AAExC,SAAgB,gBAAgB,CAAC,IAAY;IAC3C,OAAO,gBAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChE,CAAC;AAED,SAAgB,sBAAsB,CAAC,IAAwB,EAAE,QAAiB;IAChF,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,QAAQ,EAAE,CAAC;QACb,OAAO,gBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,mBAAW,CAAC,CAAC;IACxE,CAAC;SAAM,CAAC;QACN,OAAO,gBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,mBAAW,CAAC,CAAC;IACtD,CAAC;AACH,CAAC;AAED,SAAgB,cAAc,CAAC,MAAc;IAC3C,OAAO,UAAC,EAAU,EAAE,EAAU;QAC5B,IAAM,QAAQ,GAAG,gBAAQ,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7D,IAAM,QAAQ,GAAG,gBAAQ,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7D,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;YACvC,OAAO,GAAG,CAAC;QACb,CAAC;QACD,OAAO,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC,CAAC;AACJ,CAAC;AAED,SAAgB,yBAAyB,CAAC,IAAwB;IAChE,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAM,QAAQ,GAAG,gBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAExC,IAAM,aAAa,GAAG,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IAExD,OAAO,aAAa,CAAC;AACvB,CAAC;AAED,SAAgB,4BAA4B,CAAC,SAAiB,EAAE,QAAiB;IAC/E,IAAI,QAAQ,GAAG,gBAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC3C,IAAI,QAAQ,EAAE,CAAC;QACb,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,IAAM,iBAAiB,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAG,mBAAW,YAAS,CAAC,CAAC;IAErE,OAAO,iBAAiB,CAAC;AAC3B,CAAC;AAED,SAAgB,WAAW,CAAC,QAAiE;;IAC3F,IAAI,QAAQ,GAAG,kBAAkB,CAAC;IAClC,IAAI,QAAQ,EAAE,CAAC;QACb,IAAM,YAAY,GAAG,MAAA,MAAA,QAAQ,CAAC,SAAS,0CAAE,IAAI,CAAC,UAAC,aAAa,IAAK,OAAA,aAAa,CAAC,GAAG,KAAK,8BAAsB,EAA5C,CAA4C,CAAC,0CAC1G,WAAW,CAAC;QAChB,IAAI,YAAY;YAAE,QAAQ,GAAG,YAAY,CAAC;IAC5C,CAAC;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { HealthcareService, Location, Practitioner } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { TIMEZONE_EXTENSION_URL } from 'utils';\n\nexport const OVERRIDE_DATE_FORMAT = 'M/d/yyyy';\n\nexport const DATE_FORMAT = 'MM/dd/yyyy';\n\nexport function formatHourNumber(hour: number): string {\n  return DateTime.fromFormat(String(hour), 'h').toFormat('h a');\n}\n\nexport function formatDateUsingSlashes(date: string | undefined, timezone?: string): string | undefined {\n  if (!date) {\n    return date;\n  }\n  if (timezone) {\n    return DateTime.fromISO(date).setZone(timezone).toFormat(DATE_FORMAT);\n  } else {\n    return DateTime.fromISO(date).toFormat(DATE_FORMAT);\n  }\n}\n\nexport function datesCompareFn(format: string) {\n  return (d1: string, d2: string): number => {\n    const seconds1 = DateTime.fromFormat(d1, format).toSeconds();\n    const seconds2 = DateTime.fromFormat(d2, format).toSeconds();\n    if (isNaN(seconds1) || isNaN(seconds2)) {\n      return NaN;\n    }\n    return seconds1 - seconds2;\n  };\n}\n\nexport function formatISODateToLocaleDate(date: string | undefined): string | undefined {\n  if (!date) {\n    return date;\n  }\n\n  const dateTime = DateTime.fromISO(date);\n\n  const formattedDate = dateTime.toFormat('LLL dd, yyyy');\n\n  return formattedDate;\n}\n\nexport function formatISOStringToDateAndTime(isoString: string, timezone?: string): string {\n  let dateTime = DateTime.fromISO(isoString);\n  if (timezone) {\n    dateTime = dateTime.setZone(timezone);\n  }\n\n  const formattedDateTime = dateTime.toFormat(`${DATE_FORMAT}, HH:mm`);\n\n  return formattedDateTime;\n}\n\nexport function getTimezone(resource: Location | Practitioner | HealthcareService | undefined): string {\n  let timezone = 'America/New_York';\n  if (resource) {\n    const timezoneTemp = resource.extension?.find((extensionTemp) => extensionTemp.url === TIMEZONE_EXTENSION_URL)\n      ?.valueString;\n    if (timezoneTemp) timezone = timezoneTemp;\n  }\n\n  return timezone;\n}\n"]}