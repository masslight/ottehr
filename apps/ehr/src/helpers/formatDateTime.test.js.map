{"version":3,"file":"formatDateTime.test.js","sourceRoot":"","sources":["formatDateTime.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { DateTime } from 'luxon';\nimport { calculatePatientAge } from 'utils';\nimport { afterAll, beforeAll, describe, expect, it, vi } from 'vitest';\nimport {\n  datesCompareFn,\n  formatDateUsingSlashes,\n  formatHourNumber,\n  formatISODateToLocaleDate,\n  formatISOStringToDateAndTime,\n  getTimezone,\n} from './formatDateTime';\n\ndescribe('calculatePatientAge', () => {\n  const dateNow = DateTime.fromISO('2024-01-01T00:00:00.000Z');\n\n  const getDateString = (yearsAgo: number, monthsAgo = 0, daysAgo = 0): string | null => {\n    return dateNow.minus({ years: yearsAgo, months: monthsAgo, days: daysAgo }).toISODate();\n  };\n\n  beforeAll(() => {\n    vi.useFakeTimers();\n    vi.setSystemTime(dateNow.toJSDate());\n  });\n\n  afterAll(() => {\n    vi.useRealTimers();\n  });\n\n  it('should return empty string for null or undefined input', () => {\n    expect(calculatePatientAge(null)).toBe(null);\n    expect(calculatePatientAge(undefined)).toBe(undefined);\n  });\n\n  it('should return empty string for invalid date', () => {\n    expect(calculatePatientAge('invalid-date')).toBe('');\n  });\n\n  it('should return age in years if 2 years or older', () => {\n    expect(calculatePatientAge(getDateString(2))).toBe('2 y');\n    expect(calculatePatientAge(getDateString(4))).toBe('4 y');\n  });\n\n  it('should return age in months if between 2 months and 2 years', () => {\n    expect(calculatePatientAge(getDateString(0, 2))).toBe('2 m');\n    expect(calculatePatientAge(getDateString(1, 7))).toBe('19 m');\n  });\n\n  it('should return age in days if less than 2 months', () => {\n    expect(calculatePatientAge(getDateString(0, 0, 1))).toBe('1 d');\n    expect(calculatePatientAge(getDateString(0, 0, 30))).toBe('30 d');\n  });\n\n  it('should handle edge cases around year and month boundaries', () => {\n    expect(calculatePatientAge(getDateString(1, 11, 10))).toBe('23 m');\n    expect(calculatePatientAge(getDateString(0, 1, 28))).toBe('59 d');\n  });\n\n  it('should handle future dates', () => {\n    expect(calculatePatientAge(getDateString(-1))).toBe('0 d');\n  });\n});\n\ndescribe('formatDateTime helpers', () => {\n  describe('formatHourNumber', () => {\n    it('should format hour number correctly', () => {\n      expect(formatHourNumber(0)).toBe('12 AM');\n      expect(formatHourNumber(1)).toBe('1 AM');\n      expect(formatHourNumber(12)).toBe('12 PM');\n      expect(formatHourNumber(13)).toBe('1 PM');\n    });\n\n    it('should handle edge cases', () => {\n      expect(formatHourNumber(-1)).toBe('Invalid DateTime');\n      expect(formatHourNumber(25)).toBe('Invalid DateTime');\n    });\n  });\n\n  describe('formatDateUsingSlashes', () => {\n    it('should format date using slashes', () => {\n      expect(formatDateUsingSlashes('2023-05-15')).toBe('05/15/2023');\n    });\n\n    it('should return undefined for undefined input', () => {\n      expect(formatDateUsingSlashes(undefined)).toBeUndefined();\n    });\n\n    it('should handle invalid date strings', () => {\n      expect(formatDateUsingSlashes('invalid-date')).toBe('Invalid DateTime');\n    });\n  });\n\n  describe('datesCompareFn', () => {\n    const compareFn = datesCompareFn('MM/dd/yyyy');\n\n    it('should compare dates correctly', () => {\n      expect(compareFn('05/15/2023', '05/16/2023')).toBeLessThan(0);\n      expect(compareFn('05/16/2023', '05/15/2023')).toBeGreaterThan(0);\n      expect(compareFn('05/15/2023', '05/15/2023')).toBe(0);\n      expect(compareFn('12/31/2023', '01/01/2024')).toBeLessThan(0);\n    });\n\n    it('should handle invalid date strings', () => {\n      expect(compareFn('invalid', '05/15/2023')).toBeNaN();\n      expect(compareFn('05/15/2023', 'invalid')).toBeNaN();\n    });\n  });\n\n  describe('formatISODateToLocaleDate', () => {\n    it('should format ISO date to locale date', () => {\n      expect(formatISODateToLocaleDate('2023-05-15')).toBe('May 15, 2023');\n      expect(formatISODateToLocaleDate('2023-12-31')).toBe('Dec 31, 2023');\n      expect(formatISODateToLocaleDate('2023-01-01')).toBe('Jan 01, 2023');\n    });\n\n    it('should return undefined for undefined input', () => {\n      expect(formatISODateToLocaleDate(undefined)).toBeUndefined();\n    });\n\n    it('should handle invalid date strings', () => {\n      expect(formatISODateToLocaleDate('invalid-date')).toBe('Invalid DateTime');\n    });\n  });\n\n  describe('formatISOStringToDateAndTime', () => {\n    it('should format ISO string to date and time', () => {\n      expect(formatISOStringToDateAndTime('2023-05-15T14:30:00')).toBe('05/15/2023, 14:30');\n      expect(formatISOStringToDateAndTime('2023-12-31T23:59:59')).toBe('12/31/2023, 23:59');\n      expect(formatISOStringToDateAndTime('2023-01-01T00:00:00')).toBe('01/01/2023, 00:00');\n    });\n\n    it('should handle invalid ISO strings', () => {\n      expect(formatISOStringToDateAndTime('invalid')).toBe('Invalid DateTime');\n    });\n  });\n\n  describe('getTimezone', () => {\n    it('should return default timezone if location is undefined', () => {\n      expect(getTimezone(undefined)).toBe('America/New_York');\n    });\n\n    it('should return timezone from location extension', () => {\n      const location = {\n        extension: [\n          {\n            url: 'http://hl7.org/fhir/StructureDefinition/timezone',\n            valueString: 'Europe/London',\n          },\n        ],\n      };\n      expect(getTimezone(location as any)).toBe('Europe/London');\n    });\n\n    it('should return default timezone if extension is not found', () => {\n      const location = {\n        extension: [\n          {\n            url: 'some-other-url',\n            valueString: 'Europe/London',\n          },\n        ],\n      };\n      expect(getTimezone(location as any)).toBe('America/New_York');\n    });\n\n    it('should return default timezone if extension array is empty', () => {\n      const location = { extension: [] };\n      expect(getTimezone(location as any)).toBe('America/New_York');\n    });\n  });\n});\n"]}