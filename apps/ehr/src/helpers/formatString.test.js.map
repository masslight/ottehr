{"version":3,"file":"formatString.test.js","sourceRoot":"","sources":["formatString.test.ts"],"names":[],"mappings":";;AAAA,iCAA8C;AAC9C,+CAAsD;AAEtD,IAAA,iBAAQ,EAAC,sBAAsB,EAAE;IAC/B,IAAA,WAAE,EAAC,uDAAuD,EAAE;QAC1D,IAAA,eAAM,EAAC,IAAA,mCAAoB,EAAC,gCAAgC,CAAC,CAAC,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;IACzG,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,mDAAmD,EAAE;QACtD,IAAA,eAAM,EAAC,IAAA,mCAAoB,EAAC,kCAAkC,CAAC,CAAC,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;IAC5G,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,2CAA2C,EAAE;QAC9C,IAAA,eAAM,EAAC,IAAA,mCAAoB,EAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;IACtF,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,+CAA+C,EAAE;QAClD,IAAA,eAAM,EAAC,IAAA,mCAAoB,EAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,sDAAsD,EAAE;QACzD,IAAA,eAAM,EAAC,IAAA,mCAAoB,EAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,6BAA6B,EAAE;QAChC,IAAA,eAAM,EAAC,IAAA,mCAAoB,EAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,wCAAwC,EAAE;QAC3C,IAAA,eAAM,EAAC,IAAA,mCAAoB,EAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,qCAAqC,EAAE;QACxC,IAAA,eAAM,EAAC,IAAA,mCAAoB,EAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { addSpacesAfterCommas } from './formatString';\n\ndescribe('addSpacesAfterCommas', () => {\n  it('should add spaces after commas where they are missing', () => {\n    expect(addSpacesAfterCommas('Fever,Vomiting and/or diarrhea')).toBe('Fever, Vomiting and/or diarrhea');\n  });\n\n  it('should not add extra spaces if they already exist', () => {\n    expect(addSpacesAfterCommas('Fever, Vomiting, and/or diarrhea')).toBe('Fever, Vomiting, and/or diarrhea');\n  });\n\n  it('should handle multiple consecutive commas', () => {\n    expect(addSpacesAfterCommas('One,Two,,Three,Four')).toBe('One, Two, , Three, Four');\n  });\n\n  it('should handle commas at the end of the string', () => {\n    expect(addSpacesAfterCommas('One,Two,Three,')).toBe('One, Two, Three,');\n  });\n\n  it('should return the same string if there are no commas', () => {\n    expect(addSpacesAfterCommas('No commas here')).toBe('No commas here');\n  });\n\n  it('should handle empty strings', () => {\n    expect(addSpacesAfterCommas('')).toBe('');\n  });\n\n  it('should handle strings with only commas', () => {\n    expect(addSpacesAfterCommas(',,,,')).toBe(', , , ,');\n  });\n\n  it('should preserve existing whitespace', () => {\n    expect(addSpacesAfterCommas('One,  Two,Three')).toBe('One,  Two, Three');\n  });\n});\n"]}