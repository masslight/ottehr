{"version":3,"file":"patientSearch.js","sourceRoot":"","sources":["patientSearch.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,+BAAsC;AAEzB,QAAA,WAAW,GAAG,EAAE,CAAC;AAEvB,IAAM,0BAA0B,GAAG,UAAC,KAK1C;;IAEG,IAAA,aAAa,GAIX,KAAK,cAJM,EACb,SAAS,GAGP,KAAK,UAHE,EACT,KAEE,KAAK,oCAFmC,EAA1C,mCAAmC,mBAAG,IAAI,KAAA,EAC1C,KACE,KAAK,kBADoC,EAAxB,UAAU,mBAAG,mBAAW,KAAA,CACnC;IACV,IAAM,SAAS,GAAG,mCAAmC;QACnD,CAAC,CAAC;YACE,EAAE,IAAI,EAAE,yCAAyC,EAAE,KAAK,EAAE,oBAAoB,EAAE,EAAE,kDAAkD;YACpI,EAAE,IAAI,EAAE,+BAA+B,EAAE,KAAK,EAAE,CAAC,qBAAa,CAAC,EAAE,EAAE,qBAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,mEAAmE;SACtK;QACH,CAAC,CAAC,EAAE,CAAC;IACP,IAAM,gBAAgB,mCACjB,SAAS;QACZ,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE;QAChD,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE;QACrC;YACE,IAAI,EAAE,OAAO;YACb,KAAK,EAAE,QAAQ;SAChB;QACD,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,mBAAmB,EAAE;aAClD,CAAC;IAEF,IAAI,aAAa,EAAE,CAAC;QACZ,IAAA,KAAwB,CAAC,MAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,WAAW,EAAE,mCAAI,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAtE,QAAQ,QAAA,EAAE,SAAS,QAAmD,CAAC;QAC9E,IAAI,QAAQ,IAAI,SAAS,EAAE,CAAC;YAC1B,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAChH,CAAC;aAAM,CAAC;YACN,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QACnF,CAAC;IACH,CAAC;SAAM,IAAI,SAAS,EAAE,CAAC;QACb,IAAO,SAAS,GAAqB,SAAS,MAA9B,EAAQ,QAAQ,GAAK,SAAS,KAAd,CAAe;QACvD,IAAI,QAAQ,IAAI,SAAS,EAAE,CAAC;YAC1B,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAChH,CAAC;IACH,CAAC;IACD,OAAO,gBAAgB,CAAC;AAC1B,CAAC,CAAC;AA3CW,QAAA,0BAA0B,8BA2CrC","sourcesContent":["import { SearchParam } from '@oystehr/sdk';\nimport { OTTEHR_MODULE } from 'utils';\n\nexport const MAX_RESULTS = 20;\n\nexport const getPatientNameSearchParams = (input: {\n  firstLast?: { first: string | undefined; last: string | undefined };\n  submittedName?: string | undefined;\n  narrowByRelatedPersonAndAppointment?: boolean;\n  maxResultOverride?: number;\n}): SearchParam[] => {\n  const {\n    submittedName,\n    firstLast,\n    narrowByRelatedPersonAndAppointment = true,\n    maxResultOverride: maxResults = MAX_RESULTS,\n  } = input;\n  const hasParams = narrowByRelatedPersonAndAppointment\n    ? [\n        { name: '_has:RelatedPerson:patient:relationship', value: 'user-relatedperson' }, // RelatedPerson referenced by the Person resource\n        { name: '_has:Appointment:patient:_tag', value: [OTTEHR_MODULE.IP, OTTEHR_MODULE.TM].join(',') }, // this is unnecessary now; there are no BH patients to worry about\n      ]\n    : [];\n  const fhirSearchParams: SearchParam[] = [\n    ...hasParams,\n    { name: '_count', value: maxResults.toString() },\n    { name: '_total', value: 'accurate' },\n    {\n      name: '_sort',\n      value: 'family',\n    },\n    { name: '_elements', value: 'id,name,birthDate' },\n  ];\n\n  if (submittedName) {\n    const [lastName, firstName] = (submittedName?.toLowerCase() ?? '').split(',');\n    if (lastName && firstName) {\n      fhirSearchParams.push({ name: 'family', value: lastName.trim() }, { name: 'given', value: firstName.trim() });\n    } else {\n      fhirSearchParams.push({ name: 'name', value: submittedName.replace(/\\W/g, '') });\n    }\n  } else if (firstLast) {\n    const { first: firstName, last: lastName } = firstLast;\n    if (lastName && firstName) {\n      fhirSearchParams.push({ name: 'family', value: lastName.trim() }, { name: 'given', value: firstName.trim() });\n    }\n  }\n  return fhirSearchParams;\n};\n"]}