{"version":3,"file":"qr-structure.js","sourceRoot":"","sources":["qr-structure.ts"],"names":[],"mappings":"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","sourcesContent":["import { Questionnaire, QuestionnaireItem, QuestionnaireResponse, QuestionnaireResponseItem } from 'fhir/r4b';\nimport _ from 'lodash';\nimport { IntakeQuestionnaireItem, makeQRResponseItem, mapQuestionnaireAndValueSetsToItemsList } from 'utils';\n\nconst containedItemWithLinkId = (item: QuestionnaireItem, linkId: string): QuestionnaireItem | undefined => {\n  // note: if item.linkId === linkId, return item\n  const { linkId: itemLinkId, item: subItems } = item;\n  if (itemLinkId === linkId) return item;\n  if (!subItems) return undefined;\n  return subItems.find((subItem) => containedItemWithLinkId(subItem, linkId));\n};\n\nexport const structureQuestionnaireResponse = (\n  questionnaire: Questionnaire,\n  formValues: any,\n  patientId: string\n): QuestionnaireResponse => {\n  const pageDict: Map<string, QuestionnaireResponseItem[]> = new Map();\n\n  const itemInput = questionnaire.item ?? [];\n  const qItems = mapQuestionnaireAndValueSetsToItemsList(_.cloneDeep(itemInput), []);\n  qItems.forEach((item) => {\n    pageDict.set(item.linkId, []);\n  });\n\n  Object.entries(formValues).forEach(([key, value]) => {\n    const parentItem = qItems?.find((item) => containedItemWithLinkId(item, key));\n    if (parentItem) {\n      const pageItems = pageDict.get(parentItem.linkId);\n      const qItem = containedItemWithLinkId(parentItem, key) as IntakeQuestionnaireItem;\n      if (pageItems && qItem) {\n        const answer = value != undefined ? makeQRResponseItem(value, qItem) : undefined;\n        if (answer) {\n          pageItems.push(answer);\n          pageDict.set(parentItem.linkId, pageItems);\n        } else {\n          pageItems.push({ linkId: key });\n          pageDict.set(parentItem.linkId, pageItems);\n        }\n      }\n    }\n  });\n  const qrItem: QuestionnaireResponseItem[] = Array.from(pageDict.entries())\n    .map(([linkId, items]) => {\n      const item: QuestionnaireResponseItem = {\n        linkId,\n        item: items,\n      };\n      return item;\n    })\n    .filter((i) => Boolean(i.item?.length));\n\n  return {\n    resourceType: 'QuestionnaireResponse',\n    questionnaire: `${questionnaire.url}|${questionnaire.version}`,\n    status: 'completed',\n    subject: { reference: `Patient/${patientId}` },\n    item: qrItem,\n  };\n};\n"]}