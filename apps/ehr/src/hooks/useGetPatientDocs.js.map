{"version":3,"file":"useGetPatientDocs.js","sourceRoot":"","sources":["useGetPatientDocs.ts"],"names":[],"mappings":"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","sourcesContent":["import { useAuth0 } from '@auth0/auth0-react';\nimport { SearchParam } from '@oystehr/sdk';\nimport { DocumentReference, FhirResource, List, Reference } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { useCallback, useState } from 'react';\nimport { useQuery, useQueryClient, UseQueryResult } from 'react-query';\nimport { chooseJson } from 'utils';\nimport { getPresignedFileUrl, parseFileExtension } from '../helpers/files.helper';\nimport { useApiClients } from './useAppClients';\n\nconst PATIENT_FOLDERS_CODE = 'patient-docs-folder';\n\nconst CREATE_PATIENT_UPLOAD_DOCUMENT_URL_ZAMBDA_ID = import.meta.env\n  .VITE_APP_CREATE_PATIENT_UPLOAD_DOCUMENT_URL_ZAMBDA_ID;\n\nexport type PatientDocumentsFolder = {\n  id: string;\n  folderName: string;\n  documentsCount: number;\n  documentsRefs?: DocRef[];\n};\n\nexport type DocRef = {\n  reference: Reference;\n};\n\nexport type PatientDocumentAttachment = {\n  title: string;\n  fileNameFromUrl?: string;\n  z3Url: string;\n  presignedUrl?: string;\n};\n\n// http://localhost:4002/patient/104e4c8c-1866-4c96-a436-88080c691614/docs\n// \"date\": \"2024-09-02T10:22:53.870Z\",\nexport type PatientDocumentInfo = {\n  id: string;\n  //TODO: probably be DocumentReference's [parent DomainResource.text] value to have ability to use _text search modifier\n  docName: string;\n  //TODO: remove\n  folderName?: string;\n  whenAddedDate?: string;\n  //TODO: where to get data for this field?\n  whoAdded?: string;\n  attachments?: PatientDocumentAttachment[];\n  encounterId?: string;\n};\n\nexport type PatientDocumentsFilters = {\n  documentName?: string;\n  documentsFolder?: PatientDocumentsFolder;\n  dateAdded?: DateTime;\n};\n\nexport type UploadDocumentActionResult = {\n  z3Url: string;\n  presignedUploadUrl: string;\n  documentRefId: string;\n  folderId: string;\n};\nexport type UploadDocumentActionParams = {\n  fileFolderId: string;\n  fileName: string;\n  docFile: File;\n};\ntype UploadDocumentZambdaResponse = {\n  z3Url: string;\n  presignedUploadUrl: string;\n  documentRefId: string;\n  folderId: string;\n};\nexport type UsePatientDocsActionsReturn = {\n  uploadDocumentAction: (uploadParams: UploadDocumentActionParams) => Promise<UploadDocumentActionResult>;\n  isUploading: boolean;\n};\n\nexport type UseGetPatientDocsReturn = {\n  isLoadingDocuments: boolean;\n  documents?: PatientDocumentInfo[];\n  //TODO: remove\n  // documentsByFolders: Record<string, PatientDocumentInfo[]>;\n  isLoadingFolders: boolean;\n  documentsFolders: PatientDocumentsFolder[];\n  searchDocuments: (filters: PatientDocumentsFilters) => void;\n  downloadDocument: (documentId: string) => Promise<void>;\n  documentActions: UsePatientDocsActionsReturn;\n};\n\nconst QUERY_KEYS = {\n  GET_PATIENT_DOCS_FOLDERS: 'get-patient-docs-folders',\n  GET_SEARCH_PATIENT_DOCUMENTS: 'get-search-patient-documents',\n};\n\nexport const useGetPatientDocs = (patientId: string, filters?: PatientDocumentsFilters): UseGetPatientDocsReturn => {\n  const [documents, setDocuments] = useState<PatientDocumentInfo[]>();\n  const [documentsFolders, setDocumentsFolders] = useState<PatientDocumentsFolder[]>([]);\n  const [currentFilters, setCurrentFilters] = useState<PatientDocumentsFilters | undefined>(filters);\n  const { oystehr } = useApiClients();\n\n  const { isLoading: isLoadingFolders } = useGetPatientDocsFolders({ patientId }, (docsFolders) => {\n    console.log(`[useGetPatientDocs] Folders data loading SUCCESS size=[${docsFolders.length}]. Content => `);\n    console.log(docsFolders);\n    setDocumentsFolders(docsFolders);\n  });\n\n  const { isLoading: isLoadingDocuments } = useSearchPatientDocuments(\n    { patientId: patientId, filters: currentFilters },\n    (docs) => {\n      console.log(`[useGetPatientDocs] found Docs [${docs.length}] => `);\n      console.log(docs);\n      setDocuments(docs);\n    }\n  );\n\n  const documentActions = usePatientDocsActions({ patientId });\n\n  const searchDocuments = useCallback((filters: PatientDocumentsFilters): void => {\n    console.log(`[useGetPatientDocs] searchDocuments, filters => `);\n    console.log(filters);\n    setCurrentFilters(filters);\n  }, []);\n\n  const { getAccessTokenSilently } = useAuth0();\n\n  const getDocumentById = useCallback(\n    (docId: string): PatientDocumentInfo | undefined => {\n      return documents?.find((doc) => doc.id === docId);\n    },\n    [documents]\n  );\n\n  const downloadDocument = useCallback(\n    async (documentId: string): Promise<void> => {\n      const authToken = await getAccessTokenSilently();\n      let patientDoc = getDocumentById(documentId);\n\n      if (!patientDoc && oystehr) {\n        const docRef = (\n          await oystehr.fhir.search<DocumentReference>({\n            resourceType: 'DocumentReference',\n            params: [\n              {\n                name: '_id',\n                value: documentId,\n              },\n            ],\n          })\n        ).unbundle()[0];\n        if (docRef) {\n          patientDoc = createDocumentInfo(docRef);\n          setDocuments([...(documents ?? []), patientDoc]);\n        }\n      }\n\n      const docAttachments = patientDoc?.attachments ?? [];\n      if (docAttachments.length === 0) {\n        console.error(`No attachments found for a docId=[${documentId}]`);\n        return;\n      }\n\n      const urlSigningRequests = docAttachments.map(async (attachment) => {\n        const presignedUrl = await getPresignedFileUrl(attachment.z3Url, authToken);\n        return {\n          attachment: attachment,\n          presignedUrl: presignedUrl,\n        };\n      });\n\n      const filesInfoToDownload = (await Promise.all(urlSigningRequests))\n        .filter((signedAttach) => !!signedAttach.presignedUrl)\n        .map((signedAttach) => {\n          const fileTitle = signedAttach.attachment.title;\n          const fileExt = parseFileExtension(signedAttach.attachment.fileNameFromUrl) ?? 'unknown';\n          const fullFileName = fileTitle.includes('.') ? fileTitle : `${fileTitle}.${fileExt}`;\n          return {\n            fileName: fullFileName,\n            urlToDownload: signedAttach.presignedUrl!,\n          };\n        });\n\n      for (const fileToD of filesInfoToDownload) {\n        await fetch(new URL(fileToD.urlToDownload), {\n          method: 'GET',\n          headers: { 'Cache-Control': 'no-cache' },\n        })\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error(`failed to download Document attachment [${fileToD.fileName}]`);\n            }\n            return response.blob();\n          })\n          .then((blob) => {\n            const fileBlob = window.URL.createObjectURL(new Blob([blob]));\n            const link = document.createElement('a');\n            link.href = fileBlob;\n            link.download = fileToD.fileName;\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          })\n          .catch((error) => {\n            console.log(error);\n          });\n      }\n    },\n    [documents, getAccessTokenSilently, getDocumentById, oystehr]\n  );\n\n  return {\n    isLoadingDocuments: isLoadingDocuments,\n    documents: documents,\n    // documentsByFolders: documentsByFolders,\n    isLoadingFolders: isLoadingFolders,\n    documentsFolders: documentsFolders,\n    searchDocuments: searchDocuments,\n    downloadDocument: downloadDocument,\n    documentActions: documentActions,\n  };\n};\n\nconst useGetPatientDocsFolders = (\n  {\n    patientId,\n  }: {\n    patientId: string;\n  },\n  onSuccess: (data: PatientDocumentsFolder[]) => void\n): UseQueryResult<FhirResource[], unknown> => {\n  const { oystehr } = useApiClients();\n  return useQuery(\n    [QUERY_KEYS.GET_PATIENT_DOCS_FOLDERS, { patientId }],\n    async () => {\n      if (!oystehr) {\n        throw new Error('useGetDocsFolders() oystehr client not defined');\n      }\n      if (!patientId) {\n        throw new Error('useGetDocsFolders() patientId not defined');\n      }\n\n      console.log(`useGetPatientDocsFolders() query triggered`);\n\n      return (\n        await oystehr.fhir.search<FhirResource>({\n          resourceType: 'List',\n          params: [\n            { name: 'subject', value: `Patient/${patientId}` },\n            { name: 'code', value: PATIENT_FOLDERS_CODE },\n          ],\n        })\n      ).unbundle();\n    },\n    {\n      onSuccess: (searchResultsResources: FhirResource[]) => {\n        const listResources =\n          searchResultsResources\n            ?.filter((resource: FhirResource) => resource.resourceType === 'List' && resource.status === 'current')\n            ?.map((listResource: FhirResource) => listResource as List) ?? [];\n\n        const patientFoldersResources = listResources.filter((listResource: List) =>\n          Boolean(listResource.code?.coding?.find((folderCoding) => folderCoding.code === PATIENT_FOLDERS_CODE))\n        );\n\n        const docsFolders = patientFoldersResources.map((listRes) => {\n          const folderName = listRes.code?.coding?.find((folderCoding) => folderCoding.code === PATIENT_FOLDERS_CODE)\n            ?.display;\n          const docRefs: DocRef[] = (listRes.entry ?? []).map(\n            (entry) =>\n              ({\n                reference: entry.item,\n              }) as DocRef\n          );\n\n          return {\n            id: listRes.id!,\n            folderName: folderName,\n            documentsCount: docRefs.length,\n            documentsRefs: docRefs,\n          } as PatientDocumentsFolder;\n        });\n\n        onSuccess(docsFolders);\n      },\n      onError: (err) => {\n        console.error('useGetPatientDocsFolders() ERROR', err);\n      },\n    }\n  );\n};\n\n/**\n * [/DocumentReference?subject=Patient/104e4c8c-1866-4c96-a436-88080c691614&_has:List:item:_id=06654560-445a-4499-a5ec-48fae3495781]\n */\nconst useSearchPatientDocuments = (\n  {\n    patientId,\n    filters,\n  }: {\n    patientId: string;\n    filters?: PatientDocumentsFilters;\n  },\n  onSuccess: (data: PatientDocumentInfo[]) => void\n): UseQueryResult<FhirResource[], unknown> => {\n  const docCreationDate = filters?.dateAdded?.toFormat('yyyy-MM-dd');\n  const { oystehr } = useApiClients();\n  return useQuery(\n    [\n      QUERY_KEYS.GET_SEARCH_PATIENT_DOCUMENTS,\n      {\n        patientId,\n        docSearchTerm: filters?.documentName,\n        docCreationDate: docCreationDate,\n        docFolderId: filters?.documentsFolder?.id,\n      },\n    ],\n    async () => {\n      if (!oystehr) throw new Error('useSearchPatientDocuments() oystehr not defined');\n      if (!patientId) throw new Error('useSearchPatientDocuments() patientId not defined');\n\n      console.log(`useSearchPatientDocuments() query triggered`);\n\n      const searchParams: SearchParam[] = [{ name: 'subject', value: `Patient/${patientId}` }];\n      const docsFolder = filters?.documentsFolder;\n      if (docsFolder && docsFolder.id) {\n        searchParams.push({ name: '_has:List:item:_id', value: docsFolder.id });\n      }\n\n      if (docCreationDate && docCreationDate.trim().length > 0) {\n        searchParams.push({ name: 'date', value: `eq${docCreationDate}` });\n      }\n\n      return (\n        await oystehr.fhir.search<FhirResource>({\n          resourceType: 'DocumentReference',\n          params: searchParams,\n        })\n      ).unbundle();\n    },\n    {\n      onSuccess: (searchResultsResources: FhirResource[]) => {\n        console.log(`useSearchPatientDocuments() search results cnt=[${searchResultsResources.length}]`);\n\n        //&& resource.status === 'current'\n        const docRefsResources =\n          searchResultsResources\n            ?.filter((resource: FhirResource) => resource.resourceType === 'DocumentReference')\n            ?.map((docRefResource: FhirResource) => docRefResource as DocumentReference) ?? [];\n\n        const documents = docRefsResources.map((docRef) => createDocumentInfo(docRef));\n\n        //TODO: remove when _text search will be available\n        const resultDocuments = debug__mimicTextNarrativeDocumentsFilter(documents, filters);\n\n        onSuccess(resultDocuments);\n      },\n      onError: (err) => {\n        console.error('useSearchPatientDocuments() ERROR', err);\n      },\n    }\n  );\n};\n\nconst extractDocumentAttachments = (docRef: DocumentReference): PatientDocumentAttachment[] => {\n  const getFileNameFromUrl = (url: string | undefined): string | undefined => {\n    if (!url) return;\n    const parsedUrl = new URL(url);\n    return parsedUrl.pathname.split('/').pop() || '';\n  };\n  return docRef.content\n    ?.map((docRefContent) => docRefContent?.attachment)\n    ?.map((docRefAttachment) => {\n      let title = docRefAttachment.title || '';\n      if (docRefAttachment.contentType) {\n        const extension = docRefAttachment.contentType.split('/').pop();\n        const currentExtension = parseFileExtension(title);\n        // Add a file type if it does not match the already set type\n        if (extension && currentExtension !== extension) {\n          title = `${title}.${extension}`;\n        }\n      }\n      return {\n        title,\n        fileNameFromUrl: getFileNameFromUrl(docRefAttachment.url),\n        z3Url: docRefAttachment.url,\n      } as PatientDocumentAttachment;\n    });\n};\n\n//TODO: for now its not clear how real doc_name will be created based on the attachments data\n// there is ongoing problem having multiple attachments per single DocumentReference resource\nconst debug__createDisplayedDocumentName = (docRef: DocumentReference): string => {\n  return (extractDocumentAttachments(docRef) ?? []).map((item) => item.title).join(' & ');\n};\n\n//TODO: OystEHR FHIR backed is going to add support for \"_text\" search modifier and necessary migration changes is also\n// needs to be done per each available DocumentReference resource\n// until then simply adding front-side filtration mechanism\nconst debug__mimicTextNarrativeDocumentsFilter = (\n  documents: PatientDocumentInfo[],\n  filters?: PatientDocumentsFilters\n): PatientDocumentInfo[] => {\n  const docSearchTerm = filters?.documentName;\n  return documents.filter((doc) => {\n    if (!docSearchTerm) return true;\n    return doc.docName.toLowerCase().includes(docSearchTerm.toLowerCase());\n  });\n};\n\nconst usePatientDocsActions = ({ patientId }: { patientId: string }): UsePatientDocsActionsReturn => {\n  const { oystehrZambda } = useApiClients();\n  const queryClient = useQueryClient();\n  const [isUploading, setIsUploading] = useState(false);\n\n  const uploadDocumentAction = useCallback(\n    async (params: UploadDocumentActionParams): Promise<UploadDocumentActionResult> => {\n      console.log(`usePatientDocsActions()::uploadDocumentAction() triggered params =>`);\n      console.log(params);\n      const { docFile, ...restParams } = params;\n      try {\n        if (!CREATE_PATIENT_UPLOAD_DOCUMENT_URL_ZAMBDA_ID) {\n          throw new Error('Could not find environment variable VITE_APP_CREATE_PATIENT_UPLOAD_DOCUMENT_URL_ZAMBDA_ID');\n        }\n\n        if (!oystehrZambda) {\n          throw new Error('Could not initialize oystehrZambda client.');\n        }\n\n        console.log('signing request start ...');\n        setIsUploading(true);\n        const createUploadDocumentRes = await oystehrZambda.zambda.execute({\n          id: CREATE_PATIENT_UPLOAD_DOCUMENT_URL_ZAMBDA_ID,\n          patientId: patientId,\n          ...restParams,\n        });\n        console.log('signing request end RESULT =>');\n        console.log(createUploadDocumentRes);\n\n        const { z3Url, presignedUploadUrl, documentRefId, folderId } = chooseJson(\n          createUploadDocumentRes\n        ) as UploadDocumentZambdaResponse;\n\n        console.log('uploading file to Z3 ...');\n        // Upload the file to S3\n        const uploadResponse = await fetch(presignedUploadUrl, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': docFile.type,\n          },\n          body: docFile,\n        });\n        console.log('analyzing uploading result...');\n\n        if (!uploadResponse.ok) {\n          console.error('Z3 file uploading FAILURE');\n          throw new Error('Failed to upload file');\n        }\n\n        console.log('Z3 file uploading SUCCESS');\n\n        await Promise.all([\n          queryClient.refetchQueries([QUERY_KEYS.GET_PATIENT_DOCS_FOLDERS, { patientId }]),\n          queryClient.refetchQueries([QUERY_KEYS.GET_SEARCH_PATIENT_DOCUMENTS, { patientId }]),\n        ]);\n\n        return {\n          z3Url: z3Url,\n          presignedUploadUrl: presignedUploadUrl,\n          documentRefId: documentRefId,\n          folderId: folderId,\n        } as UploadDocumentActionResult;\n      } catch (error: unknown) {\n        console.error(error);\n        throw error;\n      } finally {\n        setIsUploading(false);\n      }\n    },\n    [oystehrZambda, patientId, queryClient]\n  );\n\n  return {\n    uploadDocumentAction: uploadDocumentAction,\n    isUploading,\n  };\n};\n\nexport interface UploadPatientDocumentParameters {\n  patientId: string;\n  documentFile: File;\n}\n\nexport interface UploadPatientDocumentResponse {\n  z3Url: string;\n  presignedUrl: string;\n}\n\nconst createDocumentInfo = (documentReference: DocumentReference): PatientDocumentInfo => {\n  return {\n    id: documentReference.id!,\n    docName: debug__createDisplayedDocumentName(documentReference),\n    whenAddedDate: documentReference.date,\n    attachments: extractDocumentAttachments(documentReference),\n    encounterId: documentReference.context?.encounter?.[0]?.reference?.split('/')?.[1],\n  };\n};\n"]}