{"version":3,"file":"useGetPatientPaymentsList.js","sourceRoot":"","sources":["useGetPatientPaymentsList.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAuC;AAEvC,iDAAgD;AAMhD,4EAA4E;AACrE,IAAM,yBAAyB,GAAG,UAAC,KAA8B;IAC9D,IAAA,aAAa,GAAK,IAAA,6BAAa,GAAE,cAApB,CAAqB;IAClC,IAAA,SAAS,GAAuC,KAAK,UAA5C,EAAE,WAAW,GAA0B,KAAK,YAA/B,EAAE,QAAQ,GAAgB,KAAK,SAArB,EAAE,SAAS,GAAK,KAAK,UAAV,CAAW;IAE9D,OAAO,IAAA,sBAAQ,EACb,CAAC,wCAAiC,SAAS,wBAAc,WAAW,aAAX,WAAW,cAAX,WAAW,GAAI,EAAE,CAAE,EAAE,SAAS,EAAE,WAAW,CAAC,EACrG;;;;;yBACM,CAAA,aAAa,IAAI,SAAS,CAAA,EAA1B,wBAA0B;oBACb,qBAAM,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC;4BAChD,EAAE,EAAE,uBAAuB;4BAC3B,SAAS,WAAA;4BACT,WAAW,aAAA;yBACZ,CAAC,EAAA;;oBAJI,MAAM,GAAG,SAIb;oBACF,sBAAO,MAAM,CAAC,MAAM,EAAC;wBAGvB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;;;SACzE,EACD;QACE,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,IAAI,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ;QAClE,SAAS,WAAA;QACT,OAAO,EAAE,UAAC,GAAG;YACX,OAAO,CAAC,KAAK,CAAC,6CAA6C,EAAE,GAAG,CAAC,CAAC;QACpE,CAAC;KACF,CACF,CAAC;AACJ,CAAC,CAAC;AA1BW,QAAA,yBAAyB,6BA0BpC","sourcesContent":["import { useQuery } from 'react-query';\nimport { ListPatientPaymentInput, ListPatientPaymentResponse, PromiseReturnType } from 'utils';\nimport { useApiClients } from './useAppClients';\n\ninterface GetPatientPaymentsInput extends ListPatientPaymentInput {\n  disabled?: boolean;\n  onSuccess?: (data: PromiseReturnType<Promise<ListPatientPaymentResponse>>) => void;\n}\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useGetPatientPaymentsList = (input: GetPatientPaymentsInput) => {\n  const { oystehrZambda } = useApiClients();\n  const { patientId, encounterId, disabled, onSuccess } = input;\n\n  return useQuery(\n    [`patient-payments-list?patient=${patientId}&encounter=${encounterId ?? ''}`, patientId, encounterId],\n    async () => {\n      if (oystehrZambda && patientId) {\n        const result = await oystehrZambda.zambda.execute({\n          id: 'patient-payments-list',\n          patientId,\n          encounterId,\n        });\n        return result.output;\n      }\n\n      throw new Error('api client not defined or patient id is not provided');\n    },\n    {\n      enabled: Boolean(patientId) && Boolean(oystehrZambda) && !disabled,\n      onSuccess,\n      onError: (err) => {\n        console.error('Error during fetching get payment methods: ', err);\n      },\n    }\n  );\n};\n"]}