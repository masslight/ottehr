{"version":3,"file":"AddPatient.js","sourceRoot":"","sources":["AddPatient.tsx"],"names":[],"mappings":"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","sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  Dialog,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Radio,\n  RadioGroup,\n  Select,\n  TextField,\n  Typography,\n  useTheme,\n} from '@mui/material';\nimport Oystehr from '@oystehr/sdk';\nimport { Location, Patient, Person, RelatedPerson, Schedule, Slot } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { enqueueSnackbar } from 'notistack';\nimport { useEffect, useState } from 'react';\nimport { PatternFormat } from 'react-number-format';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  CreateAppointmentInputParams,\n  CreateSlotParams,\n  getAppointmentDurationFromSlot,\n  getContactEmailForPatientAccount,\n  getFullName,\n  GetScheduleRequestParams,\n  GetScheduleResponse,\n  getTimezone,\n  PRIVATE_EXTENSION_BASE_URL,\n  ScheduleType,\n  ServiceMode,\n  SLUG_SYSTEM,\n} from 'utils';\nimport { createAppointment, createSlot, getLocations } from '../api/api';\nimport CustomBreadcrumbs from '../components/CustomBreadcrumbs';\nimport DateSearch from '../components/DateSearch';\nimport { CustomDialog } from '../components/dialogs/CustomDialog';\nimport LocationSelect from '../components/LocationSelect';\nimport SlotPicker from '../components/SlotPicker';\nimport { MAXIMUM_CHARACTER_LIMIT, REASON_FOR_VISIT_OPTIONS } from '../constants';\nimport { dataTestIds } from '../constants/data-test-ids';\nimport { useApiClients } from '../hooks/useAppClients';\nimport PageContainer from '../layout/PageContainer';\nimport { EmailUserValue, PersonSex, VisitType } from '../types/types';\n\nconst mapSelectedPatientEmailUser = (selectedPatientEmailUser: string | undefined): EmailUserValue | undefined => {\n  if (!selectedPatientEmailUser) {\n    return undefined;\n  }\n\n  const EmailUserMapper = {\n    'Patient (Self)': 'Patient (Self)',\n    Patient: 'Patient (Self)',\n    'Parent/Guardian': 'Parent/Guardian',\n  };\n\n  if (Object.keys(EmailUserMapper).includes(selectedPatientEmailUser)) {\n    const key = selectedPatientEmailUser as keyof typeof EmailUserMapper;\n    return EmailUserMapper[key] as EmailUserValue;\n  }\n  return undefined;\n};\n\ntype SlotLoadingState =\n  | { status: 'initial'; input: undefined }\n  | { status: 'loading'; input: undefined }\n  | { status: 'loaded'; input: string };\n\nexport interface LocationWithWalkinSchedule extends Location {\n  walkinSchedule: Schedule | undefined;\n}\n\nexport default function AddPatient(): JSX.Element {\n  const storedLocation = localStorage?.getItem('selectedLocation');\n  const [selectedLocation, setSelectedLocation] = useState<LocationWithWalkinSchedule | undefined>(\n    storedLocation ? JSON.parse(storedLocation) : undefined\n  );\n  const [firstName, setFirstName] = useState<string>('');\n  const [lastName, setLastName] = useState<string>('');\n  const [birthDate, setBirthDate] = useState<DateTime | null>(null);\n  const [sex, setSex] = useState<PersonSex | ''>('');\n  const [mobilePhone, setMobilePhone] = useState<string>('');\n  const [reasonForVisit, setReasonForVisit] = useState<string>('');\n  const [reasonForVisitAdditional, setReasonForVisitAdditional] = useState<string>('');\n  const [visitType, setVisitType] = useState<VisitType>();\n  const [slot, setSlot] = useState<Slot | undefined>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [searching, setSearching] = useState<boolean>(false);\n  const [errors, setErrors] = useState<{ submit?: boolean; phone?: boolean; search?: boolean }>({\n    submit: false,\n    phone: false,\n    search: false,\n  });\n  const [loadingSlotState, setLoadingSlotState] = useState<SlotLoadingState>({ status: 'initial', input: undefined });\n  const [locationWithSlotData, setLocationWithSlotData] = useState<GetScheduleResponse | undefined>(undefined);\n  const [validDate, setValidDate] = useState<boolean>(true);\n  const [selectSlotDialogOpen, setSelectSlotDialogOpen] = useState<boolean>(false);\n  const [validReasonForVisit, setValidReasonForVisit] = useState<boolean>(true);\n  const [openSearchResults, setOpenSearchResults] = useState<boolean>(false);\n  const [patients, setPatients] = useState<Patient[] | undefined>(undefined);\n  const [selectedPatient, setSelectedPatient] = useState<Patient | undefined>(undefined);\n  const [showFields, setShowFields] = useState<{ prefillForSelected?: boolean; forcePatientSearch?: boolean }>({\n    prefillForSelected: false,\n    forcePatientSearch: true,\n  });\n\n  // console.log('slot', slot);\n\n  // general variables\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { oystehr, oystehrZambda } = useApiClients();\n  const reasonForVisitErrorMessage = `Input cannot be more than ${MAXIMUM_CHARACTER_LIMIT} characters`;\n  const phoneNumberErrorMessage = 'Phone number must be 10 digits in the format (xxx) xxx-xxxx';\n\n  const handleAdditionalReasonForVisitChange = (newValue: string): void => {\n    setValidReasonForVisit(newValue.length <= MAXIMUM_CHARACTER_LIMIT);\n    setReasonForVisitAdditional(newValue);\n  };\n\n  useEffect(() => {\n    const fetchLocationWithSlotData = async (params: GetScheduleRequestParams, client: Oystehr): Promise<void> => {\n      setLoadingSlotState({ status: 'loading', input: undefined });\n      try {\n        const locationResponse = await getLocations(client, params);\n        setLocationWithSlotData(locationResponse);\n      } catch (e) {\n        console.error('error loading location with slot data', e);\n      } finally {\n        setLoadingSlotState({ status: 'loaded', input: `${params.slug}` });\n      }\n    };\n    const locationSlug = selectedLocation?.identifier?.find((identifierTemp) => identifierTemp.system === SLUG_SYSTEM)\n      ?.value;\n    if (!locationSlug) {\n      // console.log('show some toast: location is missing slug', selectedLocation, locationSlug);\n      return;\n    }\n    if (\n      !oystehrZambda ||\n      loadingSlotState.status === 'loading' ||\n      (loadingSlotState.status === 'loaded' && loadingSlotState.input === locationSlug)\n    ) {\n      return;\n    }\n    void fetchLocationWithSlotData({ slug: locationSlug, scheduleType: ScheduleType.location }, oystehrZambda);\n  }, [selectedLocation, loadingSlotState, oystehrZambda]);\n\n  // handle functions\n  const handleFormSubmit = async (event: React.FormEvent<HTMLFormElement>): Promise<void> => {\n    event.preventDefault();\n\n    if (mobilePhone.length !== 10) {\n      setErrors({ phone: true });\n      return;\n    } else {\n      setErrors({});\n    }\n\n    if ((visitType === VisitType.PreBook || visitType === VisitType.PostTelemed) && slot === undefined) {\n      setSelectSlotDialogOpen(true);\n      return;\n    }\n    if (showFields.forcePatientSearch) {\n      setErrors({ search: true });\n      return;\n    } else {\n      setErrors({ ...errors, search: false });\n    }\n\n    if (validDate && validReasonForVisit) {\n      setLoading(true);\n\n      let selectedPatientEmail, selectedPatientEmailUser;\n      if (selectedPatient) {\n        selectedPatientEmailUser = mapSelectedPatientEmailUser(\n          selectedPatient.extension?.find((ext) => ext.url === `${PRIVATE_EXTENSION_BASE_URL}/form-user`)\n            ?.valueString as any\n        );\n        if (selectedPatientEmailUser) {\n          if (selectedPatientEmailUser !== 'Parent/Guardian') {\n            selectedPatientEmail = selectedPatient.telecom?.find((telecom) => telecom.system === 'email')?.value;\n          } else if (selectedPatientEmailUser === 'Parent/Guardian') {\n            const guardianContact = selectedPatient.contact?.find(\n              (contact) =>\n                contact.relationship?.find((relationship) => relationship?.coding?.[0].code === 'Parent/Guardian')\n            );\n            selectedPatientEmail = guardianContact?.telecom?.find((telecom) => telecom.system === 'email')?.value;\n          }\n        }\n      }\n\n      const emailToUse = selectedPatientEmail;\n      let emailUser = selectedPatientEmailUser;\n      if (emailUser == undefined && emailToUse) {\n        emailUser = 'Parent/Guardian';\n      }\n      console.log('slot', slot);\n      if (!oystehrZambda) throw new Error('Zambda client not found');\n      let createSlotInput: CreateSlotParams;\n      if (visitType === VisitType.WalkIn) {\n        if (!selectedLocation) {\n          enqueueSnackbar('Please select a location', { variant: 'error' });\n          setLoading(false);\n          return;\n        }\n        const timezone = getTimezone(selectedLocation?.walkinSchedule ?? selectedLocation);\n        createSlotInput = {\n          scheduleId: selectedLocation?.walkinSchedule?.id ?? '',\n          startISO: DateTime.now().setZone(timezone).toISO() ?? '',\n          lengthInMinutes: 15,\n          serviceModality: ServiceMode['in-person'],\n          walkin: true,\n        };\n      } else {\n        if (!slot) {\n          enqueueSnackbar('Please select a time slot', { variant: 'error' });\n          setLoading(false);\n          return;\n        }\n        const scheduleId = slot?.schedule?.reference?.split('/')?.[1] ?? '';\n        createSlotInput = {\n          scheduleId: scheduleId,\n          startISO: slot?.start ?? '',\n          lengthInMinutes: getAppointmentDurationFromSlot(slot),\n          serviceModality: ServiceMode['in-person'],\n          walkin: false,\n          postTelemedLabOnly: visitType === VisitType.PostTelemed,\n        };\n      }\n      console.log('slot input: ', createSlotInput);\n      const persistedSlot = await createSlot(createSlotInput, oystehrZambda);\n      const zambdaParams: CreateAppointmentInputParams = {\n        patient: {\n          id: selectedPatient?.id,\n          newPatient: !selectedPatient,\n          firstName: (selectedPatient?.name?.[0].given?.join(' ') || firstName)?.trim(),\n          lastName: (selectedPatient?.name?.[0].family || lastName)?.trim(),\n          dateOfBirth: selectedPatient?.birthDate || birthDate?.toISODate() || undefined,\n          sex: (selectedPatient?.gender as PersonSex) || sex || undefined,\n          phoneNumber: mobilePhone,\n          email: emailToUse,\n          reasonForVisit: reasonForVisit,\n          reasonAdditional: reasonForVisitAdditional !== '' ? reasonForVisitAdditional : undefined,\n        },\n        slotId: persistedSlot.id!,\n      };\n\n      let response;\n      let apiErr = false;\n      try {\n        response = await createAppointment(oystehrZambda, zambdaParams);\n      } catch (error) {\n        console.error(`Failed to add patient: ${error}`);\n        apiErr = true;\n      } finally {\n        setLoading(false);\n        if (response && !apiErr) {\n          navigate('/visits');\n        } else {\n          setErrors({ submit: true });\n        }\n      }\n    }\n  };\n  // console.log(slot);\n\n  const handlePatientSearch = async (e: any): Promise<void> => {\n    e.preventDefault();\n    if (mobilePhone.length !== 10) {\n      setErrors({ ...errors, phone: true });\n      return;\n    }\n    setSearching(true);\n    setErrors({ ...errors, search: false });\n    setShowFields({ ...showFields, forcePatientSearch: false });\n\n    if (!oystehr) {\n      return;\n    }\n    const resources = (\n      await oystehr.fhir.search<Patient | Person | RelatedPerson>({\n        resourceType: 'Person',\n        params: [\n          {\n            name: 'telecom',\n            value: `+1${mobilePhone}`,\n          },\n          {\n            name: '_include',\n            value: 'Person:relatedperson',\n          },\n          {\n            name: '_include:iterate',\n            value: 'RelatedPerson:patient',\n          },\n        ],\n      })\n    ).unbundle();\n    const patients = resources.filter(\n      (resourceTemp): resourceTemp is Patient => resourceTemp.resourceType === 'Patient'\n    );\n    patients.sort(sortPatientsByName);\n    setPatients(patients);\n    setOpenSearchResults(true);\n    setSearching(false);\n  };\n\n  const sortPatientsByName = (a: Patient, b: Patient): number => {\n    const lastNameA = a?.name?.[0].family;\n    const lastNameB = b?.name?.[0].family;\n    const firstNameA = a?.name?.[0].given?.join(' ');\n    const firstNameB = b?.name?.[0].given?.join(' ');\n    if (lastNameA && lastNameB && firstNameA && firstNameB) {\n      // sort by last name\n      if (lastNameA < lastNameB) {\n        return -1;\n      } else if (lastNameA > lastNameB) {\n        return 1;\n      } else {\n        // if same last name, sort by first name\n        return firstNameA.localeCompare(firstNameB);\n      }\n    } else {\n      return 0;\n    }\n  };\n\n  const handleSelectPatient = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const selected = patients?.find((patient) => patient.id === event.target.value);\n    setSelectedPatient(selected);\n  };\n\n  return (\n    <PageContainer>\n      <Grid container direction=\"row\">\n        <Grid item xs={3.5} />\n        <Grid item xs={5}>\n          <CustomBreadcrumbs\n            chain={[\n              { link: '/visits', children: 'In Person' },\n              { link: '#', children: 'Add Patient' },\n            ]}\n          />\n\n          {/* page title */}\n\n          <Typography variant=\"h3\" marginTop={1} color={'primary.dark'}>\n            Add Patient\n          </Typography>\n\n          {/* form content */}\n          <Paper>\n            <form onSubmit={(e) => handleFormSubmit(e)}>\n              <Box padding={3} marginTop={2}>\n                {/* Location Select */}\n                <Typography variant=\"h4\" color=\"primary.dark\" data-testid={dataTestIds.addPatientPage.locationHeader}>\n                  Location\n                </Typography>\n\n                {/* location search */}\n                <Box sx={{ marginTop: 2 }}>\n                  <LocationSelect\n                    location={selectedLocation}\n                    setLocation={setSelectedLocation}\n                    updateURL={false}\n                    required\n                    renderInputProps={{ disabled: false }}\n                  />\n                </Box>\n\n                {/* Patient information */}\n                <Box>\n                  <Typography variant=\"h4\" color=\"primary.dark\" sx={{ marginTop: 4 }}>\n                    Patient information\n                  </Typography>\n                  <Box marginTop={2}>\n                    <Grid container>\n                      <Grid item xs={8}>\n                        <PatternFormat\n                          data-testid={dataTestIds.addPatientPage.mobilePhoneInput}\n                          customInput={TextField}\n                          value={mobilePhone}\n                          format=\"(###) ###-####\"\n                          mask=\" \"\n                          label=\"Mobile Phone\"\n                          variant=\"outlined\"\n                          placeholder=\"(XXX) XXX-XXXX\"\n                          fullWidth\n                          required\n                          error={errors.phone}\n                          helperText={errors?.phone ? phoneNumberErrorMessage : ''}\n                          onValueChange={(values, sourceInfo) => {\n                            if (sourceInfo.source === 'event') {\n                              setMobilePhone(values.value);\n                              if (errors.phone && values.value.length === 10) {\n                                setErrors({ ...errors, phone: false });\n                              }\n                            }\n                          }}\n                        />\n                      </Grid>\n                      <Grid\n                        item\n                        xs={4}\n                        sx={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', padding: '0 8px' }}\n                      >\n                        <LoadingButton\n                          data-testid={dataTestIds.addPatientPage.searchForPatientsButton}\n                          variant=\"contained\"\n                          onClick={(event) => handlePatientSearch(event)}\n                          loading={searching}\n                          sx={{\n                            borderRadius: 100,\n                            textTransform: 'none',\n                            fontWeight: 600,\n                          }}\n                        >\n                          Search for Patients\n                        </LoadingButton>\n                      </Grid>\n                    </Grid>\n                  </Box>\n                  <Dialog\n                    open={openSearchResults}\n                    onClose={() => {\n                      setSelectedPatient(undefined);\n                      setOpenSearchResults(false);\n                    }}\n                  >\n                    <Box\n                      sx={{ minWidth: '600px', borderRadius: '4px', p: '35px', maxHeight: '450px', overflow: 'scroll' }}\n                    >\n                      <Box>\n                        <Typography\n                          variant=\"h4\"\n                          sx={{ fontWeight: '600 !important', color: theme.palette.primary.main, marginBottom: '4px' }}\n                        >\n                          Select an Existing Patient\n                        </Typography>\n                      </Box>\n                      <Box>\n                        <RadioGroup onChange={(e) => handleSelectPatient(e)}>\n                          {patients?.map((patient) => {\n                            const label = `${getFullName(patient)} (DOB: ${DateTime.fromISO(\n                              patient?.birthDate || ''\n                            ).toFormat('MMMM dd, yyyy')})`;\n                            return (\n                              <FormControlLabel key={patient.id} value={patient.id} control={<Radio />} label={label} />\n                            );\n                          })}\n                        </RadioGroup>\n                      </Box>\n                      {selectedPatient && (\n                        <Box sx={{ marginTop: 2 }}>\n                          <Button\n                            data-testid={dataTestIds.addPatientPage.prefillForButton}\n                            variant=\"outlined\"\n                            sx={{\n                              borderRadius: 100,\n                              textTransform: 'none',\n                              fontWeight: 600,\n                            }}\n                            onClick={() => {\n                              setShowFields({ ...showFields, prefillForSelected: true });\n                              setOpenSearchResults(false);\n                            }}\n                          >\n                            Prefill for {getFullName(selectedPatient)}\n                          </Button>\n                        </Box>\n                      )}\n                      <Box sx={{ marginTop: 2 }}>\n                        <Button\n                          data-testid={dataTestIds.addPatientPage.patientNotFoundButton}\n                          variant=\"contained\"\n                          sx={{\n                            borderRadius: 100,\n                            textTransform: 'none',\n                            fontWeight: 600,\n                          }}\n                          onClick={() => {\n                            setSelectedPatient(undefined);\n                            setShowFields({ ...showFields, prefillForSelected: false });\n                            setOpenSearchResults(false);\n                          }}\n                        >\n                          Patient Not Found - Add Manually\n                        </Button>\n                      </Box>\n                    </Box>\n                  </Dialog>\n                  {searching && (\n                    <Box sx={{ display: 'flex', justifyContent: 'center' }} marginTop={2}>\n                      <CircularProgress />\n                    </Box>\n                  )}\n                  {showFields.prefillForSelected && selectedPatient && (\n                    <Box marginTop={3}>\n                      <Typography\n                        variant=\"h4\"\n                        color=\"primary.dark\"\n                        data-testid={dataTestIds.addPatientPage.prefilledPatientName}\n                      >\n                        {getFullName(selectedPatient)}\n                      </Typography>\n                      <Typography data-testid={dataTestIds.addPatientPage.prefilledPatientBirthday}>\n                        Birthday: {DateTime.fromISO(selectedPatient?.birthDate || '').toFormat('MMMM dd, yyyy')}\n                      </Typography>\n                      <Typography data-testid={dataTestIds.addPatientPage.prefilledPatientBirthSex}>\n                        Birth Sex: {selectedPatient.gender}\n                      </Typography>\n                      <Typography data-testid={dataTestIds.addPatientPage.prefilledPatientEmail}>\n                        Email: {getContactEmailForPatientAccount(selectedPatient) ?? 'not found'}\n                      </Typography>\n                    </Box>\n                  )}\n                  {!showFields.forcePatientSearch && !showFields.prefillForSelected && !searching && (\n                    <Box marginTop={2}>\n                      <Box>\n                        <Grid container direction=\"row\" justifyContent=\"space-between\">\n                          <Grid item xs={5.85}>\n                            <TextField\n                              data-testid={dataTestIds.addPatientPage.firstNameInput}\n                              label=\"First Name\"\n                              variant=\"outlined\"\n                              required\n                              fullWidth\n                              value={firstName.trimStart()}\n                              onChange={(event) => {\n                                setFirstName(event.target.value);\n                              }}\n                            ></TextField>\n                          </Grid>\n                          <Grid item xs={5.85}>\n                            <TextField\n                              data-testid={dataTestIds.addPatientPage.lastNameInput}\n                              label=\"Last Name\"\n                              variant=\"outlined\"\n                              required\n                              fullWidth\n                              value={lastName.trimStart()}\n                              onChange={(event) => {\n                                setLastName(event.target.value);\n                              }}\n                            ></TextField>\n                          </Grid>\n                        </Grid>\n                      </Box>\n\n                      <Box marginTop={2}>\n                        <Grid container direction=\"row\" justifyContent=\"space-between\">\n                          <Grid item xs={5.85}>\n                            <DateSearch\n                              date={birthDate}\n                              setDate={setBirthDate}\n                              defaultValue={null}\n                              label=\"Date of birth\"\n                              required\n                              setIsValidDate={setValidDate}\n                            ></DateSearch>\n                          </Grid>\n                          <Grid item xs={5.85}>\n                            <FormControl fullWidth>\n                              <InputLabel id=\"sex-at-birth-label\">Sex at birth *</InputLabel>\n                              <Select\n                                data-testid={dataTestIds.addPatientPage.sexAtBirthDropdown}\n                                labelId=\"sex-at-birth-label\"\n                                id=\"sex-at-birth-select\"\n                                value={sex}\n                                label=\"Sex at birth *\"\n                                required\n                                onChange={(event) => {\n                                  setSex(event.target.value as PersonSex);\n                                }}\n                              >\n                                <MenuItem value={PersonSex.Male}>Male</MenuItem>\n                                <MenuItem value={PersonSex.Female}>Female</MenuItem>\n                                <MenuItem value={PersonSex.Intersex}>Intersex</MenuItem>\n                              </Select>\n                            </FormControl>\n                          </Grid>\n                        </Grid>\n                      </Box>\n                    </Box>\n                  )}\n                </Box>\n\n                {/* Visit Information */}\n                {!showFields.forcePatientSearch && !searching && (\n                  <Box marginTop={4}>\n                    <Typography variant=\"h4\" color=\"primary.dark\">\n                      Visit information\n                    </Typography>\n                    <Box marginTop={2}>\n                      <FormControl fullWidth>\n                        <InputLabel id=\"reason-for-visit-label\">Reason for visit *</InputLabel>\n                        <Select\n                          data-testid={dataTestIds.addPatientPage.reasonForVisitDropdown}\n                          labelId=\"reason-for-visit-label\"\n                          id=\"reason-for-visit-select\"\n                          value={reasonForVisit || ''}\n                          label=\"Reason for visit *\"\n                          required\n                          onChange={(event) => setReasonForVisit(event.target.value)}\n                        >\n                          {REASON_FOR_VISIT_OPTIONS.map((reason) => (\n                            <MenuItem key={reason} value={reason}>\n                              {reason}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    </Box>\n                    <Box marginTop={2}>\n                      <FormControl fullWidth>\n                        <TextField\n                          label=\"Tell us more (optional)\"\n                          id=\"reason-additional-text\"\n                          value={reasonForVisitAdditional}\n                          aria-describedby=\"reason-additional-helper-text\"\n                          onChange={(e) => handleAdditionalReasonForVisitChange(e.target.value.trimStart())}\n                          maxRows={2}\n                          multiline={true}\n                          error={!validReasonForVisit}\n                        />\n                        {reasonForVisitAdditional.length > 100 && (\n                          <Typography\n                            variant=\"caption\"\n                            color={validReasonForVisit ? 'text.secondary' : 'error'}\n                            sx={{ marginTop: 1 }}\n                          >\n                            {`${reasonForVisitAdditional.length} / ${MAXIMUM_CHARACTER_LIMIT}${\n                              !validReasonForVisit ? ` - ${reasonForVisitErrorMessage}` : ''\n                            }`}\n                          </Typography>\n                        )}\n                      </FormControl>\n                    </Box>\n                    <Box marginTop={2}>\n                      <FormControl fullWidth>\n                        <InputLabel id=\"visit-type-label\">Visit type *</InputLabel>\n                        <Select\n                          data-testid={dataTestIds.addPatientPage.visitTypeDropdown}\n                          labelId=\"visit-type-label\"\n                          id=\"visit-type-select\"\n                          value={visitType || ''}\n                          label=\"Visit type *\"\n                          required\n                          onChange={(event) => {\n                            setSlot(undefined);\n                            setVisitType(event.target.value as VisitType);\n                          }}\n                        >\n                          <MenuItem value={VisitType.WalkIn}>Walk-in In Person Visit</MenuItem>\n                          <MenuItem value={VisitType.PreBook}>Pre-booked In Person Visit</MenuItem>\n                          <MenuItem value={VisitType.PostTelemed}>Post Telemed Lab Only</MenuItem>\n                        </Select>\n                      </FormControl>\n                    </Box>\n                    {(visitType === VisitType.PreBook || visitType === VisitType.PostTelemed) && (\n                      <SlotPicker\n                        slotData={\n                          visitType === VisitType.PostTelemed\n                            ? locationWithSlotData?.telemedAvailable?.map((si) => si.slot)\n                            : locationWithSlotData?.available?.map((si) => si.slot)\n                        }\n                        slotsLoading={loadingSlotState.status === 'loading'}\n                        timezone={locationWithSlotData?.location?.timezone || 'Undefined'}\n                        selectedSlot={slot}\n                        setSelectedSlot={setSlot}\n                      />\n                    )}\n                  </Box>\n                )}\n\n                {showFields.forcePatientSearch && (\n                  <Box marginTop={4}>\n                    <Typography variant=\"body1\" color=\"primary.dark\">\n                      Please enter the mobile number and search for existing patients before proceeding.\n                    </Typography>\n                  </Box>\n                )}\n\n                {/* form buttons */}\n                <Box marginTop={4}>\n                  {errors.submit && (\n                    <Typography color=\"error\" variant=\"body2\" mb={2}>\n                      Failed to add patient. Please try again.\n                    </Typography>\n                  )}\n                  {errors.search && (\n                    <Typography color=\"error\" variant=\"body2\" mb={2}>\n                      Please search for patients before adding\n                    </Typography>\n                  )}\n                  <LoadingButton\n                    data-testid={dataTestIds.addPatientPage.addButton}\n                    variant=\"contained\"\n                    type=\"submit\"\n                    loading={loading || searching}\n                    sx={{\n                      borderRadius: 100,\n                      textTransform: 'none',\n                      fontWeight: 600,\n                      marginRight: 1,\n                    }}\n                  >\n                    Add {visitType}\n                  </LoadingButton>\n                  <Button\n                    data-testid={dataTestIds.addPatientPage.cancelButton}\n                    sx={{\n                      borderRadius: 100,\n                      textTransform: 'none',\n                      fontWeight: 600,\n                    }}\n                    onClick={() => {\n                      navigate('/visits');\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </Box>\n              </Box>\n            </form>\n            <CustomDialog\n              open={selectSlotDialogOpen}\n              title=\"Please select a date and time\"\n              description=\"To continue, please select an available appointment.\"\n              closeButtonText=\"Close\"\n              handleClose={() => setSelectSlotDialogOpen(false)}\n            />\n          </Paper>\n        </Grid>\n\n        <Grid item xs={3.5} />\n      </Grid>\n    </PageContainer>\n  );\n}\n"]}