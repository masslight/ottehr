{"version":3,"file":"AddPatient.test.js","sourceRoot":"","sources":["AddPatient.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import '@testing-library/jest-dom';\nimport { render, screen, waitForElementToBeRemoved, within } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { http, HttpResponse } from 'msw';\nimport { setupServer } from 'msw/node';\nimport { BrowserRouter, useNavigate } from 'react-router-dom';\nimport { dataTestIds } from 'src/constants/data-test-ids';\nimport { describe, expect, it, vi } from 'vitest';\nimport AddPatient from './AddPatient';\n\nvi.mock('react-router-dom', async () => {\n  const actual = await vi.importActual('react-router-dom');\n  return {\n    ...actual,\n    useNavigate: vi.fn(),\n  };\n});\n\ndescribe('AddPatient', () => {\n  const server = setupServer(\n    http.post('https://fhir-api.zapehr.com/Location/_search', () => {\n      return HttpResponse.json({ greeting: 'hello there' });\n    }),\n    http.post('https://fhir-api.zapehr.com/Person/_search', () => {\n      return HttpResponse.json({ greeting: 'hello there' });\n    })\n    // http.post('https://project-api.zapehr.com/v1/zambda/get-schedule/execute-public', () => {\n    //   return HttpResponse.json({\n    //     status: 200,\n    //     output: {\n    //       message: 'Successfully retrieved all available slot times',\n    //       available: [\n    //         {\n    //           slot: {\n    //             resourceType: 'Slot',\n    //             id: '7ed80758-1085-48a5-adb8-61ec1261b6d2|2025-06-16T09:30:00.000-04:00',\n    //             start: '2025-06-16T09:30:00.000-04:00',\n    //             serviceCategory: [\n    //               {\n    //                 coding: [\n    //                   {\n    //                     system: 'https://fhir.ottehr.com/slot-service-category',\n    //                     code: 'in-person-service-mode',\n    //                   },\n    //                 ],\n    //               },\n    //             ],\n    //             end: '2025-06-16T13:45:00.000+00:00',\n    //             schedule: {\n    //               reference: 'Schedule/7ed80758-1085-48a5-adb8-61ec1261b6d2',\n    //             },\n    //             status: 'free',\n    //           },\n    //           owner: {\n    //             resourceType: 'Location',\n    //             id: 'cdf183b2-c782-4567-9117-beee8066df1c',\n    //             name: 'Selden- NY',\n    //           },\n    //           timezone: 'America/New_York',\n    //         },\n    //       ],\n    //     },\n    //   });\n    // })\n  );\n\n  beforeAll(() => server.listen());\n  afterEach(() => server.resetHandlers());\n  afterAll(() => server.close());\n\n  it('Renders with appropriate fields', () => {\n    render(\n      <BrowserRouter>\n        <AddPatient />\n      </BrowserRouter>\n    );\n\n    const locationHeader = screen.getByTestId(dataTestIds.addPatientPage.locationHeader);\n    expect(locationHeader).toBeVisible();\n  });\n\n  it('Should test that when the user clicks on the cancel button, `navigate(/visits)` is called', async () => {\n    const user = userEvent.setup();\n    const navigateMock = vi.fn();\n    vi.mocked(useNavigate).mockReturnValue(navigateMock);\n\n    render(\n      <BrowserRouter>\n        <AddPatient />\n      </BrowserRouter>\n    );\n\n    const cancelButton = screen.getByTestId(dataTestIds.addPatientPage.cancelButton);\n    expect(cancelButton).toBeVisible();\n\n    await user.click(cancelButton);\n    expect(navigateMock).toHaveBeenCalledWith('/visits');\n  });\n\n  it('Should show a validation error that phone number is required when search for patients is clicked before any phone number is entered', async () => {\n    const user = userEvent.setup();\n\n    render(\n      <BrowserRouter>\n        <AddPatient />\n      </BrowserRouter>\n    );\n\n    await user.click(screen.getByTestId(dataTestIds.addPatientPage.searchForPatientsButton));\n    const errorMessage = screen.getByText('Phone number must be 10 digits in the format (xxx) xxx-xxxx');\n    expect(errorMessage).toBeVisible();\n  });\n\n  it('Should show a validation error that phone number is invalid when search for patients is clicked with an invalid phone number in the field', async () => {\n    const user = userEvent.setup();\n\n    render(\n      <BrowserRouter>\n        <AddPatient />\n      </BrowserRouter>\n    );\n\n    const phoneNumberEntryField = screen\n      .getByTestId(dataTestIds.addPatientPage.mobilePhoneInput)\n      .querySelector('input');\n\n    await user.click(phoneNumberEntryField!);\n    await user.paste('123'); // Invalid number\n\n    await user.click(screen.getByTestId(dataTestIds.addPatientPage.searchForPatientsButton));\n    const errorMessage = screen.getByText('Phone number must be 10 digits in the format (xxx) xxx-xxxx');\n    expect(errorMessage).toBeVisible();\n  });\n\n  it('Should use HTML5 required validation for all required fields', async () => {\n    const user = userEvent.setup();\n\n    render(\n      <BrowserRouter>\n        <AddPatient />\n      </BrowserRouter>\n    );\n\n    expect(screen.getByTestId(dataTestIds.dashboard.locationSelect).querySelector('input')).toHaveAttribute('required');\n\n    const phoneNumberEntryField = screen\n      .getByTestId(dataTestIds.addPatientPage.mobilePhoneInput)\n      .querySelector('input');\n    expect(phoneNumberEntryField).toBeInTheDocument();\n    expect(phoneNumberEntryField).toHaveAttribute('required');\n\n    await user.click(phoneNumberEntryField!);\n    await user.paste('1234567890'); // Sufficiently valid phone number\n    await user.click(screen.getByTestId(dataTestIds.addPatientPage.searchForPatientsButton));\n\n    // If this is visible then we are ready to test the broader form validations\n    const firstNameInput = screen.getByTestId(dataTestIds.addPatientPage.firstNameInput).querySelector('input');\n    expect(firstNameInput).toBeVisible();\n\n    expect(firstNameInput).toHaveAttribute('required');\n    expect(screen.getByTestId(dataTestIds.addPatientPage.lastNameInput).querySelector('input')).toHaveAttribute(\n      'required'\n    );\n    expect(await screen.findByPlaceholderText('MM/DD/YYYY')).toHaveAttribute('required');\n\n    expect(\n      (await screen.findByTestId(dataTestIds.addPatientPage.sexAtBirthDropdown)).querySelector('input')\n    ).toHaveAttribute('required');\n\n    expect(\n      (await screen.findByTestId(dataTestIds.addPatientPage.reasonForVisitDropdown)).querySelector('input')\n    ).toHaveAttribute('required');\n\n    expect(\n      (await screen.findByTestId(dataTestIds.addPatientPage.visitTypeDropdown)).querySelector('input')\n    ).toHaveAttribute('required');\n  });\n\n  it('Should show a  validation error if date of birth field has an invalid date', async () => {\n    const user = userEvent.setup();\n    render(\n      <BrowserRouter>\n        <AddPatient />\n      </BrowserRouter>\n    );\n    const phoneNumberEntryField = screen\n      .getByTestId(dataTestIds.addPatientPage.mobilePhoneInput)\n      .querySelector('input');\n    expect(phoneNumberEntryField).toBeInTheDocument();\n    await user.click(phoneNumberEntryField!);\n    await user.paste('1234567890'); // Sufficiently valid phone number\n    await user.click(screen.getByTestId(dataTestIds.addPatientPage.searchForPatientsButton));\n    const notFoundButton = screen.getByTestId(dataTestIds.addPatientPage.patientNotFoundButton);\n    await user.click(notFoundButton);\n\n    const dateOfBirthInput = await screen.findByPlaceholderText('MM/DD/YYYY');\n    expect(dateOfBirthInput).toBeVisible();\n    await user.click(dateOfBirthInput);\n    await user.paste('3'); // Invalid date\n    await user.tab(); // Trigger validation\n    const errorMessage = screen.getByText('please enter date in format MM/DD/YYYY');\n    expect(errorMessage).toBeVisible();\n  });\n\n  it('Should show a popup if user is in prebook visit type and does not select a slot', async () => {\n    const user = userEvent.setup();\n\n    render(\n      <BrowserRouter>\n        <AddPatient />\n      </BrowserRouter>\n    );\n\n    const phoneNumberEntryField = screen\n      .getByTestId(dataTestIds.addPatientPage.mobilePhoneInput)\n      .querySelector('input');\n    expect(phoneNumberEntryField).toBeInTheDocument();\n    await user.click(phoneNumberEntryField!);\n    await user.paste('1234567890'); // Sufficiently valid phone number\n    await user.click(screen.getByTestId(dataTestIds.addPatientPage.searchForPatientsButton));\n    const notFoundButton = screen.getByTestId(dataTestIds.addPatientPage.patientNotFoundButton);\n    await user.click(notFoundButton);\n\n    await waitForElementToBeRemoved(notFoundButton);\n\n    const visitTypeDropdownButton = within(screen.getByTestId(dataTestIds.addPatientPage.visitTypeDropdown)).getByRole(\n      'combobox'\n    );\n    await user.click(visitTypeDropdownButton);\n\n    const prebookOption = await screen.getByText('Pre-booked In Person Visit');\n    expect(prebookOption).toBeVisible();\n    await user.click(prebookOption);\n    const addButton = screen.getByTestId(dataTestIds.addPatientPage.addButton);\n    await user.click(addButton);\n\n    const slotSelectionPopup = screen.getByText('To continue, please select an available appointment.');\n    expect(slotSelectionPopup).toBeVisible();\n    // screen.debug(undefined, Infinity);\n  });\n});\n"]}