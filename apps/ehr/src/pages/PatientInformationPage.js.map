{"version":3,"file":"PatientInformationPage.js","sourceRoot":"","sources":["PatientInformationPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import { otherColors } from '@ehrTheme/colors';\nimport CloseIcon from '@mui/icons-material/Close';\nimport WarningAmberIcon from '@mui/icons-material/WarningAmber';\nimport { Box, Button, Typography, useTheme } from '@mui/material';\nimport { BundleEntry, Coverage, Organization, QuestionnaireResponseItem } from 'fhir/r4b';\nimport { enqueueSnackbar } from 'notistack';\nimport { FC, useEffect, useMemo, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useQueryClient } from 'react-query';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { dataTestIds } from 'src/constants/data-test-ids';\nimport {\n  checkCoverageMatchesDetails,\n  CoverageCheckWithDetails,\n  extractFirstValueFromAnswer,\n  flattenItems,\n  getFullName,\n  InsurancePlanDTO,\n  makePrepopulatedItemsFromPatientRecord,\n  pruneEmptySections,\n} from 'utils';\nimport CustomBreadcrumbs from '../components/CustomBreadcrumbs';\nimport { CustomDialog } from '../components/dialogs';\nimport { LoadingScreen } from '../components/LoadingScreen';\nimport {\n  AboutPatientContainer,\n  ActionBar,\n  ContactContainer,\n  Header,\n  InsuranceContainer,\n  PatientDetailsContainer,\n  PrimaryCareContainer,\n  ResponsibleInformationContainer,\n} from '../components/patient';\nimport { AddInsuranceModal } from '../components/patient/AddInsuranceModal';\nimport { INSURANCE_COVERAGE_OPTIONS, InsurancePriorityOptions } from '../constants';\nimport { structureQuestionnaireResponse } from '../helpers/qr-structure';\nimport {\n  useGetInsurancePlans,\n  useGetPatient,\n  useGetPatientAccount,\n  useGetPatientDetailsUpdateForm,\n  useRemovePatientCoverage,\n  useUpdatePatientAccount,\n} from '../hooks/useGetPatient';\nimport { createInsurancePlanDto, usePatientStore } from '../state/patient.store';\nimport { useOystehrAPIClient } from '../telemed/hooks/useOystehrAPIClient';\n\nconst getAnyAnswer = (item: QuestionnaireResponseItem): any | undefined => {\n  let index = 0;\n  let answer: any | undefined;\n  const types: ('String' | 'Boolean' | 'Reference' | 'Attachment')[] = ['String', 'Boolean', 'Reference', 'Attachment'];\n\n  do {\n    answer = extractFirstValueFromAnswer(item.answer ?? [], types[index]);\n    index++;\n  } while (answer === undefined && index < types.length);\n  return answer;\n};\n\nconst getEligibilityCheckDetailsForCoverage = (\n  coverage: Coverage,\n  coverageChecks: CoverageCheckWithDetails[]\n): CoverageCheckWithDetails | undefined => {\n  return coverageChecks.find((check) => {\n    return checkCoverageMatchesDetails(coverage, check);\n  });\n};\n\nconst makeFormDefaults = (currentItemValues: QuestionnaireResponseItem[]): any => {\n  const flattened = flattenItems(currentItemValues);\n  return flattened.reduce((acc: any, item: QuestionnaireResponseItem) => {\n    const value = getAnyAnswer(item);\n    acc[item.linkId] = value;\n    return acc;\n  }, {});\n};\n\nconst clearPCPFieldsIfInactive = (values: Record<string, any>): Record<string, any> => {\n  return Object.fromEntries(\n    Object.entries(values).map(([key, value]) => [\n      key,\n      !values['pcp-active'] && key.startsWith('pcp-') && key !== 'pcp-active' ? '' : value,\n    ])\n  );\n};\n\nconst PatientInformationPage: FC = () => {\n  const theme = useTheme();\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  const apiClient = useOystehrAPIClient();\n  const { setInsurancePlans } = usePatientStore();\n\n  // data queries\n  const { isFetching: accountFetching, data: accountData } = useGetPatientAccount({ apiClient, patientId: id ?? null });\n  const { isFetching: questionnaireFetching, data: questionnaire } = useGetPatientDetailsUpdateForm();\n  // data mutations\n  const queryClient = useQueryClient();\n  const submitQR = useUpdatePatientAccount(() => {\n    void queryClient.invalidateQueries('patient-account-get');\n  });\n  const removeCoverage = useRemovePatientCoverage();\n\n  useGetInsurancePlans((data) => {\n    const bundleEntries = data.entry;\n    if (bundleEntries) {\n      const organizations = bundleEntries\n        .filter((bundleEntry: BundleEntry) => bundleEntry.resource?.resourceType === 'Organization')\n        .map((bundleEntry: BundleEntry) => bundleEntry.resource as Organization);\n\n      const transformedInsurancePlans = organizations\n        .map((organization: Organization) => {\n          try {\n            return createInsurancePlanDto(organization);\n          } catch (err) {\n            console.error(err);\n            console.log('Could not add insurance org due to incomplete data:', JSON.stringify(organization));\n            return {} as InsurancePlanDTO;\n          }\n        })\n        .filter((insurancePlan) => insurancePlan.id !== undefined)\n        .sort((a, b) => {\n          if (a.name < b.name) return -1;\n          if (a.name > b.name) return 1;\n          return 0;\n        });\n\n      const insurancePlanMap: Record<string, InsurancePlanDTO> = {};\n\n      transformedInsurancePlans.forEach((insurancePlan) => {\n        insurancePlanMap[insurancePlan.name ?? ''] = insurancePlan;\n      });\n\n      const uniquePlans = Object.values(insurancePlanMap);\n\n      setInsurancePlans(uniquePlans);\n    }\n  });\n\n  const { patient, coverages, isFetching, defaultFormVals } = useMemo(() => {\n    const patient = accountData?.patient;\n    const coverages: { resource: Coverage; startingPriority: number }[] = [];\n    if (accountData?.coverages?.primary) {\n      coverages.push({ resource: accountData.coverages.primary, startingPriority: 1 });\n    }\n    if (accountData?.coverages?.secondary) {\n      coverages.push({ resource: accountData.coverages.secondary, startingPriority: 2 });\n    }\n    const isFetching = accountFetching || questionnaireFetching;\n    let defaultFormVals: any | undefined;\n\n    if (!isFetching && accountData && questionnaire) {\n      const prepopulatedForm = makePrepopulatedItemsFromPatientRecord({ ...accountData, questionnaire });\n      defaultFormVals = makeFormDefaults(prepopulatedForm);\n    }\n    return { patient, coverages, isFetching, defaultFormVals };\n  }, [accountData, questionnaire, questionnaireFetching, accountFetching]);\n\n  const { otherPatientsWithSameName, setOtherPatientsWithSameName } = useGetPatient(id);\n\n  const [openConfirmationDialog, setOpenConfirmationDialog] = useState(false);\n  const [openAddInsuranceModal, setOpenAddInsuranceModal] = useState(false);\n\n  const methods = useForm({\n    defaultValues: defaultFormVals,\n    values: defaultFormVals,\n    mode: 'onBlur',\n    reValidateMode: 'onChange',\n  });\n\n  const { handleSubmit, watch, formState } = methods;\n  const { dirtyFields } = formState;\n\n  useEffect(() => {\n    if (defaultFormVals && formState.isSubmitSuccessful && submitQR.isSuccess) {\n      methods.reset();\n    }\n  }, [defaultFormVals, methods, formState.isSubmitSuccessful, submitQR.isSuccess]);\n\n  const handleDiscardChanges = (): void => {\n    methods.reset();\n    setOpenConfirmationDialog(false);\n    navigate(-1);\n  };\n\n  const handleCloseConfirmationDialog = (): void => {\n    setOpenConfirmationDialog(false);\n  };\n\n  const handleBackClickWithConfirmation = (): void => {\n    if (Object.keys(dirtyFields).length > 0) {\n      setOpenConfirmationDialog(true);\n    } else {\n      navigate(-1);\n    }\n  };\n\n  const handleSaveForm = async (values: Record<string, any>): Promise<void> => {\n    if (!questionnaire || !patient?.id) {\n      enqueueSnackbar('Something went wrong. Please reload the page.', { variant: 'error' });\n      return;\n    }\n\n    const filteredValues = clearPCPFieldsIfInactive(values);\n\n    const qr = pruneEmptySections(structureQuestionnaireResponse(questionnaire, filteredValues, patient.id));\n    submitQR.mutate(qr);\n  };\n\n  const handleRemoveCoverage = (coverageId: string): void => {\n    if (patient?.id) {\n      removeCoverage.mutate(\n        {\n          patientId: patient.id,\n          coverageId,\n        },\n        {\n          onSuccess: () => {\n            enqueueSnackbar('Coverage removed from patient account', {\n              variant: 'success',\n            });\n            void queryClient.invalidateQueries('patient-account-get');\n          },\n          onError: () => {\n            enqueueSnackbar('Save operation failed. The server encountered an error while processing your request.', {\n              variant: 'error',\n            });\n          },\n        }\n      );\n    }\n  };\n\n  if ((isFetching || questionnaireFetching) && !patient) {\n    return <LoadingScreen />;\n  } else {\n    if (!patient) return null;\n  }\n\n  const currentlyAssignedPriorities = watch(InsurancePriorityOptions);\n\n  return (\n    <div>\n      {isFetching ? <LoadingScreen /> : null}\n      <FormProvider {...methods}>\n        <Box>\n          <Header handleDiscard={handleBackClickWithConfirmation} id={id} />\n          <Box sx={{ display: 'flex', flexDirection: 'column', padding: theme.spacing(3) }}>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n              <CustomBreadcrumbs\n                chain={[\n                  { link: '/patients', children: 'Patients' },\n                  {\n                    link: `/patient/${patient?.id}`,\n                    children: patient ? getFullName(patient) : '',\n                  },\n                  {\n                    link: '#',\n                    children: `Patient Information`,\n                  },\n                ]}\n              />\n              <Typography variant=\"h3\" color=\"primary.main\">\n                Patient Information\n              </Typography>\n              {otherPatientsWithSameName && (\n                <Box\n                  sx={{\n                    marginTop: 1,\n                    padding: 1,\n                    background: otherColors.dialogNote,\n                    borderRadius: '4px',\n                  }}\n                  display=\"flex\"\n                >\n                  <WarningAmberIcon sx={{ marginTop: 1, color: otherColors.warningIcon }} />\n                  <Typography\n                    variant=\"body2\"\n                    color={otherColors.closeCross}\n                    sx={{ m: 1.25, maxWidth: 850, fontWeight: 500 }}\n                  >\n                    There are other patients with this name in our database. Please confirm by the DOB that you are\n                    viewing the right patient.\n                  </Typography>\n                  <CloseIcon\n                    onClick={() => setOtherPatientsWithSameName(false)}\n                    sx={{ marginLeft: 'auto', marginRight: 0, marginTop: 1, color: otherColors.closeCross }}\n                  />\n                </Box>\n              )}\n              <Box sx={{ display: 'flex', gap: 3 }}>\n                <Box sx={{ flex: '1 1', display: 'flex', flexDirection: 'column', gap: 2 }}>\n                  <AboutPatientContainer />\n                  <ContactContainer />\n                  <PatientDetailsContainer patient={patient} />\n                  <PrimaryCareContainer />\n                </Box>\n                <Box sx={{ flex: '1 1', display: 'flex', flexDirection: 'column', gap: 2 }}>\n                  {coverages.map((coverage) => (\n                    <InsuranceContainer\n                      key={coverage.resource.id}\n                      patientId={patient.id ?? ''}\n                      ordinal={coverage.startingPriority}\n                      initialEligibilityCheck={getEligibilityCheckDetailsForCoverage(\n                        coverage.resource,\n                        accountData?.coverageChecks ?? []\n                      )}\n                      removeInProgress={removeCoverage.isLoading}\n                      handleRemoveClick={\n                        coverage.resource.id !== undefined\n                          ? () => {\n                              handleRemoveCoverage(coverage.resource.id!);\n                            }\n                          : undefined\n                      }\n                    />\n                  ))}\n                  {coverages.length < 2 && (\n                    <Button\n                      data-testid={dataTestIds.patientInformationPage.addInsuranceButton}\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      onClick={() => setOpenAddInsuranceModal(true)}\n                      sx={{\n                        borderRadius: 25,\n                        textTransform: 'none',\n                        fontWeight: 'bold',\n                        width: 'fit-content',\n                      }}\n                    >\n                      + Add Insurance\n                    </Button>\n                  )}\n                  <ResponsibleInformationContainer />\n                </Box>\n              </Box>\n            </Box>\n          </Box>\n          <ActionBar\n            handleDiscard={handleBackClickWithConfirmation}\n            handleSave={handleSubmit(handleSaveForm, () => {\n              enqueueSnackbar('Please fix all field validation errors and try again', { variant: 'error' });\n            })}\n            loading={submitQR.isLoading}\n            hidden={false}\n            submitDisabled={Object.keys(dirtyFields).length === 0}\n          />\n        </Box>\n        <CustomDialog\n          open={openConfirmationDialog}\n          handleClose={handleCloseConfirmationDialog}\n          title=\"Discard Changes?\"\n          description=\"You have unsaved changes. Are you sure you want to discard them and go back?\"\n          closeButtonText=\"Cancel\"\n          handleConfirm={handleDiscardChanges}\n          confirmText=\"Discard Changes\"\n        />\n      </FormProvider>\n      <AddInsuranceModal\n        open={openAddInsuranceModal}\n        onClose={() => setOpenAddInsuranceModal(false)}\n        questionnaire={questionnaire ?? { resourceType: 'Questionnaire', status: 'draft' }}\n        patientId={patient.id ?? ''}\n        priorityOptions={INSURANCE_COVERAGE_OPTIONS.filter(\n          (option) => !currentlyAssignedPriorities.includes(option.value)\n        )}\n      />\n    </div>\n  );\n};\n\nexport default PatientInformationPage;\n"]}