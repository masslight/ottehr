{"version":3,"file":"ClaimListCard.js","sourceRoot":"","sources":["ClaimListCard.tsx"],"names":[],"mappings":";;;AAAA,0CAAyD;AACzD,+BAAgE;AAChE,yCAAwC;AASjC,IAAM,aAAa,GAA2B,UAAC,KAAK;IACjD,IAAA,KAAK,GAAiC,KAAK,MAAtC,EAAE,KAAK,GAA0B,KAAK,MAA/B,EAAE,OAAO,GAAiB,KAAK,QAAtB,EAAE,UAAU,GAAK,KAAK,WAAV,CAAW;IAEpD,IAAM,MAAM,GAAG,IAAA,eAAO,EAAC,cAAM,OAAA,KAAK,CAAC,MAAM,EAAZ,CAAY,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IAEpD,OAAO,CACL,CAAC,qBAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,CAC9C;MAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAC5D;QAAA,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,CAC1B,CAAC,gBAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CACxB;YAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAC1F;cAAA,CAAC,qBAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,qBAAU,CACzD;cAAA,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,qBAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,EAAE,qBAAU,CAAC,CAClF;YAAA,EAAE,cAAG,CACL;YAAA,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,kBAAO,CAAC,QAAQ,EAAG,CAC5D;UAAA,EAAE,gBAAQ,CAAC,CACZ,EAR2B,CAQ3B,CAAC,CACF;QAAA,CAAC,OAAO,IAAI,CAAC,qBAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,EAAE,qBAAU,CAAC,CACrE;MAAA,EAAE,cAAG,CACP;IAAA,EAAE,qBAAS,CAAC,CACb,CAAC;AACJ,CAAC,CAAC;AArBW,QAAA,aAAa,iBAqBxB","sourcesContent":["import { Box, Divider, Typography } from '@mui/material';\nimport React, { FC, Fragment, ReactNode, useMemo } from 'react';\nimport { ClaimCard } from './ClaimCard';\n\ntype ClaimListCardProps = {\n  title: string;\n  items: { label: string; value?: string; hideValue?: boolean }[];\n  comment?: string;\n  editButton?: ReactNode;\n};\n\nexport const ClaimListCard: FC<ClaimListCardProps> = (props) => {\n  const { title, items, comment, editButton } = props;\n\n  const length = useMemo(() => items.length, [items]);\n\n  return (\n    <ClaimCard title={title} editButton={editButton}>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n        {items.map((item, index) => (\n          <Fragment key={item.label}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', gap: 2, alignItems: 'center' }}>\n              <Typography color=\"primary.dark\">{item.label}</Typography>\n              {!item.hideValue && <Typography textAlign=\"end\">{item.value || '-'}</Typography>}\n            </Box>\n            {(!!comment || length - 1 > index) && <Divider flexItem />}\n          </Fragment>\n        ))}\n        {comment && <Typography color=\"primary.dark\">{comment}</Typography>}\n      </Box>\n    </ClaimCard>\n  );\n};\n"]}