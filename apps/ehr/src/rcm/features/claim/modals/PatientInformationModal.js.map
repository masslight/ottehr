{"version":3,"file":"PatientInformationModal.js","sourceRoot":"","sources":["PatientInformationModal.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iEAAgE;AAChE,0CAA+C;AAE/C,mDAAwD;AACxD,+BAAkC;AAClC,sEAAqE;AACrE,sEAAqE;AACrE,+CAAwE;AACxE,wCAA+F;AAC/F,wCAOwB;AACxB,2CAAsG;AAEtG,IAAM,gBAAgB,GAAG,UACvB,WAAsC,EACtC,YAAwC,IACF,OAAA,CAAC;IACvC,SAAS,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,SAAS,KAAI,EAAE;IACvC,UAAU,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,UAAU,KAAI,EAAE;IACzC,QAAQ,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,KAAI,EAAE;IACrC,GAAG,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,KAAI,IAAI;IAC7B,GAAG,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,KAAI,EAAE;IAC9B,KAAK,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK,KAAI,EAAE;IAC/B,OAAO,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,WAAW,KAAI,EAAE;IACvC,IAAI,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,KAAI,EAAE;IAC7B,KAAK,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK,KAAI,EAAE;IAC/B,GAAG,EAAE,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,UAAU,KAAI,EAAE;IAClC,YAAY,EAAE,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,YAAY,KAAI,EAAE;CAC/C,CAAC,EAZsC,CAYtC,CAAC;AAEI,IAAM,uBAAuB,GAAO;IACnC,IAAA,KAAgG,IAAA,2BAAY,EAChH,qBAAa,EACb,CAAC,aAAa,EAAE,cAAc,EAAE,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,gBAAgB,EAAE,iBAAiB,CAAC,CAC1G,EAHO,WAAW,iBAAA,EAAE,YAAY,kBAAA,EAAE,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAE,UAAU,gBAAA,EAAE,cAAc,oBAAA,EAAE,eAAe,qBAGhG,CAAC;IAEF,IAAM,OAAO,GAAG,IAAA,yBAAO,EAAoC;QACzD,aAAa,EAAE,gBAAgB,CAAC,WAAW,EAAE,YAAY,CAAC;KAC3D,CAAC,CAAC;IACK,IAAA,YAAY,GAAY,OAAO,aAAnB,EAAE,KAAK,GAAK,OAAO,MAAZ,CAAa;IAExC,IAAM,WAAW,GAAG,IAAA,2CAAiC,GAAE,CAAC;IACxD,IAAM,YAAY,GAAG,IAAA,0CAAkC,GAAE,CAAC;IAE1D,IAAM,MAAM,GAAG,UAAO,MAAyC,EAAE,UAAsB;;;YACrF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,KAAK,CAAC,sBAAsB,CAAC,CAAC;YACtC,CAAC;YACD,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,MAAM,KAAK,CAAC,uBAAuB,CAAC,CAAC;YACvC,CAAC;YAEK,cAAc,GAAG,IAAA,8CAAsC,EAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YACzE,eAAe,GAAG,IAAA,+CAAuC,EAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAE5E,kBAAkB,GAAG,WAAW,CAAC,WAAW,CAAC;gBACjD,kBAAkB,EAAE,cAAc;gBAClC,mBAAmB,EAAE,OAAO;gBAC5B,cAAc,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,CAAC;aACtE,CAAC,CAAC;YACG,mBAAmB,GAAG,YAAY,CAAC,WAAW,CAAC;gBACnD,YAAY,EAAE,eAAe;gBAC7B,oBAAoB,EAAE,QAAQ;aAC/B,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;iBACnD,IAAI,CAAC;gBACJ,cAAc,CAAC,cAAc,CAAC,CAAC;gBAC/B,eAAe,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;YAC/C,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,CAAC;gBACP,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC,CAAC;iBACD,OAAO,CAAC;gBACP,UAAU,EAAE,CAAC;YACf,CAAC,CAAC,CAAC;;;SACN,CAAC;IAEF,OAAO,CACL,CAAC,8BAAY,CAAC,IAAI,OAAO,CAAC,CACxB;MAAA,CAAC,sBAAS,CACR,KAAK,CAAC,qBAAqB,CAC3B,MAAM,CAAC,CAAC,UAAC,UAAU,IAAK,OAAA,YAAY,CAAC,UAAC,MAAM,IAAK,OAAA,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,EAA1B,CAA0B,CAAC,EAAE,EAAtD,CAAsD,CAAC,CAC/E,kBAAkB,CAAC,CAAC,UAAC,UAAU,IAAK,OAAA,CAClC,CAAC,6BAAa,CACZ,OAAO,CAAC,MAAM,CACd,OAAO,CAAC,CAAC;gBACP,KAAK,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,CAAC;gBACnD,UAAU,EAAE,CAAC;YACf,CAAC,CAAC,CACF,SAAS,CAAC,CAAC,CAAC,sBAAgB,CAAC,AAAD,EAAG,CAAC,CAEhC;;UACF,EAAE,6BAAa,CAAC,CACjB,EAXmC,CAWnC,CAAC,CACF,aAAa,CAAC,CAAC,WAAW,CAAC,SAAS,IAAI,YAAY,CAAC,SAAS,CAAC,CAE/D;QAAA,CAAC,eAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CACzB;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,uBAAe,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,gBAAgB,EAChG;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,eAAe,EAC9D;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,uBAAe,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,eAAe,EAC7F;UAAA,EAAE,eAAI,CAEN;;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,iCAAoB,CACnB,IAAI,CAAC,KAAK,CACV,KAAK,CAAC,CAAC,uBAAe,CAAC,GAAG,CAAC,CAC3B,KAAK,CAAC,mBAAmB,CACzB,MAAM,CAAC,YAAY,CACnB,WAAW,CAAC,YAAY,EAE5B;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,uBAAe,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CACtF;cAAA,CAAC,qBAAa,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,CAC7B,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAC/C;kBAAA,CAAC,MAAM,CAAC,KAAK,CACf;gBAAA,EAAE,mBAAQ,CAAC,CACZ,EAJ8B,CAI9B,CAAC,CACJ;YAAA,EAAE,gCAAmB,CACvB;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAClB,IAAI,CAAC,OAAO,CACZ,KAAK,CAAC,CAAC,uBAAe,CAAC,KAAK,CAAC,CAC7B,KAAK,CAAC,WAAW,CACjB,WAAW,CAAC,gBAAgB,CAC5B,UAAU,CAAC,CAAC,EAAE,cAAc,EAAE,6BAAuB,EAAE,CAAC,EAE5D;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAClB,IAAI,CAAC,SAAS,CACd,KAAK,CAAC,CAAC,uBAAe,CAAC,OAAO,CAAC,CAC/B,KAAK,CAAC,aAAa,CACnB,WAAW,CAAC,aAAa,EAE7B;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,uBAAe,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,UAAU,EAChF;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,uBAAe,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CACtF;cAAA,CAAC,iBAAS,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CACxB,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAC7C;kBAAA,CAAC,KAAK,CAAC,KAAK,CACd;gBAAA,EAAE,mBAAQ,CAAC,CACZ,EAJyB,CAIzB,CAAC,CACJ;YAAA,EAAE,gCAAmB,CACvB;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,uBAAe,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,EAC7E;UAAA,EAAE,eAAI,CACN;UAAA,CAAC,eAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACf;YAAA,CAAC,gCAAmB,CAClB,IAAI,CAAC,cAAc,CACnB,KAAK,CAAC,CAAC,uBAAe,CAAC,YAAY,CAAC,CACpC,KAAK,CAAC,iCAAiC,CACvC,MAAM,CAEN;cAAA,CAAC,+BAAuB,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,CACrC,CAAC,mBAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAC/B;kBAAA,CAAC,IAAI,CACP;gBAAA,EAAE,mBAAQ,CAAC,CACZ,EAJsC,CAItC,CAAC,CACJ;YAAA,EAAE,gCAAmB,CACvB;UAAA,EAAE,eAAI,CACR;QAAA,EAAE,eAAI,CACR;MAAA,EAAE,sBAAS,CACb;IAAA,EAAE,8BAAY,CAAC,CAChB,CAAC;AACJ,CAAC,CAAC;AAlJW,QAAA,uBAAuB,2BAkJlC","sourcesContent":["import EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport { Grid, MenuItem } from '@mui/material';\nimport { FC } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { AllStates } from 'utils';\nimport { RoundedButton } from '../../../../components/RoundedButton';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { useEditPatientInformationMutation } from '../../../../telemed';\nimport { ClaimState, useClaimStore, useEditCoverageInformationMutation } from '../../../state';\nimport {\n  genderOptions,\n  mapFieldToRules,\n  mapPatientInformationToCoverageResource,\n  mapPatientInformationToPatientResource,\n  PatientInformationModalFormValues,\n  RELATIONSHIP_TO_INSURED,\n} from '../../../utils';\nimport { DatePickerController, EditModal, NumberMaskCustom, TextFieldController } from './components';\n\nconst getDefaultValues = (\n  patientData: ClaimState['patientData'],\n  coverageData: ClaimState['coverageData']\n): PatientInformationModalFormValues => ({\n  firstName: patientData?.firstName || '',\n  middleName: patientData?.middleName || '',\n  lastName: patientData?.lastName || '',\n  dob: patientData?.dob || null,\n  sex: patientData?.gender || '',\n  phone: patientData?.phone || '',\n  address: patientData?.addressLine || '',\n  city: patientData?.city || '',\n  state: patientData?.state || '',\n  zip: patientData?.postalCode || '',\n  relationship: coverageData?.relationship || '',\n});\n\nexport const PatientInformationModal: FC = () => {\n  const { patientData, coverageData, patient, coverage, subscriber, setPatientData, setCoverageData } = getSelectors(\n    useClaimStore,\n    ['patientData', 'coverageData', 'patient', 'coverage', 'subscriber', 'setPatientData', 'setCoverageData']\n  );\n\n  const methods = useForm<PatientInformationModalFormValues>({\n    defaultValues: getDefaultValues(patientData, coverageData),\n  });\n  const { handleSubmit, reset } = methods;\n\n  const editPatient = useEditPatientInformationMutation();\n  const editCoverage = useEditCoverageInformationMutation();\n\n  const onSave = async (values: PatientInformationModalFormValues, hideDialog: () => void): Promise<void> => {\n    if (!patient) {\n      throw Error('Patient not provided');\n    }\n    if (!coverage) {\n      throw Error('Coverage not provided');\n    }\n\n    const updatedPatient = mapPatientInformationToPatientResource(patient, values);\n    const updatedCoverage = mapPatientInformationToCoverageResource(coverage, values);\n\n    const editPatientPromise = editPatient.mutateAsync({\n      updatedPatientData: updatedPatient,\n      originalPatientData: patient,\n      fieldsToUpdate: ['name', 'address', 'birthDate', 'gender', 'telecom'],\n    });\n    const editCoveragePromise = editCoverage.mutateAsync({\n      coverageData: updatedCoverage,\n      previousCoverageData: coverage,\n    });\n\n    Promise.all([editPatientPromise, editCoveragePromise])\n      .then(() => {\n        setPatientData(updatedPatient);\n        setCoverageData(updatedCoverage, subscriber);\n      })\n      .catch((e) => {\n        console.error(e);\n      })\n      .finally(() => {\n        hideDialog();\n      });\n  };\n\n  return (\n    <FormProvider {...methods}>\n      <EditModal\n        title=\"Patient information\"\n        onSave={(hideDialog) => handleSubmit((values) => onSave(values, hideDialog))()}\n        customDialogButton={(showDialog) => (\n          <RoundedButton\n            variant=\"text\"\n            onClick={() => {\n              reset(getDefaultValues(patientData, coverageData));\n              showDialog();\n            }}\n            startIcon={<EditOutlinedIcon />}\n          >\n            Edit on the Patient Master\n          </RoundedButton>\n        )}\n        isSaveLoading={editPatient.isLoading || editCoverage.isLoading}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs={4}>\n            <TextFieldController name=\"firstName\" rules={mapFieldToRules.firstName} label=\"2.First name *\" />\n          </Grid>\n          <Grid item xs={4}>\n            <TextFieldController name=\"middleName\" label=\"2.Middle name\" />\n          </Grid>\n          <Grid item xs={4}>\n            <TextFieldController name=\"lastName\" rules={mapFieldToRules.lastName} label=\"2.Last name *\" />\n          </Grid>\n\n          <Grid item xs={4}>\n            <DatePickerController\n              name=\"dob\"\n              rules={mapFieldToRules.dob}\n              label=\"3.Date of birth *\"\n              format=\"MM.dd.yyyy\"\n              placeholder=\"MM.DD.YYYY\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextFieldController name=\"sex\" rules={mapFieldToRules.sex} label=\"3.Birth sex *\" select>\n              {genderOptions.map((option) => (\n                <MenuItem key={option.value} value={option.value}>\n                  {option.label}\n                </MenuItem>\n              ))}\n            </TextFieldController>\n          </Grid>\n          <Grid item xs={4}>\n            <TextFieldController\n              name=\"phone\"\n              rules={mapFieldToRules.phone}\n              label=\"5.Phone *\"\n              placeholder=\"(XXX) XXX-XXXX\"\n              InputProps={{ inputComponent: NumberMaskCustom as any }}\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextFieldController\n              name=\"address\"\n              rules={mapFieldToRules.address}\n              label=\"5.Address *\"\n              placeholder=\"No., Street\"\n            />\n          </Grid>\n          <Grid item xs={4}>\n            <TextFieldController name=\"city\" rules={mapFieldToRules.city} label=\"5.City *\" />\n          </Grid>\n          <Grid item xs={2}>\n            <TextFieldController name=\"state\" rules={mapFieldToRules.state} label=\"5.State *\" select>\n              {AllStates.map((state) => (\n                <MenuItem key={state.value} value={state.value}>\n                  {state.label}\n                </MenuItem>\n              ))}\n            </TextFieldController>\n          </Grid>\n          <Grid item xs={2}>\n            <TextFieldController name=\"zip\" rules={mapFieldToRules.zip} label=\"5.ZIP *\" />\n          </Grid>\n          <Grid item xs={4}>\n            <TextFieldController\n              name=\"relationship\"\n              rules={mapFieldToRules.relationship}\n              label=\"6.Patient relation to insured *\"\n              select\n            >\n              {RELATIONSHIP_TO_INSURED.map((item) => (\n                <MenuItem key={item} value={item}>\n                  {item}\n                </MenuItem>\n              ))}\n            </TextFieldController>\n          </Grid>\n        </Grid>\n      </EditModal>\n    </FormProvider>\n  );\n};\n"]}