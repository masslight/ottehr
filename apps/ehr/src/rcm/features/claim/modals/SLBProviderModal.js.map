{"version":3,"file":"SLBProviderModal.js","sourceRoot":"","sources":["SLBProviderModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Grid, TextField } from '@mui/material';\nimport { Location } from 'fhir/r4b';\nimport React, { FC, useMemo } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { FHIR_EXTENSION } from 'utils';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { ClaimState, useClaimStore, useEditClaimInformationMutation } from '../../../state';\nimport { mapSLBProviderToClaimResource, SLBProviderFormValues } from '../../../utils';\nimport { EditModal, VirtualizedAutocompleteController } from './components';\n\nconst getDefaultValues = (\n  claimData: ClaimState['claimData'],\n  facilities: ClaimState['facilities']\n): SLBProviderFormValues => ({\n  location: facilities?.find((facility) => facility.id === claimData?.facilityId),\n});\n\nexport const SLBProviderModal: FC = () => {\n  const { organizations, facilities, claimData, coverageData, claim, setClaimData } = getSelectors(useClaimStore, [\n    'organizations',\n    'facilities',\n    'claimData',\n    'coverageData',\n    'claim',\n    'setClaimData',\n  ]);\n\n  const editClaim = useEditClaimInformationMutation();\n\n  const methods = useForm<SLBProviderFormValues>({\n    defaultValues: getDefaultValues(claimData, facilities),\n  });\n  const { handleSubmit, watch, reset } = methods;\n\n  // TS2589: Type instantiation is excessively deep and possibly infinite.\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const currentFacility = watch('location') as Location | undefined;\n  const organization = useMemo(\n    () =>\n      organizations?.find(\n        (organization) => organization.id === currentFacility?.managingOrganization?.reference?.split('/')?.[1]\n      ),\n    [currentFacility?.managingOrganization?.reference, organizations]\n  );\n\n  const options = useMemo(\n    () =>\n      (facilities || []).filter(\n        (facility) =>\n          !!facility.extension?.find(\n            (extension) =>\n              extension.url === FHIR_EXTENSION.Location.locationFormPreRelease.url &&\n              extension.valueCoding?.code === 'vi'\n          ) && facility.managingOrganization\n      ),\n    [facilities]\n  );\n\n  const onSave = (values: SLBProviderFormValues, hideDialog: () => void): void => {\n    if (!claim) {\n      throw Error('Claim not provided');\n    }\n\n    const updatedClaim = mapSLBProviderToClaimResource(claim, values);\n\n    const editClaimPromise = editClaim.mutateAsync({\n      claimData: updatedClaim,\n      previousClaimData: claim,\n      fieldsToUpdate: ['facility', 'provider'],\n    });\n\n    Promise.resolve(editClaimPromise)\n      .then((responseClaim) => {\n        setClaimData(responseClaim);\n      })\n      .catch((e) => {\n        console.error(e);\n      })\n      .finally(() => {\n        hideDialog();\n      });\n  };\n\n  return (\n    <FormProvider {...methods}>\n      <EditModal\n        title=\"Additional Insurance\"\n        onSave={(hideDialog) => handleSubmit((values) => onSave(values, hideDialog))()}\n        onShow={() => reset(getDefaultValues(claimData, facilities))}\n        isSaveLoading={editClaim.isLoading}\n      >\n        <Grid container spacing={2}>\n          <Grid item xs={6}>\n            <TextField\n              label=\"31.Signature of Physician or Supplier\"\n              fullWidth\n              size=\"small\"\n              disabled\n              value={\n                organizations?.find((organization) => organization.id === coverageData?.organizationId)?.name || ''\n              }\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <VirtualizedAutocompleteController\n              name=\"location\"\n              label=\"32.Service Facility Location\"\n              rules={{ required: true }}\n              options={options}\n              renderRow={(facility) => facility.name || ''}\n            />\n          </Grid>\n\n          <Grid item xs={6}>\n            <TextField label=\"33.Billing Provider\" fullWidth size=\"small\" disabled value={organization?.name || ''} />\n          </Grid>\n        </Grid>\n      </EditModal>\n    </FormProvider>\n  );\n};\n"]}