{"version":3,"file":"TextFieldController.js","sourceRoot":"","sources":["TextFieldController.tsx"],"names":[],"mappings":";;;AAAA,0CAA0D;AAC1D,+BAAkC;AAClC,mDAA8E;AAQvE,IAAM,mBAAmB,GAAiC,UAAC,KAAK;IAC7D,IAAA,IAAI,GAAwF,KAAK,KAA7F,EAAE,KAAK,GAAiF,KAAK,MAAtF,EAAE,KAAK,GAA0E,KAAK,MAA/E,EAAE,WAAW,GAA6D,KAAK,YAAlE,EAAE,UAAU,GAAiD,KAAK,WAAtD,EAAE,QAAQ,GAAuC,KAAK,SAA5C,EAAE,MAAM,GAA+B,KAAK,OAApC,EAAE,SAAS,GAAoB,KAAK,UAAzB,EAAE,OAAO,GAAW,KAAK,QAAhB,EAAE,IAAI,GAAK,KAAK,KAAV,CAAW;IAElG,IAAA,OAAO,GAAK,IAAA,gCAAc,GAAE,QAArB,CAAsB;IAErC,OAAO,CACL,CAAC,4BAAU,CACT,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,MAAM,CAAC,CAAC,UAAC,EAAqD;gBAAnD,aAA0B,EAAjB,QAAQ,cAAA,EAAE,KAAK,WAAA,EAAkB,KAAK,sBAAA;YAAS,OAAA,CACjE,CAAC,oBAAS,CACR,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CACzC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CACf,IAAI,CAAC,OAAO,CACZ,SAAS,CACT,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,WAAW,CAAC,CAAC,WAAW,CAAC,CACzB,UAAU,CAAC,CAAC,UAAU,CAAC,CACvB,MAAM,CAAC,CAAC,MAAM,CAAC,CACf,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,IAAI,CAAC,CAAC,IAAI,CAAC,CAEX;UAAA,CAAC,QAAQ,CACX;QAAA,EAAE,oBAAS,CAAC,CACb;QAlBkE,CAkBlE,CAAC,EACF,CACH,CAAC;AACJ,CAAC,CAAC;AA/BW,QAAA,mBAAmB,uBA+B9B","sourcesContent":["import { TextField, TextFieldProps } from '@mui/material';\nimport React, { FC } from 'react';\nimport { Controller, ControllerProps, useFormContext } from 'react-hook-form';\n\ntype TextFieldControllerProps = Pick<ControllerProps, 'name' | 'rules'> &\n  Pick<\n    TextFieldProps,\n    'label' | 'placeholder' | 'InputProps' | 'children' | 'select' | 'multiline' | 'variant' | 'type'\n  >;\n\nexport const TextFieldController: FC<TextFieldControllerProps> = (props) => {\n  const { name, rules, label, placeholder, InputProps, children, select, multiline, variant, type } = props;\n\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={rules}\n      render={({ field: { onChange, value }, fieldState: { error } }) => (\n        <TextField\n          value={value}\n          onChange={onChange}\n          helperText={error ? error.message : null}\n          error={!!error}\n          size=\"small\"\n          fullWidth\n          label={label}\n          placeholder={placeholder}\n          InputProps={InputProps}\n          select={select}\n          multiline={multiline}\n          variant={variant}\n          type={type}\n        >\n          {children}\n        </TextField>\n      )}\n    />\n  );\n};\n"]}