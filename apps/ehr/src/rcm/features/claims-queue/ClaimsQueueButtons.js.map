{"version":3,"file":"ClaimsQueueButtons.js","sourceRoot":"","sources":["ClaimsQueueButtons.tsx"],"names":[],"mappings":"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","sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport { Box, Dialog, DialogActions, DialogTitle, Typography } from '@mui/material';\nimport { Claim } from 'fhir/r4b';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { RoundedButton } from '../../../components/RoundedButton';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useClaimsQueueStore, useEditClaimInformationMutation } from '../../state';\nimport { VirtualizedAutocomplete } from '../claim/modals/components';\n\nexport const ClaimsQueueButtons: FC = () => {\n  const { selectedRows, employees, items } = getSelectors(useClaimsQueueStore, ['selectedRows', 'employees', 'items']);\n  const [currentTeamMember, setCurrentTeamMember] = useState<string>();\n  const editClaim = useEditClaimInformationMutation();\n  const queryClient = useQueryClient();\n\n  // const [anchorExportEl, setAnchorExportEl] = useState<null | HTMLElement>(null);\n  // const exportOpen = Boolean(anchorExportEl);\n\n  const [openAssign, setOpenAssign] = useState(false);\n\n  // const handleClickExport = (event: MouseEvent<HTMLButtonElement>): void => {\n  //   setAnchorExportEl(event.currentTarget);\n  // };\n  // const handleCloseExport = (): void => {\n  //   setAnchorExportEl(null);\n  // };\n\n  const handleClickOpenAssign = (): void => {\n    setCurrentTeamMember(undefined);\n    setOpenAssign(true);\n  };\n\n  const handleCloseAssign = (): void => {\n    setOpenAssign(false);\n  };\n\n  const currentTeamMemberObject = useMemo(\n    () => employees.find((employee) => employee.id === currentTeamMember),\n    [employees, currentTeamMember]\n  );\n\n  const handleAssign = (): void => {\n    if (!currentTeamMemberObject) {\n      return;\n    }\n    const claims = selectedRows\n      .map((row) => items.find((item) => item.claim.id === row)?.claim)\n      .filter((c) => c) as Claim[];\n\n    const promises = claims.map((claim) =>\n      editClaim.mutateAsync({\n        claimData: { ...claim, enterer: { reference: currentTeamMemberObject.profile } },\n        previousClaimData: claim,\n        fieldsToUpdate: ['enterer'],\n      })\n    );\n\n    void Promise.all(promises).then(() => {\n      void queryClient.invalidateQueries({ queryKey: ['rcm-claims-queue'] });\n      handleCloseAssign();\n    });\n  };\n\n  return (\n    <Box sx={{ display: 'flex', gap: 1, justifyContent: 'flex-end' }}>\n      <RoundedButton disabled={selectedRows.length === 0} variant=\"contained\" onClick={handleClickOpenAssign}>\n        Assign to a team member\n      </RoundedButton>\n\n      {/*<RoundedButton disabled={selectedRows.length === 0} startIcon={<OpenInNewIcon />} onClick={handleClickExport}>*/}\n      {/*  Export*/}\n      {/*</RoundedButton>*/}\n\n      {/*<Menu*/}\n      {/*  open={exportOpen}*/}\n      {/*  anchorEl={anchorExportEl}*/}\n      {/*  onClose={handleCloseExport}*/}\n      {/*  MenuListProps={{*/}\n      {/*    'aria-labelledby': 'basic-button',*/}\n      {/*  }}*/}\n      {/*>*/}\n      {/*  <MenuItem onClick={handleCloseExport}>Export to CSV</MenuItem>*/}\n      {/*  <MenuItem onClick={handleCloseExport}>Export to XLS</MenuItem>*/}\n      {/*</Menu>*/}\n\n      <Dialog open={openAssign} onClose={handleCloseAssign} maxWidth=\"xs\" fullWidth>\n        <DialogTitle component={Typography} variant=\"h5\" color=\"primary.dark\" sx={{ pb: 2 }}>\n          Select team member\n        </DialogTitle>\n\n        <Box sx={{ px: 3 }}>\n          <VirtualizedAutocomplete\n            value={currentTeamMemberObject}\n            onChange={(employee) => setCurrentTeamMember(employee?.id)}\n            options={employees}\n            label=\"Team member\"\n            renderRow={(employee) => {\n              if (employee.firstName && employee.lastName) return [employee.lastName, employee.firstName].join(', ');\n              else if (employee.name) return employee.name;\n              else return '-';\n            }}\n          />\n        </Box>\n\n        <DialogActions sx={{ display: 'flex', justifyContent: 'start', gap: 2, p: 3, pt: 2 }}>\n          <LoadingButton\n            sx={{\n              fontWeight: 500,\n              borderRadius: '100px',\n              mr: '8px',\n              textTransform: 'none',\n            }}\n            loading={editClaim.isLoading}\n            onClick={handleAssign}\n            disabled={!currentTeamMember}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Assign member\n          </LoadingButton>\n          <RoundedButton onClick={handleCloseAssign} color=\"primary\">\n            Cancel\n          </RoundedButton>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n"]}