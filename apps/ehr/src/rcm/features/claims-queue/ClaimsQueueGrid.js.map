{"version":3,"file":"ClaimsQueueGrid.js","sourceRoot":"","sources":["ClaimsQueueGrid.tsx"],"names":[],"mappings":";;;AAAA,wDAAmD;AAGnD,mEAAkE;AAClE,qCAAkD;AAClD,qCAAgE;AAChE,qCAA4E;AAMrE,IAAM,eAAe,GAA6B,UAAC,KAAK;IACrD,IAAA,IAAI,GAAK,KAAK,KAAV,CAAW;IAEvB,IAAM,SAAS,GAAG,IAAA,2BAAmB,GAAE,CAAC;IAClC,IAAA,KAA6B,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,EAA1F,QAAQ,cAAA,EAAE,YAAY,kBAAoE,CAAC;IAC7F,IAAA,KAAuB,IAAA,oBAAY,EAAC;QACxC,SAAS,WAAA;QACT,SAAS,EAAE,UAAC,IAAI;YACd,2BAAmB,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QACtD,CAAC;KACF,CAAC,EALM,IAAI,UAAA,EAAE,UAAU,gBAKtB,CAAC;IAEH,OAAO,CACL,CAAC,6BAAW,CACV,iBAAiB,CACjB,0BAA0B,CAC1B,cAAc,CAAC,QAAQ,CACvB,OAAO,CAAC,CAAC,UAAU,CAAC,CACpB,UAAU,CACV,iBAAiB,CACjB,QAAQ,CAAC,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,KAAI,CAAC,CAAC,CAAC,CAC5B,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CACrC,eAAe,CAAC,CAAC;YACf,QAAQ,EAAE,QAAQ,IAAI,EAAE;YACxB,IAAI,EAAE,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,KAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAC;SAC7C,CAAC,CACF,uBAAuB,CAAC,CAAC,UAAC,EAAkB;gBAAhB,IAAI,UAAA,EAAE,QAAQ,cAAA;YACxC,OAAA,2BAAmB,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,IAAI,GAAG,QAAQ,EAAE,QAAQ,UAAA,EAAE,CAAC;QAAnE,CACF,CAAC,CACD,iBAAiB,CAAC,CAAC,YAAY,CAAC,CAChC,yBAAyB,CAAC,CAAC,UAAC,YAAY;YACtC,OAAA,2BAAmB,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,YAAwB,EAAE,CAAC;QAAxE,CACF,CAAC,CACD,UAAU,CACV,OAAO,CAAC,CAAC,iCAAyB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,0BAAkB,CAAC,MAAM,CAAC,EAA1B,CAA0B,CAAC,CAAC,CACrF,IAAI,CAAC,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,KAAI,EAAE,CAAC,EACxB,CACH,CAAC;AACJ,CAAC,CAAC;AAtCW,QAAA,eAAe,mBAsC1B","sourcesContent":["import { DataGridPro } from '@mui/x-data-grid-pro';\nimport { FC } from 'react';\nimport { ClaimsQueueType } from 'utils';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useOystehrAPIClient } from '../../hooks';\nimport { useClaimsQueueStore, useGetClaims } from '../../state';\nimport { ClaimsQueueColumns, mapClaimTypeToColumnNames } from '../../utils';\n\ntype ClaimsQueueGridProps = {\n  type: ClaimsQueueType;\n};\n\nexport const ClaimsQueueGrid: FC<ClaimsQueueGridProps> = (props) => {\n  const { type } = props;\n\n  const apiClient = useOystehrAPIClient();\n  const { pageSize, selectedRows } = getSelectors(useClaimsQueueStore, ['pageSize', 'selectedRows']);\n  const { data, isFetching } = useGetClaims({\n    apiClient,\n    onSuccess: (data) => {\n      useClaimsQueueStore.setState({ items: data.items });\n    },\n  });\n\n  return (\n    <DataGridPro\n      checkboxSelection\n      disableRowSelectionOnClick\n      paginationMode=\"server\"\n      loading={isFetching}\n      pagination\n      disableColumnMenu\n      rowCount={data?.count || -1}\n      pageSizeOptions={[5, 10, 15, 25, 50]}\n      paginationModel={{\n        pageSize: pageSize || 25,\n        page: (data?.offset || 0) / (pageSize || 25),\n      }}\n      onPaginationModelChange={({ page, pageSize }) =>\n        useClaimsQueueStore.setState({ offset: page * pageSize, pageSize })\n      }\n      rowSelectionModel={selectedRows}\n      onRowSelectionModelChange={(selectedRows) =>\n        useClaimsQueueStore.setState({ selectedRows: selectedRows as string[] })\n      }\n      autoHeight\n      columns={mapClaimTypeToColumnNames[type].map((column) => ClaimsQueueColumns[column])}\n      rows={data?.items || []}\n    />\n  );\n};\n"]}