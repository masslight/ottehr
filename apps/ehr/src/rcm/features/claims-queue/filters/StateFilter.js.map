{"version":3,"file":"StateFilter.js","sourceRoot":"","sources":["StateFilter.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAwD;AACxD,+BAAkC;AAElC,+BAAgG;AAOhG,IAAM,WAAW,GAAG,EAAE,KAAK,EAAE,YAAY,EAAE,KAAK,EAAE,EAAE,EAAW,CAAC;AAChE,IAAM,YAAY,kBAAwB,WAAW,CAAC,KAAK,GAAK,uBAAe,OAAC,CAAC;AACjF,IAAM,kBAAkB,yBAEf,uCAA+B,gBAAG,WAAW,CAAC,KAAK,IAAG,WAAW,CAAC,KAAK,MAAE,CAAC;AAE5E,IAAM,WAAW,GAAyB,UAAC,KAAK;IAC7C,IAAA,KAAK,GAAe,KAAK,MAApB,EAAE,QAAQ,GAAK,KAAK,SAAV,CAAW;IAElC,OAAO,CACL,CAAC,uBAAY,CACX,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,IAAI,CAAC,OAAO,CACZ,gBAAgB,CAChB,QAAQ,CAAC,CAAC,UAAC,CAAC,EAAE,KAAK,IAAK,OAAA,QAAQ,CAAC,KAAK,IAAI,SAAS,CAAC,EAA5B,CAA4B,CAAC,CACrD,cAAc,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,kBAAkB,CAAC,MAAM,CAAC,IAAI,SAAS,EAAvC,CAAuC,CAAC,CACpE,OAAO,CAAC,CAAC,YAAY,CAAC,CACtB,YAAY,CAAC,CAAC,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,CAC/B,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CACzB;UAAA,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,SAAS,CAC1C;QAAA,EAAE,EAAE,CAAC,CACN,EAJgC,CAIhC,CAAC,CACF,SAAS,CACT,WAAW,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC,oBAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,OAAO,EAAG,EAApD,CAAoD,CAAC,EAC9E,CACH,CAAC;AACJ,CAAC,CAAC;AApBW,QAAA,WAAW,eAoBtB","sourcesContent":["import { Autocomplete, TextField } from '@mui/material';\nimport React, { FC } from 'react';\nimport type { StateType } from 'utils';\nimport { AllStatesToVirtualLocationsData, AllStatesValues, ClaimsQueueGetRequest } from 'utils';\n\ntype StateFilterProps = {\n  value: ClaimsQueueGetRequest['state'];\n  onChange: (state: ClaimsQueueGetRequest['state']) => void;\n};\n\nconst EMPTY_STATE = { label: 'All states', value: '' } as const;\nconst stateOptions: (StateType | '')[] = [EMPTY_STATE.value, ...AllStatesValues];\nconst stateOptionToLabel: {\n  [value in StateType | '']: string;\n} = { ...AllStatesToVirtualLocationsData, [EMPTY_STATE.value]: EMPTY_STATE.label };\n\nexport const StateFilter: FC<StateFilterProps> = (props) => {\n  const { value, onChange } = props;\n\n  return (\n    <Autocomplete\n      value={value}\n      size=\"small\"\n      disableClearable\n      onChange={(_, value) => onChange(value || undefined)}\n      getOptionLabel={(option) => stateOptionToLabel[option] || 'Unknown'}\n      options={stateOptions}\n      renderOption={(props, option) => (\n        <li {...props} key={option}>\n          {stateOptionToLabel[option] || 'Unknown'}\n        </li>\n      )}\n      fullWidth\n      renderInput={(params) => <TextField name=\"state\" {...params} label=\"State\" />}\n    />\n  );\n};\n"]}