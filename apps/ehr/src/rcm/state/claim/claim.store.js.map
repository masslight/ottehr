{"version":3,"file":"claim.store.js","sourceRoot":"","sources":["claim.store.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Appointment,\n  Bundle,\n  Claim,\n  Coverage,\n  DocumentReference,\n  Encounter,\n  FhirResource,\n  InsurancePlan,\n  Location,\n  Organization,\n  Patient,\n  RelatedPerson,\n} from 'fhir/r4b';\nimport { create } from 'zustand';\nimport {\n  findResourceByType,\n  findResourceByTypeAndId,\n  getClaimData,\n  getCoverageData,\n  getPatientData,\n  PlanOwnedBy,\n} from '../../utils';\n\nexport type ClaimState = {\n  claim?: Claim;\n  claimData?: ReturnType<typeof getClaimData>;\n  patient?: Patient;\n  patientData?: ReturnType<typeof getPatientData>;\n  appointment?: Appointment;\n  coverage?: Coverage;\n  coverageData?: ReturnType<typeof getCoverageData>;\n  additionalCoverage?: Coverage;\n  additionalCoverageData?: ReturnType<typeof getCoverageData>;\n  encounter?: Encounter;\n  subscriber?: RelatedPerson;\n  additionalSubscriber?: RelatedPerson;\n  insurancePlans?: InsurancePlan[];\n  organizations?: Organization[];\n  plansOwnedBy?: PlanOwnedBy[];\n  facilities?: Location[];\n  visitNoteDocument?: DocumentReference;\n};\n\ntype ClaimStoreActions = {\n  setResources: (data: Bundle[]) => void;\n  setPatientData: (patient?: Patient) => void;\n  setCoverageData: (coverage?: Coverage, subscriber?: RelatedPerson) => void;\n  setAdditionalCoverageData: (coverage?: Coverage, subscriber?: RelatedPerson) => void;\n  setClaimData: (claim?: Claim) => void;\n  setPlansOwnedBy: (insurancePlans: InsurancePlan[], organizations: Organization[]) => void;\n};\n\nconst CLAIM_INITIAL: ClaimState = {};\n\nexport const useClaimStore = create<ClaimState & ClaimStoreActions>()((set, get) => ({\n  ...CLAIM_INITIAL,\n  setResources: (data) => {\n    const claim = findResourceByType<Claim>(data, 'Claim');\n    const encounter = findResourceByType<Encounter>(data, 'Encounter');\n    const appointment = findResourceByType<Appointment>(data, 'Appointment');\n\n    const patientReference = claim?.patient?.reference;\n    const patient = findResourceByTypeAndId<Patient>(data, 'Patient', patientReference?.split('/')[1]);\n\n    const coverageReference = claim?.insurance?.[0]?.coverage?.reference;\n    const coverage = findResourceByTypeAndId<Coverage>(data, 'Coverage', coverageReference?.split('/')[1]);\n\n    const subscriberReference = coverage?.subscriber?.reference;\n    const subscriber = findResourceByTypeAndId<RelatedPerson>(\n      data,\n      subscriberReference?.split('/')[0],\n      subscriberReference?.split('/')[1]\n    );\n\n    const additionalCoverageReference = claim?.insurance?.[1]?.coverage?.reference;\n    const additionalCoverage = findResourceByTypeAndId<Coverage>(\n      data,\n      'Coverage',\n      additionalCoverageReference?.split('/')[1]\n    );\n\n    const additionalSubscriberReference = additionalCoverage?.subscriber?.reference;\n    const additionalSubscriber = findResourceByTypeAndId<RelatedPerson>(\n      data,\n      additionalSubscriberReference?.split('/')[0],\n      additionalSubscriberReference?.split('/')[1]\n    );\n\n    const visitNoteDocument = data.find(\n      (resource: FhirResource) =>\n        resource.resourceType === 'DocumentReference' &&\n        resource.type?.coding?.find((coding) => coding.code === '75498-6')\n    ) as unknown as DocumentReference | undefined;\n\n    const { setPatientData, setCoverageData, setAdditionalCoverageData, setClaimData } = get();\n\n    setPatientData(patient);\n    setCoverageData(coverage, subscriber);\n    setAdditionalCoverageData(additionalCoverage, additionalSubscriber);\n    setClaimData(claim);\n\n    set({ encounter, appointment, visitNoteDocument });\n  },\n  setPatientData: (patient) => {\n    const patientData = getPatientData(patient);\n\n    set({ patient, patientData });\n  },\n  setCoverageData: (coverage, subscriber) => {\n    const coverageData = getCoverageData(coverage, subscriber);\n\n    set({ coverage, coverageData, subscriber });\n  },\n  setAdditionalCoverageData: (additionalCoverage, additionalSubscriber) => {\n    const additionalCoverageData = getCoverageData(additionalCoverage, additionalSubscriber);\n\n    set({ additionalCoverage, additionalCoverageData, additionalSubscriber });\n  },\n  setClaimData: (claim) => {\n    const claimData = getClaimData(claim);\n\n    set({ claim, claimData });\n  },\n  setPlansOwnedBy: (insurancePlans, organizations) => {\n    const plansOwnedBy = insurancePlans?.map((plan) => ({\n      ...plan,\n      ownedBy: organizations.find((organization) => organization.id === plan.ownedBy?.reference?.split('/')[1]),\n    }));\n\n    set({ insurancePlans, organizations, plansOwnedBy });\n  },\n}));\n"]}