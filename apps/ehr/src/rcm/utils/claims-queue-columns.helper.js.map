{"version":3,"file":"claims-queue-columns.helper.js","sourceRoot":"","sources":["claims-queue-columns.helper.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Link, Tooltip, Typography } from '@mui/material';\nimport { GridColDef } from '@mui/x-data-grid-pro';\nimport { DateTime } from 'luxon';\nimport { useMemo } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { ClaimsQueueItem, ClaimsQueueItemStatus, ClaimsQueueType } from 'utils';\nimport { getSelectors } from '../../shared/store/getSelectors';\nimport { getPatientName } from '../../telemed/utils';\nimport { ClaimStatusChip, EligibilityStatusChip } from '../features';\nimport { useClaimsQueueStore } from '../state';\nimport { getDateFromFormat } from './resources.helper';\n\nexport const ClaimsQueueColumns: Record<string, GridColDef<ClaimsQueueItem, any, any>> = {\n  queue: {\n    sortable: false,\n    field: 'id',\n    headerName: 'Queue',\n    width: 60,\n    renderCell: (params) => (params.row.appointment.appointmentType?.text === 'virtual' ? 'TM' : 'IP'),\n  },\n  cid: {\n    sortable: false,\n    field: 'cid',\n    headerName: 'Claim ID',\n    width: 100,\n    renderCell: (params) => (\n      <Box>\n        <Tooltip title={params.row.claim.id}>\n          <Link component={RouterLink} to={`/rcm/claims/${params.row.claim.id}`} target=\"_blank\">\n            {params.row.claim.id}\n          </Link>\n        </Tooltip>\n        <Typography fontSize={12} color=\"text.secondary\">\n          {calculateTimeSince(params.row.claim.created)}\n        </Typography>\n      </Box>\n    ),\n  },\n  vid: {\n    sortable: false,\n    field: 'vid',\n    headerName: 'Visit ID',\n    width: 120,\n    renderCell: (params) => {\n      // const {} = params.row;\n      //\n      // const statuses = useMemo(\n      //   () =>\n      //     encounter.statusHistory && appointment?.status\n      //       ? mapEncounterStatusHistory(encounter.statusHistory, appointment.status)\n      //       : undefined,\n      //   [encounter.statusHistory, appointment?.status]\n      // );\n      // const dateOfService = formatDateTimeToEDT(statuses?.find((item) => item.status === 'on-video')?.start);\n\n      return (\n        <Box>\n          <Tooltip title={params.row.appointment.id}>\n            <Link\n              component={RouterLink}\n              to={`${\n                params.row.appointment.appointmentType?.text === 'virtual' ? '/telemed/appointments/' : '/visit/'\n              }${params.row.appointment.id}`}\n              target=\"_blank\"\n            >\n              {params.row.appointment.id}\n            </Link>\n          </Tooltip>\n          <Typography fontSize={12} color=\"text.secondary\">\n            DOS: {DateTime.fromISO(params.row.claim?.item?.[0]?.servicedPeriod?.end || '').toFormat('MM/dd/yyyy')}\n          </Typography>\n        </Box>\n      );\n    },\n  },\n  patient: {\n    sortable: false,\n    field: 'patient',\n    headerName: 'Patient',\n    renderCell: (params) => (\n      <Box>\n        <Tooltip title={params.row.patient.id}>\n          <Link component={RouterLink} to={`/patient/${params.row.patient.id}`} target=\"_blank\">\n            {getPatientName(params.row.patient.name).firstLastName}\n          </Link>\n        </Tooltip>\n        <Typography fontSize={12} color=\"text.secondary\">\n          DOB: {getDateFromFormat(params.row.patient.birthDate)?.toFormat('MM/dd/yyyy')}\n        </Typography>\n      </Box>\n    ),\n  },\n  member: {\n    sortable: false,\n    field: 'member',\n    headerName: 'Team member',\n    width: 120,\n    renderCell: (params) => {\n      const assigned = params.row.claim.enterer?.reference;\n      const { employees } = getSelectors(useClaimsQueueStore, ['employees']);\n\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const employee = useMemo(\n        () => employees.find((employee) => employee.profile === assigned),\n        [assigned, employees]\n      );\n\n      if (!assigned || !employee) {\n        return (\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Not assigned\n          </Typography>\n        );\n      } else {\n        return (\n          <Typography variant=\"body2\">\n            {employee.firstName && employee.lastName\n              ? [employee.lastName, employee.firstName].join(', ')\n              : employee.name\n              ? employee.name\n              : '-'}\n          </Typography>\n        );\n      }\n    },\n  },\n  state: {\n    sortable: false,\n    field: 'state',\n    headerName: 'Visit state',\n    width: 90,\n    renderCell: (params) => params.row.location.address?.state,\n  },\n  insurance: {\n    sortable: false,\n    field: 'insurance',\n    headerName: 'Insurance',\n    renderCell: (params) => <Typography variant=\"body2\">{params.row.insurancePlan?.name}</Typography>,\n  },\n  tos: {\n    sortable: false,\n    field: 'tos',\n    headerName: 'TOS $',\n    width: 110,\n    renderCell: () => <Typography variant=\"body2\"></Typography>,\n  },\n  eligibility: {\n    sortable: false,\n    field: 'eligibility',\n    headerName: 'Initial Eligibility',\n    width: 130,\n    renderCell: (params) => (\n      <EligibilityStatusChip\n        appointment={params.row.appointment}\n        eligibilityResponse={params.row.eligibilityResponse}\n      />\n    ),\n  },\n  payment: { sortable: false, field: 'payment', headerName: 'TOS Payment', width: 130 },\n  status: {\n    sortable: false,\n    field: 'status',\n    // cSpell:disable-next Registr.(ation)\n    headerName: 'Registr. Status',\n    width: 130,\n    renderCell: (params) => <ClaimStatusChip status={params.row.status} />,\n  },\n};\n\nexport const mapClaimTypeToColumnNames: { [field in ClaimsQueueType]: string[] } = {\n  registration: [\n    'queue',\n    'cid',\n    'vid',\n    'patient',\n    'member',\n    'state',\n    'insurance',\n    'tos',\n    'eligibility',\n    'payment',\n    'status',\n  ],\n  coding: [],\n  billing: [],\n  'credentialing-hold': [],\n  credits: [],\n};\n\nexport const claimStatusOptions: { [value in ClaimsQueueItemStatus]: string } = {\n  open: 'Open',\n  locked: 'Locked',\n  'returned-billing': 'Returned (billing)',\n  'returned-coding': 'Returned (coding)',\n  sent: 'Sent',\n  'partly-paid': 'Partly paid',\n  denied: 'Denied',\n  'returned-credentialing-hold': 'Returned (cred.hold)',\n  'credential-hold': 'Credential Hold',\n};\n\nconst calculateTimeSince = (targetDate: string): string => {\n  const now = DateTime.now();\n  const target = DateTime.fromISO(targetDate);\n\n  const diff = now.diff(target, ['years', 'months', 'days', 'hours', 'minutes', 'seconds']).toObject();\n\n  let differenceString = '';\n\n  if (diff.years) {\n    differenceString = `${diff.years} years ago`;\n  } else if (diff.months) {\n    differenceString = `${diff.months} months ago`;\n  } else if (diff.days) {\n    differenceString = `${diff.days} days ago`;\n  } else if (diff.hours) {\n    differenceString = `${diff.hours} hours ago`;\n  } else if (diff.minutes) {\n    differenceString = `${diff.minutes} minutes ago`;\n  } else {\n    differenceString = 'just now';\n  }\n\n  return differenceString;\n};\n"]}