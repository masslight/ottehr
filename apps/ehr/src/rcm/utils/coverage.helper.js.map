{"version":3,"file":"coverage.helper.js","sourceRoot":"","sources":["coverage.helper.ts"],"names":[],"mappings":"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","sourcesContent":["import { Coding, Coverage, CoverageClass, RelatedPerson } from 'fhir/r4b';\nimport { FHIR_EXTENSION } from 'utils';\nimport {\n  AdditionalInsuranceFormValues,\n  InsuredInformationModalFormValues,\n  PatientInformationModalFormValues,\n  PlanOwnedBy,\n} from './form-values.types';\nimport { getPatientData } from './patient.helper';\nimport { mapPersonInformationToResource, mapPersonNameToResource } from './resources.helper';\n\nexport const getCoverageData = (\n  coverage?: Coverage,\n  subscriber?: RelatedPerson\n): ReturnType<typeof getPatientData> & {\n  relationship?: string;\n  subscriberId?: string;\n  policyGroup?: string;\n  planName?: string;\n  organizationId?: string;\n} => {\n  const relationship = coverage?.relationship?.coding?.find(\n    (item) => item.system === FHIR_EXTENSION.Coverage.subscriberRelationship.url\n  )?.display;\n\n  const subscriberId = coverage?.subscriberId;\n\n  const subscriberData = getPatientData(subscriber);\n\n  const policyGroup = coverage?.class?.find(\n    (item) =>\n      item.type.coding?.find(\n        (coding) => coding.system === FHIR_EXTENSION.Coverage.coverageClass.url && coding.code === 'group'\n      )\n  )?.value;\n\n  const planName = coverage?.class?.find(\n    (item) =>\n      item.type.coding?.find(\n        (coding) => coding.system === FHIR_EXTENSION.Coverage.coverageClass.url && coding.code === 'plan'\n      )\n  )?.name;\n\n  const organizationId = coverage?.payor?.[0]?.reference?.split('/')[1];\n\n  return { relationship, subscriberId, ...subscriberData, policyGroup, planName, organizationId };\n};\n\nexport const mapPatientInformationToCoverageResource = (\n  coverage: Coverage,\n  patientInformation: PatientInformationModalFormValues\n): Coverage => {\n  const coverageCopy = structuredClone(coverage) as Coverage;\n\n  const relationship = patientInformation.relationship;\n  const relationshipCoding = {\n    system: FHIR_EXTENSION.Coverage.subscriberRelationship.url,\n    code: relationship.toLowerCase(),\n    display: relationship,\n  };\n  if (!coverageCopy.relationship?.coding) {\n    coverageCopy.relationship = { ...coverageCopy.relationship, coding: [] };\n  }\n\n  if (\n    !coverageCopy.relationship.coding!.find(\n      (item) => item.system === FHIR_EXTENSION.Coverage.subscriberRelationship.url\n    )\n  ) {\n    coverageCopy.relationship.coding = [...(coverageCopy.relationship.coding || []), relationshipCoding];\n  } else {\n    coverageCopy.relationship.coding = coverageCopy.relationship.coding!.map((item) =>\n      item.system === FHIR_EXTENSION.Coverage.subscriberRelationship.url ? relationshipCoding : item\n    );\n  }\n\n  return coverageCopy;\n};\n\nconst isCoverageClass = (coverageClass: CoverageClass, code: 'plan' | 'group'): Coding | undefined =>\n  coverageClass.type.coding?.find(\n    (coding) => coding.system === FHIR_EXTENSION.Coverage.coverageClass.url && coding.code === code\n  );\n\nconst findCoverageClass = (\n  coverageClasses: CoverageClass[] | undefined,\n  code: 'plan' | 'group'\n): CoverageClass | undefined => coverageClasses?.find((item) => isCoverageClass(item, code));\n\nconst updateOrCreateCoveragePlanClass = (coverageClass?: CoverageClass, planOwnedBy?: PlanOwnedBy): CoverageClass => {\n  const getIdentifierCoding = (coding?: Coding[]): Coding | undefined =>\n    coding?.find((coding) => coding.system === 'payer-id');\n\n  const name = planOwnedBy?.name;\n  const value = getIdentifierCoding(\n    planOwnedBy?.ownedBy?.identifier?.find((id) => getIdentifierCoding(id.type?.coding))?.type?.coding\n  )?.code;\n\n  if (coverageClass) {\n    return { ...coverageClass, name: name || coverageClass.name, value: value || coverageClass.value };\n  } else {\n    return {\n      name,\n      value: value || '',\n      type: { coding: [{ code: 'plan', system: FHIR_EXTENSION.Coverage.coverageClass.url }] },\n    };\n  }\n};\n\nconst updateOrCreateCoverageGroupClass = (coverageClass: CoverageClass | undefined, value: string): CoverageClass => {\n  if (coverageClass) {\n    return { ...coverageClass, name: coverageClass.name, value };\n  } else {\n    return {\n      value,\n      type: { coding: [{ code: 'group', system: FHIR_EXTENSION.Coverage.coverageClass.url }] },\n    };\n  }\n};\n\nconst mapPolicyGroupToCoverageResource = (\n  coverageCopy: Coverage,\n  insuredInformation: Pick<InsuredInformationModalFormValues, 'policyGroup'>\n): void => {\n  if (insuredInformation.policyGroup) {\n    const groupClass = findCoverageClass(coverageCopy.class, 'group');\n    const modifiedGroupClass = updateOrCreateCoverageGroupClass(groupClass, insuredInformation.policyGroup);\n    if (groupClass) {\n      coverageCopy.class = coverageCopy.class!.map((coverageClass) =>\n        isCoverageClass(coverageClass, 'group') ? modifiedGroupClass : coverageClass\n      );\n    } else {\n      coverageCopy.class = [...(coverageCopy.class || []), modifiedGroupClass];\n    }\n  } else {\n    coverageCopy.class = coverageCopy.class?.filter((coverageClass) => !isCoverageClass(coverageClass, 'group'));\n  }\n};\n\nexport const mapInsuredInformationToCoverageResource = (\n  coverage: Coverage,\n  insuredInformation: InsuredInformationModalFormValues\n): Coverage => {\n  const coverageCopy = structuredClone(coverage) as Coverage;\n\n  // planName\n  const planClass = findCoverageClass(coverageCopy.class, 'plan');\n  const modifiedPlanClass = updateOrCreateCoveragePlanClass(planClass, insuredInformation.planAndPayor);\n  if (planClass) {\n    coverageCopy.class = coverageCopy.class!.map((coverageClass) =>\n      isCoverageClass(coverageClass, 'plan') ? modifiedPlanClass : coverageClass\n    );\n  } else {\n    coverageCopy.class = [...(coverageCopy.class || []), modifiedPlanClass];\n  }\n\n  // organizationId\n  coverageCopy.payor = [{ reference: `Organization/${insuredInformation.planAndPayor?.ownedBy?.id || ''}` }];\n\n  // subscriberId\n  coverageCopy.subscriberId = insuredInformation.insuredID;\n\n  mapPolicyGroupToCoverageResource(coverageCopy, insuredInformation);\n\n  return coverageCopy;\n};\n\nexport const mapInsuredInformationToRelatedPersonResource = (\n  subscriber: RelatedPerson,\n  insuredInformation: InsuredInformationModalFormValues\n): RelatedPerson => {\n  const subscriberCopy = structuredClone(subscriber) as RelatedPerson;\n\n  mapPersonInformationToResource(subscriberCopy, insuredInformation);\n\n  return subscriberCopy;\n};\n\nexport const mapAdditionalInsuranceToRelatedPersonResource = (\n  subscriber: RelatedPerson,\n  insuredInformation: AdditionalInsuranceFormValues\n): RelatedPerson => {\n  const subscriberCopy = structuredClone(subscriber) as RelatedPerson;\n\n  mapPersonNameToResource(subscriberCopy, insuredInformation);\n\n  return subscriberCopy;\n};\n\nexport const mapAdditionalInsuranceToCoverageResource = (\n  coverage: Coverage,\n  insuredInformation: AdditionalInsuranceFormValues\n): Coverage => {\n  const coverageCopy = structuredClone(coverage) as Coverage;\n\n  mapPolicyGroupToCoverageResource(coverageCopy, insuredInformation);\n\n  return coverageCopy;\n};\n"]}