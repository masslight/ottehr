{"version":3,"file":"patient.helper.js","sourceRoot":"","sources":["patient.helper.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,+BAA0C;AAC1C,6CAAqD;AAErD,uDAAyG;AAElG,IAAM,cAAc,GAAG,UAC5B,OAAiC;;IAGjC,IAAM,WAAW,GAAG,IAAA,sBAAc,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAC,CAAC;IAClD,IAAM,cAAc,GAAG,IAAA,yBAAiB,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC,CAAC;IAC3D,IAAM,GAAG,GAAG,IAAA,oCAAiB,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,CAAC,CAAC;IAClD,IAAM,MAAM,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,CAAC;IAC/B,IAAM,WAAW,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,mCAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxE,IAAM,KAAK,GAAG,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAE,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,MAAM,KAAK,OAAO,EAAvB,CAAuB,CAAC,0CAAE,KAAK,CAAC;IAE/E,sCAAY,WAAW,GAAK,cAAc,KAAE,GAAG,KAAA,EAAE,MAAM,QAAA,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,IAAG;AAChF,CAAC,CAAC;AAZW,QAAA,cAAc,kBAYzB;AAEK,IAAM,sCAAsC,GAAG,UACpD,OAAgB,EAChB,kBAAqD;IAErD,IAAM,WAAW,GAAG,eAAe,CAAC,OAAO,CAAY,CAAC;IAExD,IAAA,iDAA8B,EAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;IAEhE,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AATW,QAAA,sCAAsC,0CASjD","sourcesContent":["import { Patient, RelatedPerson } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { getPatientAddress } from 'utils';\nimport { getPatientName } from '../../telemed/utils';\nimport { PatientInformationModalFormValues } from './form-values.types';\nimport { getDateFromFormat, mapGenderToLabel, mapPersonInformationToResource } from './resources.helper';\n\nexport const getPatientData = (\n  patient?: Patient | RelatedPerson\n): ReturnType<typeof getPatientName> &\n  ReturnType<typeof getPatientAddress> & { dob?: DateTime; gender?: string; genderLabel?: string; phone?: string } => {\n  const patientName = getPatientName(patient?.name);\n  const patientAddress = getPatientAddress(patient?.address);\n  const dob = getDateFromFormat(patient?.birthDate);\n  const gender = patient?.gender;\n  const genderLabel = patient?.gender && mapGenderToLabel[patient.gender];\n  const phone = patient?.telecom?.find((item) => item.system === 'phone')?.value;\n\n  return { ...patientName, ...patientAddress, dob, gender, genderLabel, phone };\n};\n\nexport const mapPatientInformationToPatientResource = (\n  patient: Patient,\n  patientInformation: PatientInformationModalFormValues\n): Patient => {\n  const patientCopy = structuredClone(patient) as Patient;\n\n  mapPersonInformationToResource(patientCopy, patientInformation);\n\n  return patientCopy;\n};\n"]}