{"version":3,"file":"mixpanel.context.js","sourceRoot":"","sources":["mixpanel.context.tsx"],"names":[],"mappings":";;;AAAA,qDAA0D;AAC1D,+BAA+F;AASlF,QAAA,eAAe,GAAG,IAAA,qBAAa,EAAuB,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;AAE3E,IAAM,uBAAuB,GAAG,UACrC,KAA8C;IAE9C,IAAM,mBAAmB,GAAG,IAAA,cAAM,EAAC,KAAK,CAAC,CAAC;IAClC,IAAA,KAAK,GAA4B,KAAK,MAAjC,EAAE,MAAM,GAAoB,KAAK,OAAzB,EAAE,aAAa,GAAK,KAAK,cAAV,CAAW;IAE/C,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;IAC7C,CAAC;SAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAC;QACxC,0BAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC7B,IAAI,aAAa,EAAE,CAAC;YAClB,0BAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACnC,CAAC;QAED,mBAAmB,CAAC,OAAO,GAAG,IAAI,CAAC;IACrC,CAAC;IAED,OAAO,CAAC,uBAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,uBAAe,CAAC,QAAQ,CAAC,CAAC;AAC7F,CAAC,CAAC;AAlBW,QAAA,uBAAuB,2BAkBlC","sourcesContent":["import mixpanel, { Config, Dict } from 'mixpanel-browser';\nimport { createContext, Provider, ProviderExoticComponent, ReactElement, useRef } from 'react';\nimport { PropsWithChildren } from '../types';\n\nexport interface MixpanelContextProps {\n  token: string;\n  config?: Partial<Config>;\n  registerProps?: Dict;\n}\n\nexport const MixpanelContext = createContext<MixpanelContextProps>({ token: '' });\n\nexport const MixpanelContextProvider = (\n  props: PropsWithChildren<MixpanelContextProps>\n): ReactElement<ProviderExoticComponent<Provider<MixpanelContextProps>>> => {\n  const isMixpanelInitiated = useRef(false);\n  const { token, config, registerProps } = props;\n\n  if (!token) {\n    console.error('Mixpanel token is not set');\n  } else if (!isMixpanelInitiated.current) {\n    mixpanel.init(token, config);\n    if (registerProps) {\n      mixpanel.register(registerProps);\n    }\n\n    isMixpanelInitiated.current = true;\n  }\n\n  return <MixpanelContext.Provider value={props}>{props.children}</MixpanelContext.Provider>;\n};\n"]}