{"version":3,"file":"useMixpanel.js","sourceRoot":"","sources":["useMixpanel.ts"],"names":[],"mappings":";;;AAAA,qDAAwC;AACxC,+BAAmC;AACnC,iEAA+D;AAExD,IAAM,WAAW,GAAG;IACzB,IAAM,eAAe,GAAG,IAAA,kBAAU,EAAC,kCAAe,CAAC,CAAC;IACpD,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC3B,OAAO,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;IAC5C,CAAC;IAED,OAAO,UAAC,YAAoD;QAC1D,IAAI,CAAC;YACH,YAAY,CAAC,0BAAQ,CAAC,CAAC;QACzB,CAAC;QAAC,WAAM,CAAC;YACP,OAAO,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC;QACpD,CAAC;IACH,CAAC,CAAC;AACJ,CAAC,CAAC;AAbW,QAAA,WAAW,eAatB","sourcesContent":["import mixpanel from 'mixpanel-browser';\nimport { useContext } from 'react';\nimport { MixpanelContext } from '../contexts/mixpanel.context';\n\nexport const useMixpanel = (): ((mixpanelCall: (mixpanelApi: typeof mixpanel) => void) => void) => {\n  const mixpanelContext = useContext(MixpanelContext);\n  if (!mixpanelContext.token) {\n    console.warn('Mixpanel token is not set');\n  }\n\n  return (mixpanelCall: (mixpanelApi: typeof mixpanel) => void) => {\n    try {\n      mixpanelCall(mixpanel);\n    } catch {\n      console.warn(\"Mixpanel couldn't track the event\");\n    }\n  };\n};\n"]}