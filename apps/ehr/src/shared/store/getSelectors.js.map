{"version":3,"file":"getSelectors.js","sourceRoot":"","sources":["getSelectors.ts"],"names":[],"mappings":";;;AAEO,IAAM,YAAY,GAAG,UAK1B,KAAQ,EACR,SAAc;AACd,4EAA4E;;IAE5E,IAAM,SAAS,GAAe,EAAS,CAAC;4BAE7B,GAAG;QACZ,SAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,UAAC,KAAK,IAAK,OAAC,KAAW,CAAC,GAAG,CAAC,EAAjB,CAAiB,CAAC,CAAC;;IADvD,KAAkB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;QAAtB,IAAM,GAAG,kBAAA;gBAAH,GAAG;KAEb;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAhBW,QAAA,YAAY,gBAgBvB","sourcesContent":["import { StoreApi, UseBoundStore } from 'zustand';\n\nexport const getSelectors = <\n  S extends UseBoundStore<StoreApi<object>>,\n  T extends S extends { getState: () => infer R } ? R : never,\n  K extends keyof T,\n>(\n  store: S,\n  stateKeys: K[]\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n) => {\n  const selectors: Pick<T, K> = {} as any;\n\n  for (const key of stateKeys) {\n    selectors[key] = store((state) => (state as T)[key]);\n  }\n\n  return selectors;\n};\n"]}