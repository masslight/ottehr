{"version":3,"file":"ActionsList.js","sourceRoot":"","sources":["ActionsList.tsx"],"names":[],"mappings":";;;AAAA,0CAA6C;AAC7C,+BAAsE;AAa/D,IAAM,WAAW,GAAG,UAAsB,KAA0B;IACjE,IAAA,IAAI,GAAiG,KAAK,KAAtG,EAAE,MAAM,GAAyF,KAAK,OAA9F,EAAE,UAAU,GAA6E,KAAK,WAAlF,EAAE,aAAa,GAA8D,KAAK,cAAnE,EAAE,KAA4D,KAAK,IAA1D,EAAP,GAAG,mBAAG,CAAC,KAAA,EAAE,OAAO,GAA4C,KAAK,QAAjD,EAAE,KAA0C,KAAK,WAA1B,EAArB,UAAU,mBAAG,QAAQ,KAAA,EAAE,cAAc,GAAK,KAAK,eAAV,CAAW;IAEnH,OAAO,CACL,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAC9D;MAAA,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,EAAE,GAAG,IAAK,OAAA,CAC9B,CAAC,cAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,CACzD;UAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,YAAA,EAAE,cAAc,EAAE,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAChF;YAAA,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CACxB;YAAA,CAAC,aAAa,IAAI,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAC9C;UAAA,EAAE,cAAG,CACL;UAAA,CAAC,OAAO,IAAI,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,MAAM,IAAI,CAAC,kBAAO,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAG,CACtE;QAAA,EAAE,cAAG,CAAC,CACP,EAR+B,CAQ/B,CAAC,CACJ;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAhBW,QAAA,WAAW,eAgBtB","sourcesContent":["import { Box, Divider } from '@mui/material';\nimport React, { CSSProperties, ReactElement, ReactNode } from 'react';\n\ntype ActionsListProps<T extends unknown[], K = T[0]> = {\n  data: T;\n  getKey: (value: K, index: number) => string | number;\n  renderItem: (value: K, index: number) => ReactNode;\n  renderActions?: (value: K, index: number) => ReactNode;\n  gap?: number;\n  divider?: boolean;\n  alignItems?: CSSProperties['alignItems'];\n  itemDataTestId?: string;\n};\n\nexport const ActionsList = <T extends unknown[]>(props: ActionsListProps<T>): ReactElement => {\n  const { data, getKey, renderItem, renderActions, gap = 1, divider, alignItems = 'center', itemDataTestId } = props;\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: gap }}>\n      {data.map((item, index, arr) => (\n        <Box key={getKey(item, index)} data-testid={itemDataTestId}>\n          <Box sx={{ display: 'flex', alignItems, justifyContent: 'space-between', gap: 2 }}>\n            {renderItem(item, index)}\n            {renderActions && renderActions(item, index)}\n          </Box>\n          {divider && index + 1 !== arr.length && <Divider sx={{ pt: gap }} />}\n        </Box>\n      ))}\n    </Box>\n  );\n};\n"]}