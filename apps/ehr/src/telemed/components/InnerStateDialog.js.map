{"version":3,"file":"InnerStateDialog.js","sourceRoot":"","sources":["InnerStateDialog.tsx"],"names":[],"mappings":";;;AAAA,mDAAkD;AAClD,0CAAuH;AACvH,+BAAuD;AAWhD,IAAM,gBAAgB,GAA8B,UAAC,KAAK;IACvD,IAAA,QAAQ,GAA4D,KAAK,SAAjE,EAAE,KAAK,GAAqD,KAAK,MAA1D,EAAE,OAAO,GAA4C,KAAK,QAAjD,EAAE,OAAO,GAAmC,KAAK,QAAxC,EAAE,WAAW,GAAsB,KAAK,YAA3B,EAAE,eAAe,GAAK,KAAK,gBAAV,CAAW;IAE5E,IAAA,KAAkB,IAAA,gBAAQ,EAAC,KAAK,CAAC,EAAhC,IAAI,QAAA,EAAE,OAAO,QAAmB,CAAC;IAExC,IAAM,UAAU,GAAG;QACjB,OAAO,CAAC,IAAI,CAAC,CAAC;IAChB,CAAC,CAAC;IAEF,IAAM,UAAU,GAAG;QACjB,OAAO,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC,CAAC;IAEF,OAAO,CACL,EACE;MAAA,CAAC,QAAQ,CAAC,UAAU,CAAC,CACrB;MAAA,CAAC,IAAI,IAAI,CACP,CAAC,iBAAM,CAAC,SAAS,CAAC,IAAI,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,CACjE;UAAA,CAAC,eAAe,IAAI,CAClB,CAAC,qBAAU,CACT,OAAO,CAAC,CAAC,UAAU,CAAC,CACpB,IAAI,CAAC,OAAO,CACZ,EAAE,CAAC,CAAC;oBACF,QAAQ,EAAE,UAAU;oBACpB,KAAK,EAAE,EAAE;oBACT,GAAG,EAAE,EAAE;iBACR,CAAC,CAEF;cAAA,CAAC,eAAS,CAAC,QAAQ,CAAC,OAAO,EAC7B;YAAA,EAAE,qBAAU,CAAC,CACd,CAED;;UAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CACP,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAC1B,CAAC,sBAAW,CAAC,SAAS,CAAC,CAAC,qBAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAClF;gBAAA,CAAC,KAAK,CACR;cAAA,EAAE,sBAAW,CAAC,CACf,CAAC,CAAC,CAAC,CACF,KAAK,CACN,CACF,CAAC,CAAC,CAAC,IAAI,CAER;;UAAA,CAAC,OAAO,IAAI,CAAC,wBAAa,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,wBAAa,CAAC,CAEnE;;UAAA,CAAC,OAAO,IAAI,CACV,CAAC,wBAAa,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,wBAAa,CAAC,CAC7G,CACH;QAAA,EAAE,iBAAM,CAAC,CACV,CACH;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC;AAnDW,QAAA,gBAAgB,oBAmD3B","sourcesContent":["import CloseIcon from '@mui/icons-material/Close';\nimport { Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, IconButton, Typography } from '@mui/material';\nimport React, { FC, ReactNode, useState } from 'react';\n\ntype InnerStateDialogProps = {\n  children: (showDialog: () => void) => ReactNode;\n  title?: ReactNode | string;\n  actions?: ((hideDialog: () => void) => ReactNode) | ReactNode;\n  content?: ReactNode;\n  DialogProps?: Omit<DialogProps, 'open' | 'onClose'>;\n  showCloseButton?: boolean;\n};\n\nexport const InnerStateDialog: FC<InnerStateDialogProps> = (props) => {\n  const { children, title, actions, content, DialogProps, showCloseButton } = props;\n\n  const [open, setOpen] = useState(false);\n\n  const showDialog = (): void => {\n    setOpen(true);\n  };\n\n  const hideDialog = (): void => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      {children(showDialog)}\n      {open && (\n        <Dialog fullWidth {...DialogProps} open={open} onClose={hideDialog}>\n          {showCloseButton && (\n            <IconButton\n              onClick={hideDialog}\n              size=\"small\"\n              sx={{\n                position: 'absolute',\n                right: 16,\n                top: 16,\n              }}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          )}\n\n          {title ? (\n            typeof title === 'string' ? (\n              <DialogTitle component={Typography} variant=\"h5\" color=\"primary.dark\" sx={{ pb: 1 }}>\n                {title}\n              </DialogTitle>\n            ) : (\n              title\n            )\n          ) : null}\n\n          {content && <DialogContent sx={{ pb: 2 }}>{content}</DialogContent>}\n\n          {actions && (\n            <DialogActions sx={{ p: 3 }}>{typeof actions === 'function' ? actions(hideDialog) : actions}</DialogActions>\n          )}\n        </Dialog>\n      )}\n    </>\n  );\n};\n"]}