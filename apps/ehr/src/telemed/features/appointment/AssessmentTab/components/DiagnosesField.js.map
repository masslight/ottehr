{"version":3,"file":"DiagnosesField.js","sourceRoot":"","sources":["DiagnosesField.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Autocomplete, TextField } from '@mui/material';\nimport { FC, useState } from 'react';\nimport { FieldError } from 'react-hook-form';\nimport { IcdSearchResponse } from 'utils';\nimport { dataTestIds } from '../../../../../constants/data-test-ids';\nimport { useDebounce } from '../../../../hooks';\nimport { useGetIcd10Search } from '../../../../state';\n\ntype DiagnosesFieldProps = {\n  onChange: (data: IcdSearchResponse['codes'][number]) => void;\n  disableForPrimary: boolean;\n  disabled?: boolean;\n  value?: IcdSearchResponse['codes'][number] | null;\n  label?: string;\n  placeholder?: string;\n  error?: FieldError;\n};\n\nexport const DiagnosesField: FC<DiagnosesFieldProps> = (props) => {\n  const { onChange, disabled, disableForPrimary, value, label, placeholder, error } = props;\n\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');\n  const { isFetching: isSearching, data } = useGetIcd10Search({ search: debouncedSearchTerm, sabs: 'ICD10CM' });\n  const icdSearchOptions = data?.codes || [];\n\n  const { debounce } = useDebounce(800);\n\n  const debouncedHandleInputChange = (data: string): void => {\n    debounce(() => {\n      setDebouncedSearchTerm(data);\n    });\n  };\n\n  const onInternalChange = (_e: unknown, data: IcdSearchResponse['codes'][number] | null): void => {\n    if (data) {\n      onChange(data);\n    }\n  };\n\n  return (\n    <Autocomplete\n      fullWidth\n      blurOnSelect\n      disabled={disabled}\n      options={icdSearchOptions}\n      noOptionsText={\n        debouncedSearchTerm && icdSearchOptions.length === 0\n          ? 'Nothing found for this search criteria'\n          : 'Start typing to load results'\n      }\n      autoComplete\n      includeInputInList\n      disableClearable\n      filterOptions={(x) => x}\n      value={value || (null as unknown as undefined)}\n      isOptionEqualToValue={(option, value) => value.code === option.code}\n      loading={isSearching}\n      onChange={onInternalChange}\n      getOptionLabel={(option) => (typeof option === 'string' ? option : `${option.code} ${option.display}`)}\n      getOptionDisabled={(option) => disableForPrimary && option.code.startsWith('W')}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          data-testid={dataTestIds.diagnosisContainer.diagnosisDropdown}\n          onChange={(e) => debouncedHandleInputChange(e.target.value)}\n          size=\"small\"\n          label={label || 'Search'}\n          placeholder={placeholder || 'Diagnoses'}\n          helperText={error ? error.message : null}\n          error={!!error}\n        />\n      )}\n    />\n  );\n};\n"]}