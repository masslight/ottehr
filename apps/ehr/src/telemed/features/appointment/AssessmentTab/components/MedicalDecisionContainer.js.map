{"version":3,"file":"MedicalDecisionContainer.js","sourceRoot":"","sources":["MedicalDecisionContainer.tsx"],"names":[],"mappings":";;;AAAA,0CAAkE;AAClE,+BAA4C;AAC5C,yEAAwE;AACxE,2CAAmE;AACnE,2CAAwD;AACxD,qDAAoD;AACpD,+DAA8D;AAEvD,IAAM,wBAAwB,GAAO;;IACpC,IAAA,KAA+C,IAAA,2BAAY,EAAC,2BAAmB,EAAE;QACrF,WAAW;QACX,oBAAoB;KACrB,CAAC,EAHM,SAAS,eAAA,EAAsB,SAAS,wBAG9C,CAAC;IACK,IAAuB,UAAU,GAAK,IAAA,sCAA8B,GAAE,sBAArC,CAAsC;IAC/E,IAAM,GAAG,GAAG,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,eAAe,0CAAE,IAAI,CAAC;IACvC,IAAA,KAA8B,IAAA,gBAAQ,EAAC,KAAK,CAAC,EAA5C,UAAU,QAAA,EAAE,aAAa,QAAmB,CAAC;IAEpD,OAAO,CACL,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAC5D;MAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CACnC;QAAA,CAAC,iCAAe,CAAC,uBAAuB,EAAE,iCAAe,CACzD;QAAA,CAAC,CAAC,UAAU,IAAI,SAAS,CAAC,IAAI,CAAC,2BAAgB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAG,CAC9D;MAAA,EAAE,cAAG,CACL;MAAA,CAAC,UAAU,CAAC,CAAC,CAAC,CACZ,GAAG,CAAC,CAAC,CAAC,CACJ,CAAC,qBAAU,CAAC,CAAC,GAAG,CAAC,EAAE,qBAAU,CAAC,CAC/B,CAAC,CAAC,CAAC,CACF,CAAC,qBAAU,CAAC,KAAK,CAAC,iBAAiB,CAAC,YAAY,EAAE,qBAAU,CAAC,CAC9D,CACF,CAAC,CAAC,CAAC,CACF,CAAC,2CAAoB,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,CAAC,aAAa,CAAC,EAAG,CAC3E,CACH;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AA1BW,QAAA,wBAAwB,4BA0BnC","sourcesContent":["import { Box, CircularProgress, Typography } from '@mui/material';\nimport React, { FC, useState } from 'react';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useGetAppointmentAccessibility } from '../../../../hooks';\nimport { useAppointmentStore } from '../../../../state';\nimport { AssessmentTitle } from './AssessmentTitle';\nimport { MedicalDecisionField } from './MedicalDecisionField';\n\nexport const MedicalDecisionContainer: FC = () => {\n  const { chartData, isChartDataLoading: isLoading } = getSelectors(useAppointmentStore, [\n    'chartData',\n    'isChartDataLoading',\n  ]);\n  const { isAppointmentReadOnly: isReadOnly } = useGetAppointmentAccessibility();\n  const mdm = chartData?.medicalDecision?.text;\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n      <Box sx={{ display: 'flex', gap: 1 }}>\n        <AssessmentTitle>Medical Decision Making</AssessmentTitle>\n        {(isUpdating || isLoading) && <CircularProgress size={16} />}\n      </Box>\n      {isReadOnly ? (\n        mdm ? (\n          <Typography>{mdm}</Typography>\n        ) : (\n          <Typography color=\"secondary.light\">Not provided</Typography>\n        )\n      ) : (\n        <MedicalDecisionField loading={isLoading} setIsUpdating={setIsUpdating} />\n      )}\n    </Box>\n  );\n};\n"]}