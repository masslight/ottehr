{"version":3,"file":"MedicalDecisionField.js","sourceRoot":"","sources":["MedicalDecisionField.tsx"],"names":[],"mappings":";;;AAAA,0CAA0C;AAC1C,+BAAsC;AACtC,mDAAsD;AACtD,wEAAqE;AACrE,yEAAwE;AACxE,2CAA0D;AAC1D,2CAAwD;AAOjD,IAAM,oBAAoB,GAAkC,UAAC,EAA0B;;QAAxB,OAAO,aAAA,EAAE,aAAa,mBAAA;IAClF,IAAA,SAAS,GAAK,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,WAAW,CAAC,CAAC,UAArD,CAAsD;IACvE,IAAM,OAAO,GAAG,IAAA,yBAAO,EAAC;QACtB,aAAa,EAAE;YACb,eAAe,EAAE,CAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,eAAe,0CAAE,IAAI,KAAI,EAAE;SACxD;KACF,CAAC,CAAC;IACK,IAAA,OAAO,GAAK,OAAO,QAAZ,CAAa;IAEtB,IAAA,KAA+B,IAAA,6BAAqB,EAAC,iBAAiB,CAAC,EAArE,aAAa,mBAAA,EAAE,SAAS,eAA6C,CAAC;IAE9E,IAAA,iBAAS,EAAC;QACR,aAAa,CAAC,SAAS,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,CAAC;IAE/B,IAAA,iBAAS,EAAC;;QACR,IAAI,CAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,eAAe,0CAAE,IAAI,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC;YAC9E,OAAO,CAAC,QAAQ,CAAC,iBAAiB,EAAE,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACtE,CAAC;IACH,CAAC,EAAE,CAAC,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,eAAe,0CAAE,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAEhD,OAAO,CACL,CAAC,4BAAU,CACT,IAAI,CAAC,iBAAiB,CACtB,OAAO,CAAC,CAAC,OAAO,CAAC,CACjB,MAAM,CAAC,CAAC,UAAC,EAA8B;gBAA5B,aAA0B,EAAjB,KAAK,WAAA,EAAE,QAAQ,cAAA;YAAS,OAAA,CAC1C,CAAC,oBAAS,CACR,WAAW,CAAC,CAAC,2BAAW,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAC7D,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,QAAQ,CAAC,CAAC,UAAC,CAAC;oBACV,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACZ,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChC,CAAC,CAAC,CACF,IAAI,CAAC,OAAO,CACZ,KAAK,CAAC,2BAA2B,CACjC,SAAS,CACT,SAAS,CACT,QAAQ,CAAC,CAAC,OAAO,CAAC,EAClB,CACH;QAd2C,CAc3C,CAAC,EACF,CACH,CAAC;AACJ,CAAC,CAAC;AA1CW,QAAA,oBAAoB,wBA0C/B","sourcesContent":["import { TextField } from '@mui/material';\nimport { FC, useEffect } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { dataTestIds } from '../../../../../constants/data-test-ids';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useDebounceNotesField } from '../../../../hooks';\nimport { useAppointmentStore } from '../../../../state';\n\ntype MedicalDecisionFieldProps = {\n  loading: boolean;\n  setIsUpdating: (value: boolean) => void;\n};\n\nexport const MedicalDecisionField: FC<MedicalDecisionFieldProps> = ({ loading, setIsUpdating }) => {\n  const { chartData } = getSelectors(useAppointmentStore, ['chartData']);\n  const methods = useForm({\n    defaultValues: {\n      medicalDecision: chartData?.medicalDecision?.text || '',\n    },\n  });\n  const { control } = methods;\n\n  const { onValueChange, isLoading } = useDebounceNotesField('medicalDecision');\n\n  useEffect(() => {\n    setIsUpdating(isLoading);\n  }, [isLoading, setIsUpdating]);\n\n  useEffect(() => {\n    if (chartData?.medicalDecision?.text && !methods.getValues('medicalDecision')) {\n      methods.setValue('medicalDecision', chartData.medicalDecision.text);\n    }\n  }, [chartData?.medicalDecision?.text, methods]);\n\n  return (\n    <Controller\n      name=\"medicalDecision\"\n      control={control}\n      render={({ field: { value, onChange } }) => (\n        <TextField\n          data-testid={dataTestIds.assessmentCard.medicalDecisionField}\n          value={value}\n          onChange={(e) => {\n            onChange(e);\n            onValueChange(e.target.value);\n          }}\n          size=\"small\"\n          label=\"Medical Decision Making *\"\n          fullWidth\n          multiline\n          disabled={loading}\n        />\n      )}\n    />\n  );\n};\n"]}