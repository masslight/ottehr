{"version":3,"file":"ERXDialog.js","sourceRoot":"","sources":["ERXDialog.tsx"],"names":[],"mappings":";;;AAAA,0CAAoC;AACpC,+BAA0D;AAC1D,uCAAyC;AACzC,+BAAuC;AACvC,mEAAkE;AAClE,qCAAkD;AAE3C,IAAM,SAAS,GAAG,UAAC,EAAgC;;QAA9B,OAAO,aAAA;IACzB,IAAA,OAAO,GAAK,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,SAAS,CAAC,CAAC,QAAnD,CAAoD;IACnE,IAAI,MAAM,GAAuB,MAAM,CAAC,UAAU,CAChD,MAAA,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,0CAAE,IAAI,CAAC,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,GAAG,KAAK,sBAAc,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,EAA7C,CAA6C,CAAC,0CAAE,WAAW,mCAAI,EAAE,CACpG,CAAC;IACF,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;QAClB,MAAM,GAAG,SAAS,CAAC;IACrB,CAAC;IAEK,IAAA,KAA0C,IAAA,gBAAQ,GAAsB,EAAvE,gBAAgB,QAAA,EAAE,mBAAmB,QAAkC,CAAC;IAE/E,IAAA,iBAAS,EAAC;QACR,IAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;QAClE,mBAAmB,CAAC,aAAa,CAAC,CAAC;QAEnC,OAAO;YACL,yCAAyC;YACzC,IAAI,aAAa,EAAE,CAAC;gBAClB,OAAO,aAAa,CAAC,UAAU,EAAE,CAAC;oBAChC,aAAa,CAAC,WAAW,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBACtD,CAAC;YACH,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,wEAAwE;IAEhF,OAAO,CACL,EACE;MAAA,CAAC,gBAAgB;YACf,IAAA,wBAAY,EACV,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAChD;YAAA,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAClD;UAAA,EAAE,cAAG,CAAC,EACN,gBAAgB,CACjB,CACL;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,SAAS,aAoCpB","sourcesContent":["import { Box } from '@mui/material';\nimport { ReactElement, useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { FHIR_EXTENSION } from 'utils';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../state';\n\nexport const ERXDialog = ({ ssoLink }: { ssoLink: string }): ReactElement => {\n  const { patient } = getSelectors(useAppointmentStore, ['patient']);\n  let weight: number | undefined = Number.parseFloat(\n    patient?.extension?.find((ext) => ext.url === FHIR_EXTENSION.Patient.weight.url)?.valueString ?? ''\n  );\n  if (isNaN(weight)) {\n    weight = undefined;\n  }\n\n  const [erxPortalElement, setErxPortalElement] = useState<HTMLElement | null>();\n\n  useEffect(() => {\n    const portalElement = document.getElementById('prescribe-dialog');\n    setErxPortalElement(portalElement);\n\n    return () => {\n      // Cleanup portal when component unmounts\n      if (portalElement) {\n        while (portalElement.firstChild) {\n          portalElement.removeChild(portalElement.firstChild);\n        }\n      }\n    };\n  }, []); // Empty dependency array since we only want to set up and clean up once\n\n  return (\n    <>\n      {erxPortalElement &&\n        createPortal(\n          <Box sx={{ minHeight: '600px', flex: '1 0 auto' }}>\n            <iframe src={ssoLink} width=\"100%\" height=\"100%\" />\n          </Box>,\n          erxPortalElement\n        )}\n    </>\n  );\n};\n"]}