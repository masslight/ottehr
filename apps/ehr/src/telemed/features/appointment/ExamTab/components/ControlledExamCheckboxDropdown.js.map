{"version":3,"file":"ControlledExamCheckboxDropdown.js","sourceRoot":"","sources":["ControlledExamCheckboxDropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Autocomplete, Box, TextField } from '@mui/material';\nimport { FC, useState } from 'react';\nimport { ExamFieldsNames, ExamObservationDTO } from 'utils';\nimport { useExamObservations } from '../../../../hooks/useExamObservations';\nimport { StatelessExamCheckbox } from './StatelessExamCheckbox';\n\nexport type ExamCheckboxDropdownOptionType = { label: string; name: ExamFieldsNames };\n\ntype ControlledExamCheckboxDropdownProps = {\n  checkboxLabel?: string;\n  dropdownLabel?: string;\n  abnormal?: boolean;\n  options: ExamCheckboxDropdownOptionType[];\n  dropdownTestId?: string;\n  checkboxBlockTestId?: string;\n};\n\nexport const ControlledExamCheckboxDropdown: FC<ControlledExamCheckboxDropdownProps> = (props) => {\n  const { checkboxLabel, dropdownLabel, abnormal, options, dropdownTestId, checkboxBlockTestId } = props;\n\n  const { value: fields, update, isLoading } = useExamObservations(options.map((option) => option.name));\n\n  const [selectedOption, setSelectedOption] = useState<ExamCheckboxDropdownOptionType | null>(\n    fields\n      .filter((field) => field.value === true)\n      .map((field) => options.find((option) => option.name === field.field))[0] || null\n  );\n  const [booleanValue, setBooleanValue] = useState(!!selectedOption);\n\n  const onChange = (fieldsToChange: ExamObservationDTO[]): void => {\n    update(fieldsToChange);\n  };\n\n  const onBooleanChange = (newValue: boolean): void => {\n    if (!newValue) {\n      setSelectedOption(null);\n      if (selectedOption) {\n        onChange(fields.map((field) => ({ ...field, value: false })));\n      }\n    }\n    setBooleanValue(newValue);\n  };\n\n  const onOptionChange = (newValue: ExamCheckboxDropdownOptionType | null): void => {\n    setBooleanValue(!!newValue);\n    setSelectedOption(newValue);\n    onChange(fields.map((field) => ({ ...field, value: field.field === newValue?.name })));\n  };\n\n  return (\n    <Box sx={{ display: 'flex', gap: 2 }}>\n      <Box data-testid={checkboxBlockTestId}>\n        <StatelessExamCheckbox\n          label={checkboxLabel}\n          abnormal={abnormal}\n          checked={booleanValue}\n          onChange={onBooleanChange}\n          disabled={isLoading}\n        />\n      </Box>\n      <Autocomplete\n        data-testid={dropdownTestId}\n        disablePortal\n        disabled={isLoading}\n        options={options}\n        value={selectedOption}\n        onChange={(_e, newValue) => onOptionChange(newValue)}\n        fullWidth\n        renderInput={(params) => <TextField {...params} size=\"small\" label={dropdownLabel} />}\n      />\n    </Box>\n  );\n};\n"]}