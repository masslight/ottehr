{"version":3,"file":"MusculoskeletalForm.js","sourceRoot":"","sources":["MusculoskeletalForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import { otherColors } from '@ehrTheme/colors';\nimport { Autocomplete, Box, FormControlLabel, Radio, RadioGroup, TextField, Typography } from '@mui/material';\nimport React, { FC, useState } from 'react';\nimport { Controller, FormProvider, useForm } from 'react-hook-form';\nimport { ExamObservationDTO } from 'utils';\nimport {\n  musculoskeletalAbnormalOptions,\n  musculoskeletalBodyPartOptions,\n  musculoskeletalFields,\n  musculoskeletalFingerOptions,\n  musculoskeletalSideOptions,\n  musculoskeletalToeOptions,\n  parseMusculoskeletalFieldToName,\n} from 'utils';\nimport { RoundedButton } from '../../../../../components/RoundedButton';\nimport { ActionsList, DeleteIconButton } from '../../../../components';\nimport { useExamObservations } from '../../../../hooks/useExamObservations';\nimport { StatelessExamCheckbox } from './StatelessExamCheckbox';\n\ntype FormValues = {\n  side: string;\n  bodyPart: string | null;\n  finger: string | null;\n  toe: string | null;\n  abnormal: string | null;\n};\n\nexport const MusculoskeletalForm: FC = () => {\n  const { value: fields, update, isLoading } = useExamObservations(musculoskeletalFields);\n  const abnormalFields = fields.filter((field) => field.value);\n\n  const [value, setValue] = useState(abnormalFields.length > 0);\n  const [savedFields, setSavedFields] = useState<ExamObservationDTO[]>([]);\n\n  const methods = useForm<FormValues>({\n    defaultValues: {\n      side: 'left',\n      bodyPart: null,\n      finger: null,\n      toe: null,\n      abnormal: null,\n    },\n  });\n  const { control, handleSubmit, watch, reset } = methods;\n\n  const onAdd = (data: FormValues): void => {\n    const arr: string[] = [];\n\n    arr.push(data.abnormal!);\n    arr.push(data.side);\n    arr.push(data.bodyPart!);\n\n    switch (data.bodyPart) {\n      case 'finger':\n        arr.push(data.finger!);\n        break;\n      case 'toe':\n        arr.push(data.toe!);\n        break;\n    }\n\n    const fieldName = arr.join('-');\n    const field = fields.find((field) => field.field === fieldName)!;\n\n    update({ ...field, value: true });\n\n    reset();\n  };\n\n  const onRemove = (name: string): void => {\n    const field = fields.find((field) => field.field === name)!;\n\n    update({ ...field, value: false });\n  };\n\n  const onBooleanChange = (value: boolean): void => {\n    setValue(value);\n\n    if (value) {\n      if (savedFields.length > 0) {\n        update(savedFields.map((field) => ({ ...field, value: true })));\n      }\n    } else {\n      setSavedFields(abnormalFields);\n      if (abnormalFields.length > 0) {\n        update(abnormalFields.map((field) => ({ ...field, value: false })));\n      }\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 2,\n      }}\n    >\n      <StatelessExamCheckbox\n        abnormal\n        label=\"Abnormal\"\n        checked={value}\n        onChange={onBooleanChange}\n        disabled={isLoading}\n      />\n\n      {abnormalFields.length > 0 && (\n        <Box sx={{ width: '100%' }}>\n          <ActionsList\n            data={abnormalFields}\n            getKey={(value) => value.field}\n            renderItem={(value) => <Typography>{parseMusculoskeletalFieldToName(value.field)}</Typography>}\n            renderActions={(value) => <DeleteIconButton disabled={isLoading} onClick={() => onRemove(value.field)} />}\n            divider\n            gap={0.5}\n          />\n        </Box>\n      )}\n\n      {value && (\n        <FormProvider {...methods}>\n          <Box\n            sx={{\n              p: 2,\n              backgroundColor: otherColors.formCardBg,\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 2,\n              borderRadius: 2,\n            }}\n          >\n            <Controller\n              name=\"side\"\n              control={control}\n              rules={{\n                required: true,\n              }}\n              render={({ field: { onChange, value } }) => (\n                <RadioGroup value={value} onChange={onChange} row>\n                  {musculoskeletalSideOptions.map((singleOption) => (\n                    <FormControlLabel\n                      key={singleOption.value}\n                      value={singleOption.value}\n                      label={singleOption.label}\n                      control={<Radio size=\"small\" />}\n                    />\n                  ))}\n                </RadioGroup>\n              )}\n            />\n            <Controller\n              name=\"bodyPart\"\n              control={control}\n              rules={{\n                required: true,\n              }}\n              render={({ field: { onChange, value }, fieldState: { error } }) => (\n                <Autocomplete\n                  options={Object.keys(musculoskeletalBodyPartOptions)}\n                  getOptionLabel={(option) =>\n                    musculoskeletalBodyPartOptions[option as keyof typeof musculoskeletalBodyPartOptions]\n                  }\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      helperText={error ? error.message : null}\n                      error={!!error}\n                      size=\"small\"\n                      label=\"Body part\"\n                    />\n                  )}\n                  onChange={(_e, data) => onChange(data)}\n                  value={value}\n                />\n              )}\n            />\n            {watch('bodyPart') === 'finger' && (\n              <Controller\n                name=\"finger\"\n                control={control}\n                rules={{\n                  required: true,\n                }}\n                render={({ field: { onChange, value }, fieldState: { error } }) => (\n                  <Autocomplete\n                    options={Object.keys(musculoskeletalFingerOptions)}\n                    getOptionLabel={(option) =>\n                      musculoskeletalFingerOptions[option as keyof typeof musculoskeletalFingerOptions]\n                    }\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        helperText={error ? error.message : null}\n                        error={!!error}\n                        size=\"small\"\n                        label=\"Finger\"\n                      />\n                    )}\n                    onChange={(_e, data) => onChange(data)}\n                    value={value}\n                  />\n                )}\n              />\n            )}\n            {watch('bodyPart') === 'toe' && (\n              <Controller\n                name=\"toe\"\n                control={control}\n                rules={{\n                  required: true,\n                }}\n                render={({ field: { onChange, value }, fieldState: { error } }) => (\n                  <Autocomplete\n                    options={Object.keys(musculoskeletalToeOptions)}\n                    getOptionLabel={(option) =>\n                      musculoskeletalToeOptions[option as keyof typeof musculoskeletalToeOptions]\n                    }\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        helperText={error ? error.message : null}\n                        error={!!error}\n                        size=\"small\"\n                        label=\"Toe\"\n                      />\n                    )}\n                    onChange={(_e, data) => onChange(data)}\n                    value={value}\n                  />\n                )}\n              />\n            )}\n            <Controller\n              name=\"abnormal\"\n              control={control}\n              rules={{\n                required: true,\n              }}\n              render={({ field: { onChange, value }, fieldState: { error } }) => (\n                <Autocomplete\n                  options={Object.keys(musculoskeletalAbnormalOptions)}\n                  getOptionLabel={(option) =>\n                    musculoskeletalAbnormalOptions[option as keyof typeof musculoskeletalAbnormalOptions]\n                  }\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      helperText={error ? error.message : null}\n                      error={!!error}\n                      size=\"small\"\n                      label=\"Abnormal\"\n                    />\n                  )}\n                  onChange={(_e, data) => onChange(data)}\n                  value={value}\n                />\n              )}\n            />\n            <RoundedButton onClick={handleSubmit(onAdd)} disabled={isLoading}>\n              Add\n            </RoundedButton>\n          </Box>\n        </FormProvider>\n      )}\n    </Box>\n  );\n};\n"]}