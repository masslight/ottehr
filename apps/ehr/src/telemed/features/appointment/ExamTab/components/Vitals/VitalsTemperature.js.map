{"version":3,"file":"VitalsTemperature.js","sourceRoot":"","sources":["VitalsTemperature.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Typography } from '@mui/material';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { convertTemperature } from 'utils';\nimport { getQuestionnaireResponseByLinkId } from 'utils';\nimport { getSelectors } from '../../../../../../shared/store/getSelectors';\nimport { useDebounce } from '../../../../../hooks';\nimport { useAppointmentStore, useUpdatePaperwork } from '../../../../../state';\nimport { updateQuestionnaireResponse } from '../../../../../utils';\nimport { NumberInput } from '../NumberInput';\n\ntype VitalsTemperatureProps = {\n  validate: (value: string) => string | undefined;\n};\n\nexport const VitalsTemperature: FC<VitalsTemperatureProps> = (props) => {\n  const { validate } = props;\n\n  const { appointment, questionnaireResponse } = getSelectors(useAppointmentStore, [\n    'appointment',\n    'questionnaireResponse',\n  ]);\n  const defaultValue = getQuestionnaireResponseByLinkId('vitals-temperature', questionnaireResponse)?.answer?.[0]\n    .valueString;\n  const { control, handleSubmit, watch, setValue, getValues } = useForm<{\n    'vitals-temperature': string;\n  }>({\n    defaultValues: {\n      'vitals-temperature': (defaultValue === 'N/A' ? '' : defaultValue) || '',\n    },\n  });\n  const { mutate } = useUpdatePaperwork();\n  const { debounce, clear } = useDebounce(1000);\n  const [f, setF] = useState(convertTemperature(getValues('vitals-temperature'), 'fahrenheit'));\n\n  const onSubmit = useCallback(\n    (value: { 'vitals-temperature': string }): void => {\n      debounce(() => {\n        mutate(\n          {\n            appointmentID: appointment!.id!,\n            paperwork: {\n              'vitals-temperature': value['vitals-temperature'] || 'N/A',\n            },\n          },\n          {\n            onSuccess: () => {\n              updateQuestionnaireResponse(\n                questionnaireResponse,\n                'vitals-temperature',\n                value['vitals-temperature'] || 'N/A'\n              );\n            },\n          }\n        );\n      });\n    },\n    [debounce, mutate, appointment, questionnaireResponse]\n  );\n\n  useEffect(() => {\n    const subscription = watch(() => handleSubmit(onSubmit)());\n    return () => subscription.unsubscribe();\n  }, [handleSubmit, watch, onSubmit]);\n\n  return (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1.5 }}>\n      <Controller\n        name=\"vitals-temperature\"\n        control={control}\n        rules={{\n          validate: (value) => {\n            const result = validate(value);\n            if (result) {\n              clear();\n              return result;\n            }\n            return;\n          },\n        }}\n        render={({ field: { value, onChange }, fieldState: { error } }) => (\n          <NumberInput\n            helperText={error ? error.message : null}\n            error={!!error}\n            label=\"Temp, C\"\n            value={value}\n            onChange={(e) => {\n              onChange(e);\n              setF(convertTemperature(e.target.value, 'fahrenheit'));\n            }}\n          />\n        )}\n      />\n      <Typography>/</Typography>\n      <NumberInput\n        label=\"Temp, F\"\n        value={f}\n        onChange={(e) => {\n          setF(e.target.value);\n          setValue('vitals-temperature', convertTemperature(e.target.value, 'celsius'));\n        }}\n      />\n    </Box>\n  );\n};\n"]}