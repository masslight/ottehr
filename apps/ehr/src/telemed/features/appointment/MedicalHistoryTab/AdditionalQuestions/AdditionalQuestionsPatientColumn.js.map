{"version":3,"file":"AdditionalQuestionsPatientColumn.js","sourceRoot":"","sources":["AdditionalQuestionsPatientColumn.tsx"],"names":[],"mappings":";;;AAAA,0CAA6C;AAC7C,+BAAkC;AAClC,+BAA2E;AAC3E,sDAAgE;AAChE,yEAAwE;AACxE,2CAAwD;AACxD,4CAAuD;AAEhD,IAAM,gCAAgC,GAAO;IAC5C,IAAA,KAAkD,IAAA,2BAAY,EAAC,2BAAmB,EAAE;QACxF,uBAAuB;QACvB,sBAAsB;KACvB,CAAC,EAHM,qBAAqB,2BAAA,EAAE,oBAAoB,0BAGjD,CAAC;IAEH,OAAO,CACL,CAAC,cAAG,CACF,EAAE,CAAC,CAAC;YACF,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,QAAQ;YACvB,GAAG,EAAE,CAAC;SACP,CAAC,CAEF;MAAA,CAAC,gCAAoB,CAAC,GAAG,CAAC,UAAC,QAAQ,EAAE,KAAK;;YACxC,IAAM,KAAK,GAAG,MAAA,MAAA,MAAA,IAAA,wCAAgC,EAAC,QAAQ,CAAC,KAAK,EAAE,qBAAqB,CAAC,0CAAE,MAAM,0CAAG,CAAC,CAAC,0CAAE,WAAW,CAAC;YAEhH,OAAO,CACL,CAAC,eAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAClC;YAAA,CAAC,mCAAsB,CACrB,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CACtB,KAAK,CAAC,CAAC,IAAA,wBAAgB,EAAC,KAAK,CAAC,CAAC,CAC/B,SAAS,CAAC,CAAC,oBAAoB,CAAC,CAChC,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAExB;YAAA,CAAC,KAAK,GAAG,gCAAoB,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,kBAAO,CAAC,AAAD,EAAG,CACzD;UAAA,EAAE,eAAK,CAAC,QAAQ,CAAC,CAClB,CAAC;QACJ,CAAC,CAAC,CACJ;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AA/BW,QAAA,gCAAgC,oCA+B3C","sourcesContent":["import { Box, Divider } from '@mui/material';\nimport React, { FC } from 'react';\nimport { convertToBoolean, getQuestionnaireResponseByLinkId } from 'utils';\nimport { ADDITIONAL_QUESTIONS } from '../../../../../constants';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../../state';\nimport { AdditionalQuestionView } from '../components';\n\nexport const AdditionalQuestionsPatientColumn: FC = () => {\n  const { questionnaireResponse, isAppointmentLoading } = getSelectors(useAppointmentStore, [\n    'questionnaireResponse',\n    'isAppointmentLoading',\n  ]);\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 1,\n      }}\n    >\n      {ADDITIONAL_QUESTIONS.map((question, index) => {\n        const value = getQuestionnaireResponseByLinkId(question.field, questionnaireResponse)?.answer?.[0]?.valueString;\n\n        return (\n          <React.Fragment key={question.field}>\n            <AdditionalQuestionView\n              label={question.label}\n              value={convertToBoolean(value)}\n              isLoading={isAppointmentLoading}\n              field={question.field}\n            />\n            {index < ADDITIONAL_QUESTIONS.length - 1 && <Divider />}\n          </React.Fragment>\n        );\n      })}\n    </Box>\n  );\n};\n"]}