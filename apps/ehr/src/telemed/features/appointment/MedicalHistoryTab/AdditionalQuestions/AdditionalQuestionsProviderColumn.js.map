{"version":3,"file":"AdditionalQuestionsProviderColumn.js","sourceRoot":"","sources":["AdditionalQuestionsProviderColumn.tsx"],"names":[],"mappings":";;;AAAA,0CAAkE;AAClE,+BAAkC;AAElC,sDAAgE;AAChE,yEAAwE;AACxE,2CAAmE;AACnE,2CAAwD;AACxD,4CAA+E;AAExE,IAAM,iCAAiC,GAAO;IAC7C,IAAA,KAAoC,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,WAAW,EAAE,oBAAoB,CAAC,CAAC,EAAxG,SAAS,eAAA,EAAE,kBAAkB,wBAA2E,CAAC;IACzG,IAAuB,UAAU,GAAK,IAAA,sCAA8B,GAAE,sBAArC,CAAsC;IAE/E,OAAO,CACL,CAAC,cAAG,CACF,EAAE,CAAC,CAAC;YACF,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,QAAQ;YACvB,GAAG,EAAE,CAAC;SACP,CAAC,CAEF;MAAA,CAAC,gCAAoB,CAAC,GAAG,CAAC,UAAC,QAAQ,EAAE,KAAK;;YACxC,IAAM,KAAK,GAAG,MACZ,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,YAAY,0CAAE,IAAI,CAC3B,UAAC,WAAW,IAAK,OAAA,WAAW,CAAC,KAAK,KAAK,QAAQ,CAAC,KAAK,EAApC,CAAoC,CAExD,0CAAE,KAAK,CAAC;YACT,OAAO,CACL,CAAC,eAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAClC;YAAA,CAAC,UAAU,CAAC,CAAC,CAAC,CACZ,CAAC,mCAAsB,CACrB,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CACtB,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,SAAS,CAAC,CAAC,kBAAkB,CAAC,CAC9B,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EACtB,CACH,CAAC,CAAC,CAAC,CACF,CAAC,mCAAsB,CACrB,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CACtB,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CACtB,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,kBAAkB,CAAC,CAAC,kBAAkB,CAAC,EACvC,CACH,CACD;YAAA,CAAC,KAAK,GAAG,gCAAoB,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,kBAAO,CAAC,AAAD,EAAG,CACzD;UAAA,EAAE,eAAK,CAAC,QAAQ,CAAC,CAClB,CAAC;QACJ,CAAC,CAAC,CACJ;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAzCW,QAAA,iCAAiC,qCAyC5C;AAEK,IAAM,yCAAyC,GAAO;IAC3D,OAAO,CACL,CAAC,mBAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CACtC;MAAA,CAAC,oBAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAC/B;IAAA,EAAE,mBAAQ,CAAC,CACZ,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,yCAAyC,6CAMpD","sourcesContent":["import { Box, Divider, Skeleton, TextField } from '@mui/material';\nimport React, { FC } from 'react';\nimport { ObservationBooleanFieldDTO } from 'utils';\nimport { ADDITIONAL_QUESTIONS } from '../../../../../constants';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useGetAppointmentAccessibility } from '../../../../hooks';\nimport { useAppointmentStore } from '../../../../state';\nimport { AdditionalQuestionEdit, AdditionalQuestionView } from '../components';\n\nexport const AdditionalQuestionsProviderColumn: FC = () => {\n  const { chartData, isChartDataLoading } = getSelectors(useAppointmentStore, ['chartData', 'isChartDataLoading']);\n  const { isAppointmentReadOnly: isReadOnly } = useGetAppointmentAccessibility();\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 1,\n      }}\n    >\n      {ADDITIONAL_QUESTIONS.map((question, index) => {\n        const value = (\n          chartData?.observations?.find(\n            (observation) => observation.field === question.field\n          ) as ObservationBooleanFieldDTO\n        )?.value;\n        return (\n          <React.Fragment key={question.field}>\n            {isReadOnly ? (\n              <AdditionalQuestionView\n                label={question.label}\n                value={value}\n                isLoading={isChartDataLoading}\n                field={question.field}\n              />\n            ) : (\n              <AdditionalQuestionEdit\n                label={question.label}\n                field={question.field}\n                value={value}\n                isChartDataLoading={isChartDataLoading}\n              />\n            )}\n            {index < ADDITIONAL_QUESTIONS.length - 1 && <Divider />}\n          </React.Fragment>\n        );\n      })}\n    </Box>\n  );\n};\n\nexport const AdditionalQuestionsProviderColumnSkeleton: FC = () => {\n  return (\n    <Skeleton variant=\"rounded\" width=\"100%\">\n      <TextField multiline rows={3} />\n    </Skeleton>\n  );\n};\n"]}