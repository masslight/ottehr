{"version":3,"file":"CurrentMedicationsPatientColumn.js","sourceRoot":"","sources":["CurrentMedicationsPatientColumn.tsx"],"names":[],"mappings":";;;AAAA,0CAAmE;AACnE,+BAAkC;AAClC,+BAAsG;AACtG,uEAAkE;AAClE,wEAAqE;AACrE,yEAAwE;AACxE,2CAAwD;AACxD,sEAAqE;AAE9D,IAAM,+BAA+B,GAAO;;IACjD,IAAM,KAAK,GAAG,IAAA,mBAAQ,GAAE,CAAC;IAEnB,IAAA,KAA6D,IAAA,2BAAY,EAAC,2BAAmB,EAAE;QACnG,uBAAuB;QACvB,sBAAsB;QACtB,WAAW;KACZ,CAAC,EAJM,qBAAqB,2BAAA,EAAE,oBAAoB,0BAAA,EAAE,SAAS,eAI5D,CAAC;IACH,IAAM,kBAAkB,GAAG,MAAA,MAAA,IAAA,wCAAgC,EAAC,qBAAqB,EAAE,qBAAqB,CAAC,0CAAE,MAAM,0CAAG,CAAC,EAClH,UAAU,CAAC;IAEd,IAAM,oBAAoB,GAAG,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,YAAY,0CAAE,IAAI,CACxD,UAAC,WAAW,IAAK,OAAA,WAAW,CAAC,KAAK,KAAK,0BAAkB,CAAC,kBAAkB,EAA3D,CAA2D,CAClD,CAAC;IAE7B,OAAO,CACL,CAAC,cAAG,CACF,EAAE,CAAC,CAAC;YACF,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,QAAQ;YACvB,GAAG,EAAE,CAAC;SACP,CAAC,CACF,WAAW,CAAC,CAAC,2BAAW,CAAC,cAAc,CAAC,wCAAwC,CAAC,CAEjF;MAAA,CAAC,oBAAoB,CAAC,CAAC,CAAC,CACtB,CAAC,iDAAuB,CAAC,AAAD,EAAG,CAC5B,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CACvB,kBAAkB,CAAC,GAAG,CAAC,UAAC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAK,OAAA,CAC7C,CAAC,cAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CACd;YAAA,CAAC,qBAAU,CAAC,CAAC,MAAM,CAAC,qCAAqC,CAAC,CAAC,EAAE,qBAAU,CACvE;YAAA,CAAC,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,MAAM,IAAI,CAAC,kBAAO,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAG,CACzD;UAAA,EAAE,cAAG,CAAC,CACP,EAL8C,CAK9C,CAAC,CACH,CAAC,CAAC,CAAC,CACF,CAAC,qBAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,kCAAkC,EAAE,qBAAU,CAAC,CACjG,CACD;MAAA,CAAC,oBAAoB,CAAC,CAAC,CAAC,CACtB,EACE;UAAA,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,qBAAqB,EAAE,MAAM,EAAE,iBAAiB,EAAE,CAAC,EACxE;UAAA,CAAC,sBAAY,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAC1E;QAAA,GAAG,CACJ,CAAC,CAAC,CAAC,SAAS,CACf;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AA5CW,QAAA,+BAA+B,mCA4C1C","sourcesContent":["import { Box, Divider, Typography, useTheme } from '@mui/material';\nimport React, { FC } from 'react';\nimport { AiObservationField, getQuestionnaireResponseByLinkId, ObservationTextFieldDTO } from 'utils';\nimport AiSuggestion from '../../../../../components/AiSuggestion';\nimport { dataTestIds } from '../../../../../constants/data-test-ids';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../../state';\nimport { PatientSideListSkeleton } from '../PatientSideListSkeleton';\n\nexport const CurrentMedicationsPatientColumn: FC = () => {\n  const theme = useTheme();\n\n  const { questionnaireResponse, isAppointmentLoading, chartData } = getSelectors(useAppointmentStore, [\n    'questionnaireResponse',\n    'isAppointmentLoading',\n    'chartData',\n  ]);\n  const currentMedications = getQuestionnaireResponseByLinkId('current-medications', questionnaireResponse)?.answer?.[0]\n    .valueArray;\n\n  const aiMedicationsHistory = chartData?.observations?.find(\n    (observation) => observation.field === AiObservationField.MedicationsHistory\n  ) as ObservationTextFieldDTO;\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 1,\n      }}\n      data-testid={dataTestIds.telemedEhrFlow.hpiCurrentMedicationsPatientProvidedList}\n    >\n      {isAppointmentLoading ? (\n        <PatientSideListSkeleton />\n      ) : currentMedications ? (\n        currentMedications.map((answer, index, arr) => (\n          <Box key={index}>\n            <Typography>{answer['current-medications-form-medication']}</Typography>\n            {index + 1 !== arr.length && <Divider sx={{ pt: 1 }} />}\n          </Box>\n        ))\n      ) : (\n        <Typography color={theme.palette.text.secondary}>Patient has no current medications</Typography>\n      )}\n      {aiMedicationsHistory ? (\n        <>\n          <hr style={{ border: '0.5px solid #DFE5E9', margin: '0 -16px 0 -16px' }} />\n          <AiSuggestion title={'Medications'} content={aiMedicationsHistory.value} />\n        </>\n      ) : undefined}\n    </Box>\n  );\n};\n"]}