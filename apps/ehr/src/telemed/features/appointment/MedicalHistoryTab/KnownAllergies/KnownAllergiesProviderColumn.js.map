{"version":3,"file":"KnownAllergiesProviderColumn.js","sourceRoot":"","sources":["KnownAllergiesProviderColumn.tsx"],"names":[],"mappings":"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","sourcesContent":["import { otherColors } from '@ehrTheme/colors';\nimport {\n  Autocomplete,\n  Box,\n  Card,\n  CircularProgress,\n  debounce,\n  Divider,\n  FormControlLabel,\n  Stack,\n  Switch,\n  TextField,\n  Typography,\n} from '@mui/material';\nimport { ErxSearchAllergensResponse } from '@oystehr/sdk';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { FC, useMemo, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { RoundedButton } from 'src/components/RoundedButton';\nimport { AllergyDTO } from 'utils';\nimport { dataTestIds } from '../../../../../constants/data-test-ids';\nimport { useFeatureFlags } from '../../../../../features/css-module/context/featureFlags';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { DeleteIconButton } from '../../../../components';\nimport { useGetAppointmentAccessibility } from '../../../../hooks';\nimport {\n  ExtractObjectType,\n  useAppointmentStore,\n  useDeleteChartData,\n  useGetAllergiesSearch,\n  useSaveChartData,\n} from '../../../../state';\nimport { ProviderSideListSkeleton } from '../ProviderSideListSkeleton';\n\nexport const KnownAllergiesProviderColumn: FC = () => {\n  const { chartData, isChartDataLoading } = getSelectors(useAppointmentStore, ['chartData', 'isChartDataLoading']);\n  const { isAppointmentReadOnly: isReadOnly } = useGetAppointmentAccessibility();\n  const featureFlags = useFeatureFlags();\n\n  const allergies = chartData?.allergies || [];\n  const length = allergies.length;\n\n  return (\n    <Box\n      sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}\n      data-testid={dataTestIds.telemedEhrFlow.hpiKnownAllergiesColumn}\n    >\n      {isChartDataLoading && <ProviderSideListSkeleton />}\n\n      {length > 0 && !isChartDataLoading && (\n        <Box\n          sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n          data-testid={dataTestIds.telemedEhrFlow.hpiKnownAllergiesList}\n        >\n          {allergies.map((value, index) => (\n            <AllergyListItem key={value.resourceId || `new${index}`} value={value} index={index} length={length} />\n          ))}\n        </Box>\n      )}\n\n      {allergies.length === 0 && isReadOnly && !isChartDataLoading && !featureFlags.css && (\n        <Typography color=\"secondary.light\">Missing. Patient input must be reconciled by provider</Typography>\n      )}\n\n      {!isReadOnly && <AddAllergyField />}\n    </Box>\n  );\n};\n\nconst setUpdatedAllergy = (updatedAllergy?: AllergyDTO): void => {\n  if (updatedAllergy) {\n    useAppointmentStore.setState((prevState) => ({\n      chartData: {\n        ...prevState.chartData!,\n        allergies: prevState.chartData?.allergies?.map((allergy) =>\n          allergy.resourceId === updatedAllergy.resourceId ? updatedAllergy : allergy\n        ),\n      },\n    }));\n  }\n};\n\nconst AllergyListItem: FC<{ value: AllergyDTO; index: number; length: number }> = ({ value, index, length }) => {\n  const [note, setNote] = useState(value.note || '');\n  const areNotesEqual = note.trim() === (value.note || '');\n\n  const featureFlags = useFeatureFlags();\n  const { isAppointmentReadOnly: isReadOnly } = useGetAppointmentAccessibility();\n\n  const { mutate: updateChartData, isLoading: isUpdateLoading } = useSaveChartData();\n  const { mutate: deleteChartData, isLoading: isDeleteLoading } = useDeleteChartData();\n  const isLoading = isUpdateLoading || isDeleteLoading;\n  const isLoadingOrAwaiting = isLoading || !areNotesEqual;\n  const isAlreadySaved = !!value.resourceId;\n\n  const updateNote = useMemo(\n    () =>\n      debounce((input: string) => {\n        updateChartData(\n          {\n            allergies: [{ ...value, note: input.trim() || undefined }],\n          },\n          {\n            onSuccess: (data) => {\n              const updatedAllergy = data.chartData.allergies?.[0];\n              setUpdatedAllergy(updatedAllergy);\n            },\n            onError: () => {\n              enqueueSnackbar('An error has occurred while updating allergy note. Please try again.', {\n                variant: 'error',\n              });\n            },\n          }\n        );\n      }, 1500),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [value.current]\n  );\n\n  const updateCurrent = (newCurrentValue: boolean): void => {\n    updateChartData(\n      {\n        allergies: [{ ...value, current: newCurrentValue, note: newCurrentValue ? undefined : value.note }],\n      },\n      {\n        onSuccess: (data) => {\n          if (newCurrentValue) {\n            setNote('');\n          }\n          const updatedAllergy = data.chartData.allergies?.[0];\n          setUpdatedAllergy(updatedAllergy);\n        },\n        onError: () => {\n          enqueueSnackbar('An error has occurred while updating allergy status. Please try again.', {\n            variant: 'error',\n          });\n        },\n      }\n    );\n  };\n\n  const deleteAllergy = (): void => {\n    deleteChartData(\n      {\n        allergies: [value],\n      },\n      {\n        onSuccess: () => {\n          useAppointmentStore.setState((prevState) => ({\n            chartData: {\n              ...prevState.chartData!,\n              allergies: prevState.chartData?.allergies?.filter((allergy) => allergy.resourceId !== value.resourceId),\n            },\n          }));\n        },\n        onError: () => {\n          enqueueSnackbar('An error has occurred while deleting allergy. Please try again.', {\n            variant: 'error',\n          });\n        },\n      }\n    );\n  };\n\n  return (\n    <Box\n      sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n      data-testid={dataTestIds.telemedEhrFlow.hpiKnownAllergiesListItem}\n    >\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n        <Typography\n          sx={{\n            color: (theme) => (!value.current && featureFlags.css ? theme.palette.text.secondary : undefined),\n          }}\n        >\n          {value.name}\n          {featureFlags.css &&\n            isReadOnly &&\n            ` | ${value.current ? 'Current' : 'Inactive now'}${value.note ? ' | Note: ' + value.note : ''}`}\n        </Typography>\n\n        {!isReadOnly && (\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n            {featureFlags.css && (\n              <FormControlLabel\n                control={<Switch checked={value.current} onChange={(e) => updateCurrent(e.target.checked)} />}\n                label={value.current ? 'Current' : 'Inactive now'}\n                disabled={isLoadingOrAwaiting || !isAlreadySaved}\n                labelPlacement=\"start\"\n                sx={{\n                  '& .MuiFormControlLabel-label': {\n                    marginRight: 1,\n                    textAlign: 'right',\n                    color: (theme) => (!value.current ? theme.palette.text.secondary : undefined),\n                  },\n                }}\n              />\n            )}\n            <DeleteIconButton disabled={isLoadingOrAwaiting || !isAlreadySaved} onClick={deleteAllergy} />\n          </Box>\n        )}\n      </Box>\n\n      {!value.current && !isReadOnly && featureFlags.css && (\n        <TextField\n          value={note}\n          onChange={(e) => {\n            setNote(e.target.value);\n            updateNote(e.target.value);\n          }}\n          disabled={(isLoading && areNotesEqual) || !isAlreadySaved}\n          size=\"small\"\n          fullWidth\n          label=\"Notes for inactive allergy\"\n          InputProps={{\n            endAdornment: !areNotesEqual && (\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                <CircularProgress size=\"20px\" />\n              </Box>\n            ),\n          }}\n        />\n      )}\n\n      {index + 1 !== length && <Divider />}\n    </Box>\n  );\n};\n\nconst AddAllergyField: FC = () => {\n  const { isChartDataLoading } = getSelectors(useAppointmentStore, ['isChartDataLoading']);\n  const { mutate: updateChartData, isLoading: isUpdateLoading } = useSaveChartData();\n\n  const methods = useForm<{ value: ExtractObjectType<ErxSearchAllergensResponse> | null; otherAllergyName: string }>({\n    defaultValues: { value: null, otherAllergyName: '' },\n  });\n  const { control, reset, handleSubmit } = methods;\n\n  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState('');\n  const [isOtherOptionSelected, setIsOtherOptionSelected] = useState(false);\n\n  const { isFetching: isSearching, data } = useGetAllergiesSearch(debouncedSearchTerm);\n  const allergiesSearchOptions = useMemo(\n    () =>\n      data && !isSearching\n        ? [...(data || []), { name: 'Other' } as unknown as ExtractObjectType<ErxSearchAllergensResponse>]\n        : [],\n    [data, isSearching]\n  );\n\n  const debouncedHandleInputChange = useMemo(\n    () =>\n      debounce((data) => {\n        if (data.length > 2) {\n          setDebouncedSearchTerm(data);\n        }\n      }, 800),\n    []\n  );\n\n  const handleSelectOption = (data: ExtractObjectType<ErxSearchAllergensResponse> | null): void => {\n    if (data) {\n      const newValue = {\n        name: data.name,\n        id: data.id?.toString(),\n        current: true,\n      };\n      useAppointmentStore.setState((prevState) => ({\n        chartData: {\n          ...prevState.chartData!,\n          allergies: [...(prevState.chartData?.allergies || []), newValue],\n        },\n      }));\n      reset({ value: null, otherAllergyName: '' });\n      setIsOtherOptionSelected(false);\n\n      updateChartData(\n        { allergies: [newValue] },\n        {\n          onSuccess: (data) => {\n            const updatedAllergy = data.chartData.allergies?.[0];\n            if (updatedAllergy) {\n              useAppointmentStore.setState((prevState) => ({\n                chartData: {\n                  ...prevState.chartData!,\n                  allergies: prevState.chartData?.allergies?.map((allergy) =>\n                    allergy.id === updatedAllergy.id && !allergy.resourceId ? updatedAllergy : allergy\n                  ),\n                },\n              }));\n            }\n          },\n          onError: () => {\n            useAppointmentStore.setState((prevState) => ({\n              chartData: {\n                ...prevState.chartData!,\n                allergies: prevState.chartData?.allergies?.filter((allergy) => allergy.resourceId),\n              },\n            }));\n            enqueueSnackbar('An error has occurred while adding allergy. Please try again.', {\n              variant: 'error',\n            });\n          },\n        }\n      );\n    }\n  };\n\n  const onSubmit = (data: {\n    value: ExtractObjectType<ErxSearchAllergensResponse> | null;\n    otherAllergyName: string;\n  }): void => {\n    if (data.value) {\n      handleSelectOption({\n        ...data.value,\n        name: 'Other' + (data.otherAllergyName ? ` (${data.otherAllergyName})` : ''),\n      });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Card\n        elevation={0}\n        sx={{\n          p: 3,\n          backgroundColor: otherColors.formCardBg,\n          borderRadius: 2,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2,\n        }}\n      >\n        <Controller\n          name=\"value\"\n          control={control}\n          rules={{ required: true }}\n          render={({ field: { value, onChange } }) => (\n            <Autocomplete\n              value={value || null}\n              onChange={(_e, data) => {\n                onChange((data || '') as any);\n                if (data?.name === 'Other') {\n                  setIsOtherOptionSelected(true);\n                } else {\n                  setIsOtherOptionSelected(false);\n                  handleSelectOption(data);\n                }\n              }}\n              getOptionLabel={(option) => (typeof option === 'string' ? option : option.name || '')}\n              fullWidth\n              size=\"small\"\n              loading={isSearching}\n              filterOptions={(options) => options}\n              isOptionEqualToValue={(option, value) => option.name === value.name}\n              disablePortal\n              blurOnSelect\n              disabled={isChartDataLoading || isUpdateLoading}\n              options={allergiesSearchOptions}\n              noOptionsText={\n                debouncedSearchTerm && debouncedSearchTerm.length > 2 && allergiesSearchOptions.length === 0\n                  ? 'Nothing found for this search criteria'\n                  : 'Start typing to load results'\n              }\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  onChange={(e) => debouncedHandleInputChange(e.target.value)}\n                  data-testid={dataTestIds.telemedEhrFlow.hpiKnownAllergiesInput}\n                  label=\"Agent/Substance\"\n                  placeholder=\"Search\"\n                  InputLabelProps={{ shrink: true }}\n                  sx={{\n                    '& .MuiInputLabel-root': {\n                      fontWeight: 'bold',\n                    },\n                  }}\n                />\n              )}\n            />\n          )}\n        />\n        {isOtherOptionSelected && (\n          <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n            <Controller\n              name=\"otherAllergyName\"\n              control={control}\n              render={({ field: { value, onChange } }) => (\n                <TextField\n                  value={value || ''}\n                  onChange={(e) => onChange(e.target.value)}\n                  label=\"Other allergy\"\n                  placeholder=\"Please specify\"\n                  fullWidth\n                  size=\"small\"\n                />\n              )}\n            />\n            <RoundedButton type=\"submit\">Add</RoundedButton>\n          </Stack>\n        )}\n      </Card>\n    </form>\n  );\n};\n"]}