{"version":3,"file":"SurgicalHistoryProviderColumn.js","sourceRoot":"","sources":["SurgicalHistoryProviderColumn.tsx"],"names":[],"mappings":";;;AAAA,0CAAgD;AAEhD,wEAAqE;AACrE,wFAA0F;AAC1F,yEAAwE;AACxE,qDAAqD;AACrD,2CAAmE;AACnE,2CAAwD;AACxD,mDAAkD;AAClD,6DAAyF;AAElF,IAAM,6BAA6B,GAAO;IACzC,IAAA,KAAoC,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC,EAAxG,kBAAkB,wBAAA,EAAE,SAAS,eAA2E,CAAC;IAEjH,IAAM,UAAU,GAAG,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,eAAe,KAAI,EAAE,CAAC;IAEpD,IAAM,oBAAoB,GAAG,IAAA,8BAAe,GAAE,CAAC;IAEvC,IAAuB,UAAU,GAAK,IAAA,sCAA8B,GAAE,sBAArC,CAAsC;IAE/E,OAAO,CACL,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAC5D;MAAA,CAAC,UAAU,CAAC,CAAC,CAAC,CACZ,EACE;UAAA,CAAC,wBAAW,CACV,IAAI,CAAC,CAAC,UAAU,CAAC,CACjB,MAAM,CAAC,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,UAAW,EAAjB,CAAiB,CAAC,CACrC,UAAU,CAAC,CAAC,UAAC,KAAK,IAAK,OAAA,CACrB,CAAC,qBAAU,CACT;gBAAA,CAAC,KAAK,CAAC,IAAI,CAAE,CAAA,CAAC,KAAK,CAAC,OAAO,CAC7B;cAAA,EAAE,qBAAU,CAAC,CACd,EAJsB,CAItB,CAAC,CACF,OAAO,EAET;UAAA,CAAC,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC,yCAAmB,CAAC,AAAD,EAAG,CACvD;QAAA,GAAG,CACJ,CAAC,CAAC,CAAC,CACF,CAAC,cAAG,CACF,WAAW,CAAC,CAAC,2BAAW,CAAC,cAAc,CAAC,wBAAwB,CAAC,CACjE,EAAE,CAAC,CAAC;gBACF,OAAO,EAAE,MAAM;gBACf,aAAa,EAAE,QAAQ;gBACvB,GAAG,EAAE,CAAC;aACP,CAAC,CAEF;UAAA,CAAC,+BAAc,CAAC,AAAD,EACf;UAAA,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,iDAA2B,CAAC,AAAD,EAAG,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,GAAG,IAAI,CAAC,yCAAmB,CAAC,AAAD,EAAG,CAC9G;QAAA,EAAE,cAAG,CAAC,CACP,CACH;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AAxCW,QAAA,6BAA6B,iCAwCxC","sourcesContent":["import { Box, Typography } from '@mui/material';\nimport { FC } from 'react';\nimport { dataTestIds } from '../../../../../constants/data-test-ids';\nimport { useFeatureFlags } from '../../../../../features/css-module/context/featureFlags';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { ActionsList } from '../../../../components';\nimport { useGetAppointmentAccessibility } from '../../../../hooks';\nimport { useAppointmentStore } from '../../../../state';\nimport { ProceduresForm } from './ProceduresForm';\nimport { ProceduresNoteField, ProceduresNoteFieldSkeleton } from './ProceduresNoteField';\n\nexport const SurgicalHistoryProviderColumn: FC = () => {\n  const { isChartDataLoading, chartData } = getSelectors(useAppointmentStore, ['isChartDataLoading', 'chartData']);\n\n  const procedures = chartData?.surgicalHistory || [];\n\n  const cssColumnFeatureFlag = useFeatureFlags();\n\n  const { isAppointmentReadOnly: isReadOnly } = useGetAppointmentAccessibility();\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n      {isReadOnly ? (\n        <>\n          <ActionsList\n            data={procedures}\n            getKey={(value) => value.resourceId!}\n            renderItem={(value) => (\n              <Typography>\n                {value.code} {value.display}\n              </Typography>\n            )}\n            divider\n          />\n          {!cssColumnFeatureFlag.css && <ProceduresNoteField />}\n        </>\n      ) : (\n        <Box\n          data-testid={dataTestIds.telemedEhrFlow.hpiSurgicalHistoryColumn}\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 2,\n          }}\n        >\n          <ProceduresForm />\n          {isChartDataLoading ? <ProceduresNoteFieldSkeleton /> : !cssColumnFeatureFlag.css && <ProceduresNoteField />}\n        </Box>\n      )}\n    </Box>\n  );\n};\n"]}