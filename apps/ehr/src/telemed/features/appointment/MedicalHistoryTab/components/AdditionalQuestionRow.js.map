{"version":3,"file":"AdditionalQuestionRow.js","sourceRoot":"","sources":["AdditionalQuestionRow.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, FormControl, FormControlLabel, Radio, RadioGroup, Skeleton, Typography } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport { FC, useEffect } from 'react';\nimport { AdditionalBooleanQuestionsFieldsNames, convertToBoolean, ObservationBooleanFieldDTO } from 'utils';\nimport { dataTestIds } from '../../../../../constants/data-test-ids';\nimport { setNavigationDisable } from '../../../../../features/css-module/context/NavigationContext';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useAppointmentStore, useSaveChartData } from '../../../../state';\n\nexport const AdditionalQuestionEdit = ({\n  label,\n  field,\n  value,\n  isChartDataLoading,\n}: {\n  label: string;\n  field: AdditionalBooleanQuestionsFieldsNames;\n  value?: boolean;\n  isChartDataLoading?: boolean;\n}): JSX.Element => {\n  const { chartData, updateObservation } = getSelectors(useAppointmentStore, ['chartData', 'updateObservation']);\n\n  const { mutate, isLoading } = useSaveChartData();\n  const normalizedValue = value !== undefined ? String(value) : '';\n\n  useEffect(() => {\n    setNavigationDisable({ [`additional-question-${label}`]: isLoading });\n  }, [isLoading, label]);\n\n  const onChange = (value: string, field: AdditionalBooleanQuestionsFieldsNames): void => {\n    const currentObservation = chartData?.observations?.find((observation) => observation.field === field);\n\n    const newValue = convertToBoolean(value);\n\n    if (currentObservation?.value === newValue) return;\n\n    const updatedObservation: ObservationBooleanFieldDTO = currentObservation\n      ? { ...currentObservation, value: newValue }\n      : { field, value: newValue };\n\n    mutate(\n      {\n        observations: [updatedObservation],\n      },\n      {\n        onSuccess: (data) => {\n          if (!data.chartData.observations) return;\n\n          const updatedObservation = data.chartData.observations[0];\n\n          if (!updatedObservation) return;\n\n          updateObservation(updatedObservation);\n        },\n        onError: () => {\n          enqueueSnackbar('An error has occurred while updating additional questions. Please try again.', {\n            variant: 'error',\n          });\n        },\n      }\n    );\n  };\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'space-between',\n      }}\n      data-testid={dataTestIds.telemedEhrFlow.hpiAdditionalQuestions(field)}\n    >\n      <Typography sx={{ flex: '0 1 calc(100% - 98px)' }}>{label}</Typography>\n      {isChartDataLoading ? (\n        <Skeleton variant=\"rectangular\" width={100} height={25} />\n      ) : (\n        <FormControl sx={{ flex: '0 0 88px' }}>\n          <RadioGroup\n            sx={{ flexDirection: 'row', flexWrap: 'nowrap' }}\n            name={field}\n            value={normalizedValue}\n            onChange={(e) => onChange(e.target.value, field)}\n          >\n            <FormControlLabel value=\"true\" control={<Radio disabled={isLoading} sx={{ p: 0 }} />} label=\"Yes\" />\n            <FormControlLabel\n              sx={{ mr: 0 }}\n              value=\"false\"\n              control={<Radio disabled={isLoading} sx={{ p: 0 }} />}\n              label=\"No\"\n            />\n          </RadioGroup>\n        </FormControl>\n      )}\n    </Box>\n  );\n};\n\nexport const AdditionalQuestionView: FC<{\n  label: string;\n  value: boolean | undefined;\n  isLoading: boolean;\n  field: AdditionalBooleanQuestionsFieldsNames;\n}> = ({ label, value, isLoading, field }) => (\n  <Box\n    sx={{\n      display: 'flex',\n      justifyContent: 'space-between',\n    }}\n    data-testid={dataTestIds.telemedEhrFlow.hpiAdditionalQuestionsPatientProvided(field)}\n  >\n    <Typography>{label}</Typography>\n    {isLoading ? (\n      <Skeleton>\n        <Typography>Yes</Typography>\n      </Skeleton>\n    ) : (\n      <Typography>{value === true ? 'Yes' : value === false ? 'No' : ''}</Typography>\n    )}\n  </Box>\n);\n"]}