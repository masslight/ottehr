{"version":3,"file":"DispositionCard.js","sourceRoot":"","sources":["DispositionCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport {\n  Autocomplete,\n  Box,\n  Checkbox,\n  CircularProgress,\n  Divider,\n  FormControlLabel,\n  MenuItem,\n  Skeleton,\n  TextField,\n  ToggleButtonGroup,\n  Tooltip,\n  Typography,\n} from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { FC, useCallback, useEffect, useRef, useState } from 'react';\nimport { Controller, FormProvider, useForm, useWatch } from 'react-hook-form';\nimport {\n  dispositionCheckboxOptions,\n  DispositionType,\n  getDefaultNote,\n  mapDispositionTypeToLabel,\n  NOTHING_TO_EAT_OR_DRINK_FIELD,\n  NOTHING_TO_EAT_OR_DRINK_LABEL,\n} from 'utils';\nimport { RoundedButton } from '../../../../components/RoundedButton';\nimport { dataTestIds } from '../../../../constants/data-test-ids';\nimport { useChartData } from '../../../../features/css-module/hooks/useChartData';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { AccordionCard, ContainedPrimaryToggleButton, UppercaseCaptionTypography } from '../../../components';\nimport { useDebounce, useGetAppointmentAccessibility } from '../../../hooks';\nimport { useAppointmentStore, useSaveChartData } from '../../../state';\nimport {\n  DEFAULT_DISPOSITION_VALUES,\n  dispositionFieldsPerType,\n  DispositionFormValues,\n  followUpInOptions,\n  labServiceOptions,\n  mapDispositionToForm,\n  reasonsForTransferOptions,\n  SEND_OUT_VIRUS_TEST_LABEL,\n  virusTestsOptions,\n} from '../../../utils';\nimport { useDispositionMultipleNotes } from './useDispositionMultipleNotes';\n\nconst ERROR_TEXT = 'Disposition data update was unsuccessful, please change some disposition field data to try again.';\n\nexport const DispositionCard: FC = () => {\n  const { encounter, setPartialChartData } = getSelectors(useAppointmentStore, ['encounter', 'setPartialChartData']);\n  const { isAppointmentReadOnly: isReadOnly } = useGetAppointmentAccessibility();\n  const isResetting = useRef(false);\n  const latestRequestId = useRef(0);\n\n  const methods = useForm<DispositionFormValues>({\n    defaultValues: DEFAULT_DISPOSITION_VALUES,\n  });\n  const {\n    control,\n    handleSubmit,\n    watch,\n    getValues,\n    setValue,\n    reset,\n    formState: { isDirty },\n  } = methods;\n\n  const { chartData, isFetching: isChartDataLoading } = useChartData({\n    encounterId: encounter.id || '',\n    requestedFields: { disposition: {} },\n    onSuccess: (data) => {\n      setPartialChartData({ disposition: data?.disposition });\n      isResetting.current = true;\n      reset(data?.disposition ? mapDispositionToForm(data.disposition) : DEFAULT_DISPOSITION_VALUES);\n      setCurrentType(data?.disposition?.type || DEFAULT_DISPOSITION_VALUES.type);\n      if (data?.disposition?.note) {\n        setNoteCache(data.disposition.note);\n      }\n      isResetting.current = false;\n    },\n  });\n\n  const { setNoteCache, withNote } = useDispositionMultipleNotes({ methods, savedDisposition: chartData?.disposition });\n  const labServiceValue = useWatch({ control: methods.control, name: 'labService' });\n  const showVirusTest = labServiceValue?.includes?.(SEND_OUT_VIRUS_TEST_LABEL);\n  const { debounce } = useDebounce(1500);\n  const { mutate, isLoading } = useSaveChartData();\n  const [currentType, setCurrentType] = useState(getValues('type'));\n  const [isError, setIsError] = useState(false);\n\n  const onSubmit = useCallback(\n    (values: DispositionFormValues): void => {\n      setIsError(false);\n      const requestId = ++latestRequestId.current;\n      debounce(() => {\n        mutate(\n          { disposition: withNote(values) },\n          {\n            onSuccess: (data) => {\n              if (requestId === latestRequestId.current) {\n                const disposition = data.chartData?.disposition;\n                if (disposition) {\n                  setPartialChartData({ disposition });\n                  isResetting.current = true;\n                  reset(mapDispositionToForm(disposition));\n                  isResetting.current = false;\n                }\n              }\n            },\n            onError: () => {\n              if (requestId === latestRequestId.current) {\n                enqueueSnackbar(ERROR_TEXT, {\n                  variant: 'error',\n                });\n                setIsError(true);\n              }\n            },\n          }\n        );\n      });\n    },\n    [debounce, mutate, setPartialChartData, withNote, reset]\n  );\n\n  useEffect(() => {\n    const subscription = watch((data, { type }) => {\n      if (!isResetting.current && type === 'change') {\n        void handleSubmit(onSubmit)();\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, [handleSubmit, onSubmit, watch]);\n\n  const fields = dispositionFieldsPerType[currentType];\n  const tabs: DispositionType[] = ['pcp-no-type', 'another', 'ed', 'specialty'];\n\n  if (isChartDataLoading || !chartData?.disposition) {\n    return (\n      <AccordionCard label=\"Disposition\">\n        <Box sx={{ p: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>\n          <Skeleton variant=\"rounded\" height={36} />\n          <Skeleton variant=\"rounded\" height={36} />\n          <Skeleton variant=\"rounded\" height={36} />\n        </Box>\n      </AccordionCard>\n    );\n  }\n\n  return (\n    <AccordionCard\n      label=\"Disposition\"\n      headerItem={\n        isLoading || isDirty ? (\n          <CircularProgress size=\"20px\" />\n        ) : isError ? (\n          <Tooltip title={ERROR_TEXT}>\n            <ErrorOutlineIcon color=\"error\" />\n          </Tooltip>\n        ) : undefined\n      }\n    >\n      <FormProvider {...methods}>\n        <Box\n          sx={{ p: 2, display: 'flex', flexDirection: 'column', gap: 2 }}\n          data-testid={dataTestIds.telemedEhrFlow.planTabDispositionContainer}\n        >\n          <Controller\n            name=\"type\"\n            control={control}\n            render={({ field: { value, onChange } }) => (\n              <ToggleButtonGroup\n                size=\"small\"\n                fullWidth\n                exclusive\n                disabled={isReadOnly}\n                value={value}\n                onChange={(_, newValue) => {\n                  if (newValue) {\n                    setCurrentType(newValue);\n                    onChange(newValue);\n                  }\n                }}\n              >\n                {tabs.map((tab) => (\n                  <ContainedPrimaryToggleButton\n                    key={tab}\n                    value={tab}\n                    data-testid={dataTestIds.telemedEhrFlow.planTabDispositionToggleButton(tab)}\n                  >\n                    {mapDispositionTypeToLabel[tab]}\n                  </ContainedPrimaryToggleButton>\n                ))}\n              </ToggleButtonGroup>\n            )}\n          />\n\n          {fields.includes('labService') && (\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'row',\n                gap: 2,\n                '& .MuiAutocomplete-root': {\n                  maxWidth: '50%',\n                },\n              }}\n            >\n              <Controller\n                name=\"labService\"\n                control={control}\n                render={({ field: { onChange, value } }) => (\n                  <Autocomplete\n                    fullWidth\n                    multiple\n                    disabled={isReadOnly}\n                    options={labServiceOptions.map((option) => option.label)}\n                    renderInput={(params) => (\n                      <TextField {...params} size=\"small\" label=\"Lab services\" placeholder=\"Type or select\" />\n                    )}\n                    onChange={(_e, data) => {\n                      onChange(data);\n\n                      const selectedNotes = data\n                        .map(\n                          (selectedLabel) => labServiceOptions.find((option) => option.label === selectedLabel)?.note\n                        )\n                        .filter(Boolean);\n\n                      let noteText = getDefaultNote('ip-lab');\n\n                      if (selectedNotes.length > 0) {\n                        noteText += '\\n\\n' + selectedNotes.join('\\n\\n');\n                      }\n\n                      setValue('note', noteText);\n                      setNoteCache(noteText);\n\n                      // clear value of virusTest, if SEND_OUT_VIRUS_TEST_LABEL is not selected\n                      if (!data.includes(SEND_OUT_VIRUS_TEST_LABEL)) {\n                        setValue('virusTest', []);\n                      }\n                    }}\n                    value={Array.isArray(value) ? value : []}\n                  />\n                )}\n              />\n\n              {showVirusTest && (\n                <Controller\n                  name=\"virusTest\"\n                  control={control}\n                  render={({ field: { onChange, value } }) => (\n                    <Autocomplete\n                      fullWidth\n                      multiple\n                      disabled={isReadOnly}\n                      options={virusTestsOptions}\n                      renderInput={(params) => (\n                        <TextField {...params} size=\"small\" label=\"Virus tests\" placeholder=\"Type or select\" />\n                      )}\n                      onChange={(_e, data) => onChange(data)}\n                      value={Array.isArray(value) ? value : []}\n                    />\n                  )}\n                />\n              )}\n            </Box>\n          )}\n\n          {fields.includes('followUpIn') && (\n            <Controller\n              name=\"followUpIn\"\n              control={control}\n              render={({ field: { onChange, value } }) => (\n                <TextField\n                  select\n                  disabled={isReadOnly}\n                  label=\"Follow up visit in\"\n                  data-testid={dataTestIds.telemedEhrFlow.planTabDispositionFollowUpDropdown}\n                  size=\"small\"\n                  sx={{ minWidth: '200px', width: 'fit-content' }}\n                  value={value}\n                  onChange={onChange}\n                >\n                  <MenuItem value={''}>\n                    <em>None</em>\n                  </MenuItem>\n                  {followUpInOptions.map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              )}\n            />\n          )}\n\n          {fields.includes('reason') && (\n            <Controller\n              name=\"reason\"\n              control={control}\n              render={({ field: { onChange, value } }) => (\n                <TextField\n                  select\n                  disabled={isReadOnly}\n                  label=\"Reason for transfer\"\n                  placeholder=\"Select\"\n                  data-testid={dataTestIds.telemedEhrFlow.planTabDispositionReasonForTransferDropdown}\n                  size=\"small\"\n                  sx={{ minWidth: '200px', width: '50%' }}\n                  value={value}\n                  onChange={onChange}\n                >\n                  <MenuItem value={''}>\n                    <em>None</em>\n                  </MenuItem>\n                  {reasonsForTransferOptions.map((option) => (\n                    <MenuItem key={option} value={option}>\n                      {option}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              )}\n            />\n          )}\n\n          {isReadOnly ? (\n            getValues('note') ? (\n              <Typography>{getValues('note')}</Typography>\n            ) : (\n              <Typography color=\"secondary.light\">Note not provided</Typography>\n            )\n          ) : (\n            <Controller\n              name=\"note\"\n              control={control}\n              render={({ field: { value, onChange } }) => (\n                <TextField\n                  label=\"Note\"\n                  multiline\n                  fullWidth\n                  size=\"small\"\n                  data-testid={dataTestIds.telemedEhrFlow.planTabDispositionNote}\n                  value={value}\n                  onChange={(...args) => {\n                    setNoteCache(args[0].target.value);\n                    onChange(...args);\n                  }}\n                />\n              )}\n            />\n          )}\n\n          {fields.includes(NOTHING_TO_EAT_OR_DRINK_FIELD) && (\n            <FormControlLabel\n              label={NOTHING_TO_EAT_OR_DRINK_LABEL}\n              control={\n                <Controller\n                  name={NOTHING_TO_EAT_OR_DRINK_FIELD}\n                  control={control}\n                  render={({ field: { value, onChange } }) => (\n                    <Checkbox\n                      name={NOTHING_TO_EAT_OR_DRINK_FIELD}\n                      disabled={isReadOnly}\n                      checked={value}\n                      onChange={onChange}\n                    />\n                  )}\n                />\n              }\n            />\n          )}\n\n          {fields.includes('bookVisit') && (\n            <RoundedButton disabled={isReadOnly} to=\"/visits/add\" target=\"_blank\" variant=\"contained\">\n              Book a visit\n            </RoundedButton>\n          )}\n\n          {fields.includes('followUpType') && (\n            <>\n              <Divider />\n\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                <UppercaseCaptionTypography>Subspecialty Follow Up (optional)</UppercaseCaptionTypography>\n\n                <Box sx={{ display: 'flex', gap: 3 }}>\n                  {dispositionCheckboxOptions.map((option) => (\n                    <React.Fragment key={option.name}>\n                      {option.name !== 'other' && (\n                        <FormControlLabel\n                          control={\n                            <Controller\n                              name={option.name}\n                              control={control}\n                              render={({ field }) => (\n                                <Checkbox\n                                  {...field}\n                                  disabled={isReadOnly}\n                                  checked={field.value}\n                                  onChange={(e) => {\n                                    const newValue = e.target.checked;\n                                    field.onChange(newValue);\n                                  }}\n                                />\n                              )}\n                            />\n                          }\n                          label={option.label}\n                        />\n                      )}\n\n                      {option.name === 'other' && (\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Typography component=\"label\" htmlFor=\"other-input\">\n                            Other\n                          </Typography>\n                          <Controller\n                            name=\"otherNote\"\n                            control={control}\n                            render={({ field: { value, onChange } }) => (\n                              <TextField\n                                disabled={isReadOnly}\n                                label=\"Please specify\"\n                                size=\"small\"\n                                value={value}\n                                onChange={onChange}\n                              />\n                            )}\n                          />\n                        </Box>\n                      )}\n                    </React.Fragment>\n                  ))}\n                </Box>\n              </Box>\n            </>\n          )}\n        </Box>\n      </FormProvider>\n    </AccordionCard>\n  );\n};\n"]}