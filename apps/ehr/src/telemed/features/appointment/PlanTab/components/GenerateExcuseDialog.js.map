{"version":3,"file":"GenerateExcuseDialog.js","sourceRoot":"","sources":["GenerateExcuseDialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, FormControl, FormGroup, FormLabel, Typography } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport { FC } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { getAllPractitionerCredentials, getQuestionnaireResponseByLinkId, PATIENT_SUPPORT_PHONE_NUMBER } from 'utils';\nimport useEvolveUser from '../../../../../hooks/useEvolveUser';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useAppointmentStore, useSaveChartData } from '../../../../state';\nimport {\n  ExcuseFormValues,\n  getDefaultExcuseFormValues,\n  getPatientName,\n  mapExcuseTypeToFields,\n  mapValuesToExcuse,\n} from '../../../../utils';\nimport { mapExcuseFieldsToLabels } from '../../../../utils/school-work-excuse.helper';\nimport { ControlledExcuseCheckbox } from './ControlledExcuseCheckbox';\nimport { ControlledExcuseDatePicker } from './ControlledExcuseDatePicker';\nimport { ControlledExcuseTextField } from './ControlledExcuseTextField';\nimport { GenerateExcuseDialogContainer } from './GenerateExcuseDialogContainer';\n\ntype GenerateExcuseDialogExtendedProps = {\n  open: boolean;\n  onClose: () => void;\n  type: keyof typeof mapExcuseTypeToFields;\n  generate: ReturnType<typeof useSaveChartData>['mutate'];\n};\n\nexport const GenerateExcuseDialog: FC<GenerateExcuseDialogExtendedProps> = (props) => {\n  const { open, onClose, type, generate } = props;\n\n  const fields = mapExcuseTypeToFields[type];\n  const isSchool = ['schoolTemplate', 'schoolFree'].includes(type);\n  const isTemplate = ['schoolTemplate', 'workTemplate'].includes(type);\n\n  const { patient, chartData, setPartialChartData, questionnaireResponse } = getSelectors(useAppointmentStore, [\n    'patient',\n    'chartData',\n    'setPartialChartData',\n    'questionnaireResponse',\n  ]);\n  const user = useEvolveUser();\n\n  const responsibleParty = {\n    firstName: getQuestionnaireResponseByLinkId('responsible-party-first-name', questionnaireResponse)?.answer?.[0]\n      ?.valueString,\n    lastName: getQuestionnaireResponseByLinkId('responsible-party-last-name', questionnaireResponse)?.answer?.[0]\n      ?.valueString,\n    relationship: getQuestionnaireResponseByLinkId('responsible-party-relationship', questionnaireResponse)?.answer?.[0]\n      ?.valueString,\n  };\n  const fullParentName =\n    responsibleParty.firstName &&\n    responsibleParty.lastName &&\n    ['Parent', 'Legal Guardian'].includes(responsibleParty.relationship ?? '')\n      ? `${responsibleParty.firstName} ${responsibleParty.lastName}`\n      : '';\n  const methods = useForm<ExcuseFormValues>({\n    defaultValues: getDefaultExcuseFormValues({\n      isSchool,\n      isTemplate,\n      patientName: getPatientName(patient?.name).firstLastName,\n      parentName: fullParentName,\n      providerName: user?.userName,\n      suffix: user?.profileResource?.name?.[0]?.suffix?.join(' '),\n      phoneNumber: PATIENT_SUPPORT_PHONE_NUMBER,\n    }),\n  });\n  const { handleSubmit, getValues, setValue } = methods;\n\n  const onSubmit = (values: ExcuseFormValues): void => {\n    const excuse = mapValuesToExcuse(values, {\n      type,\n      isSchool,\n      isTemplate,\n      patientName: getPatientName(patient?.name).firstLastName,\n      providerName: user?.userName,\n      suffix: user?.profileResource ? getAllPractitionerCredentials(user?.profileResource).join(' ') : undefined,\n    });\n    generate(\n      { newSchoolWorkNote: excuse },\n      {\n        onSuccess: (data) => {\n          const savedExcuses = data?.chartData?.schoolWorkNotes;\n          if (savedExcuses) {\n            setPartialChartData({\n              schoolWorkNotes: [...(chartData?.schoolWorkNotes || []), ...savedExcuses],\n            });\n          }\n        },\n        onError: () => {\n          enqueueSnackbar('An error has occurred while generating excuse. Please try again.', {\n            variant: 'error',\n          });\n        },\n      }\n    );\n    onClose();\n  };\n\n  return (\n    <GenerateExcuseDialogContainer\n      open={open}\n      onSubmit={handleSubmit(onSubmit)}\n      onClose={onClose}\n      label={isSchool ? 'School Excuse' : 'Work excuse'}\n    >\n      <FormProvider {...methods}>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 2,\n          }}\n        >\n          {fields.includes('headerNote') && (\n            <ControlledExcuseTextField name=\"headerNote\" label=\"Note\" fullWidth multiline required />\n          )}\n\n          {isTemplate && (\n            <FormControl>\n              <FormLabel>\n                <Typography variant=\"subtitle2\">Select whatever applies</Typography>\n              </FormLabel>\n              <FormGroup>\n                {fields.includes('workFields') && (\n                  <>\n                    <ControlledExcuseCheckbox\n                      name=\"wereWithThePatientAtTheTimeOfTheVisit\"\n                      label={mapExcuseFieldsToLabels['wereWithThePatientAtTheTimeOfTheVisit']}\n                    />\n                    <ControlledExcuseCheckbox\n                      name=\"areNeededAtHomeToCareForChildDuringThisIllness\"\n                      label={mapExcuseFieldsToLabels['areNeededAtHomeToCareForChildDuringThisIllness']}\n                    />\n                    <Box sx={{ display: 'flex' }}>\n                      <ControlledExcuseCheckbox\n                        name=\"workExcusedFromWorkFromTo\"\n                        label={mapExcuseFieldsToLabels['workExcusedFromWorkFromTo']}\n                      />\n\n                      <Box sx={{ display: 'flex', gap: 2 }}>\n                        <ControlledExcuseDatePicker\n                          name=\"workExcusedFromWorkFromDate\"\n                          validate={(value) => {\n                            if (getValues('workExcusedFromWorkFromTo') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                        <ControlledExcuseDatePicker\n                          name=\"workExcusedFromWorkToDate\"\n                          validate={(value) => {\n                            if (getValues('workExcusedFromWorkFromTo') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                      </Box>\n                    </Box>\n\n                    <Box>\n                      <ControlledExcuseCheckbox\n                        name=\"workExcusedFromWorkOn\"\n                        label={mapExcuseFieldsToLabels['workExcusedFromWorkOn']}\n                      />\n\n                      <ControlledExcuseDatePicker\n                        name=\"workExcusedFromWorkOnDate\"\n                        validate={(value) => {\n                          if (getValues('workExcusedFromWorkOn') && !value) {\n                            return 'Field is required';\n                          }\n                          return;\n                        }}\n                      />\n                    </Box>\n                  </>\n                )}\n\n                {fields.includes('schoolFields') && (\n                  <>\n                    <Box sx={{ display: 'flex' }}>\n                      <ControlledExcuseCheckbox\n                        name=\"excusedFromSchoolFromTo\"\n                        label={mapExcuseFieldsToLabels['excusedFromSchoolFromTo']}\n                      />\n                      <Box sx={{ display: 'flex', gap: 2 }}>\n                        <ControlledExcuseDatePicker\n                          name=\"excusedFromSchoolFromDate\"\n                          validate={(value) => {\n                            if (getValues('excusedFromSchoolFromTo') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                        <ControlledExcuseDatePicker\n                          name=\"excusedFromSchoolToDate\"\n                          validate={(value) => {\n                            if (getValues('excusedFromSchoolFromTo') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                      </Box>\n                    </Box>\n\n                    <Box>\n                      <ControlledExcuseCheckbox\n                        name=\"excusedFromSchoolOn\"\n                        label={mapExcuseFieldsToLabels['excusedFromSchoolOn']}\n                      />\n                      <ControlledExcuseDatePicker\n                        name=\"excusedFromSchoolOnDate\"\n                        validate={(value) => {\n                          if (getValues('excusedFromSchoolOn') && !value) {\n                            return 'Field is required';\n                          }\n                          return;\n                        }}\n                      />\n                    </Box>\n\n                    <ControlledExcuseCheckbox\n                      name=\"excusedFromSchoolUntilFeverFreeFor24Hours\"\n                      label={mapExcuseFieldsToLabels['excusedFromSchoolUntilFeverFreeFor24Hours']}\n                    />\n                    <ControlledExcuseCheckbox\n                      name=\"excusedFromSchoolUntilOnAntibioticsFor24Hours\"\n                      label={mapExcuseFieldsToLabels['excusedFromSchoolUntilOnAntibioticsFor24Hours']}\n                    />\n                    <ControlledExcuseCheckbox\n                      name=\"ableToReturnToSchoolWithoutRestriction\"\n                      label={mapExcuseFieldsToLabels['ableToReturnToSchoolWithoutRestriction']}\n                    />\n                    <ControlledExcuseCheckbox\n                      name=\"ableToReturnToGymActivitiesWithoutRestriction\"\n                      label={mapExcuseFieldsToLabels['ableToReturnToGymActivitiesWithoutRestriction']}\n                    />\n                    <ControlledExcuseCheckbox\n                      name=\"ableToReturnToSchoolWhenThereNoLongerIsAnyEyeDischarge\"\n                      label={mapExcuseFieldsToLabels['ableToReturnToSchoolWhenThereNoLongerIsAnyEyeDischarge']}\n                    />\n\n                    <Box sx={{ display: 'flex' }}>\n                      <ControlledExcuseCheckbox\n                        name=\"excusedFromGymActivitiesFromTo\"\n                        label={mapExcuseFieldsToLabels['excusedFromGymActivitiesFromTo']}\n                      />\n\n                      <Box sx={{ display: 'flex', gap: 2 }}>\n                        <ControlledExcuseDatePicker\n                          name=\"excusedFromGymActivitiesFromDate\"\n                          validate={(value) => {\n                            if (getValues('excusedFromGymActivitiesFromTo') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                        <ControlledExcuseDatePicker\n                          name=\"excusedFromGymActivitiesToDate\"\n                          validate={(value) => {\n                            if (getValues('excusedFromGymActivitiesFromTo') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                      </Box>\n                    </Box>\n\n                    <ControlledExcuseCheckbox\n                      name=\"ableToReturnToSchoolWithTheFollowingRestrictions\"\n                      label={mapExcuseFieldsToLabels['ableToReturnToSchoolWithTheFollowingRestrictions']}\n                    />\n\n                    <Box sx={{ display: 'flex', flexDirection: 'column', ml: 5 }}>\n                      <ControlledExcuseCheckbox\n                        name=\"dominantHandIsInjuredPleaseAllowAccommodations\"\n                        label={mapExcuseFieldsToLabels['dominantHandIsInjuredPleaseAllowAccommodations']}\n                        onChange={(newValue) =>\n                          newValue && setValue('ableToReturnToSchoolWithTheFollowingRestrictions', true)\n                        }\n                      />\n                      <ControlledExcuseCheckbox\n                        name=\"needsExtraTimeBetweenClassesAssistantOrBookBuddy\"\n                        label={mapExcuseFieldsToLabels['needsExtraTimeBetweenClassesAssistantOrBookBuddy']}\n                        onChange={(newValue) =>\n                          newValue && setValue('ableToReturnToSchoolWithTheFollowingRestrictions', true)\n                        }\n                      />\n\n                      <Box>\n                        <ControlledExcuseCheckbox\n                          name=\"otherRestrictions\"\n                          label={mapExcuseFieldsToLabels['otherRestrictions']}\n                          onChange={(newValue) =>\n                            newValue && setValue('ableToReturnToSchoolWithTheFollowingRestrictions', true)\n                          }\n                        />\n\n                        <ControlledExcuseTextField\n                          name=\"otherRestrictionsNote\"\n                          placeholder=\"Please specify\"\n                          validate={(value) => {\n                            if (getValues('otherRestrictions') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                      </Box>\n                    </Box>\n\n                    <ControlledExcuseCheckbox\n                      name=\"allowedUseOfCrutchesAceWrapSplintAndElevatorAsNecessary\"\n                      label={mapExcuseFieldsToLabels['allowedUseOfCrutchesAceWrapSplintAndElevatorAsNecessary']}\n                    />\n                    <ControlledExcuseCheckbox\n                      name=\"allowedUseOfElevatorAsNecessary\"\n                      label={mapExcuseFieldsToLabels['allowedUseOfElevatorAsNecessary']}\n                    />\n                    <ControlledExcuseCheckbox\n                      name=\"unableToParticipateInGymActivitiesUntilClearedByAPhysician\"\n                      label={mapExcuseFieldsToLabels['unableToParticipateInGymActivitiesUntilClearedByAPhysician']}\n                    />\n\n                    <Box sx={{ display: 'flex' }}>\n                      <ControlledExcuseCheckbox\n                        name=\"schoolExcusedFromWorkFromTo\"\n                        label={mapExcuseFieldsToLabels['schoolExcusedFromWorkFromTo']}\n                      />\n\n                      <Box sx={{ display: 'flex', gap: 2 }}>\n                        <ControlledExcuseDatePicker\n                          name=\"schoolExcusedFromWorkFromDate\"\n                          validate={(value) => {\n                            if (getValues('schoolExcusedFromWorkFromTo') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                        <ControlledExcuseDatePicker\n                          name=\"schoolExcusedFromWorkToDate\"\n                          validate={(value) => {\n                            if (getValues('schoolExcusedFromWorkFromTo') && !value) {\n                              return 'Field is required';\n                            }\n                            return;\n                          }}\n                        />\n                      </Box>\n                    </Box>\n\n                    <Box>\n                      <ControlledExcuseCheckbox\n                        name=\"schoolExcusedFromWorkOn\"\n                        label={mapExcuseFieldsToLabels['schoolExcusedFromWorkOn']}\n                      />\n\n                      <ControlledExcuseDatePicker\n                        name=\"schoolExcusedFromWorkOnDate\"\n                        validate={(value) => {\n                          if (getValues('schoolExcusedFromWorkOn') && !value) {\n                            return 'Field is required';\n                          }\n                          return;\n                        }}\n                      />\n                    </Box>\n\n                    <Box>\n                      <ControlledExcuseCheckbox\n                        name=\"ableToReturnToWorkWithTheFollowingRestrictions\"\n                        label={mapExcuseFieldsToLabels['ableToReturnToWorkWithTheFollowingRestrictions']}\n                      />\n\n                      <ControlledExcuseTextField\n                        name=\"ableToReturnToWorkWithTheFollowingRestrictionsNote\"\n                        placeholder=\"Please specify\"\n                        validate={(value) => {\n                          if (getValues('ableToReturnToWorkWithTheFollowingRestrictions') && !value) {\n                            return 'Field is required';\n                          }\n                          return;\n                        }}\n                      />\n                    </Box>\n                    <Box>\n                      <ControlledExcuseCheckbox name=\"other\" label={mapExcuseFieldsToLabels['other']} />\n\n                      <ControlledExcuseTextField\n                        name=\"otherNote\"\n                        placeholder=\"Please specify\"\n                        validate={(value) => {\n                          if (getValues('other') && !value) {\n                            return 'Field is required';\n                          }\n                          return;\n                        }}\n                      />\n                    </Box>\n                  </>\n                )}\n              </FormGroup>\n            </FormControl>\n          )}\n\n          {fields.includes('footerNote') && (\n            <ControlledExcuseTextField name=\"footerNote\" label=\"Note\" fullWidth multiline required />\n          )}\n        </Box>\n      </FormProvider>\n    </GenerateExcuseDialogContainer>\n  );\n};\n"]}