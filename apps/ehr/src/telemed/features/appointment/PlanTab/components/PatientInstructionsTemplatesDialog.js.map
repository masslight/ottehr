{"version":3,"file":"PatientInstructionsTemplatesDialog.js","sourceRoot":"","sources":["PatientInstructionsTemplatesDialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import CloseIcon from '@mui/icons-material/Close';\nimport {\n  Box,\n  CircularProgress,\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Typography,\n  useTheme,\n} from '@mui/material';\nimport React, { FC, useState } from 'react';\nimport { useQueryClient } from 'react-query';\nimport { CommunicationDTO, InstructionType, PROJECT_NAME } from 'utils';\nimport { RoundedButton } from '../../../../../components/RoundedButton';\nimport { ActionsList, DeleteIconButton } from '../../../../components';\nimport { useDeletePatientInstruction, useGetPatientInstructions } from '../../../../state';\n\ntype MyTemplatesDialogProps = {\n  open: boolean;\n  onClose: () => void;\n  type: InstructionType;\n  onSelect: (value: CommunicationDTO) => void;\n};\n\nexport const PatientInstructionsTemplatesDialog: FC<MyTemplatesDialogProps> = (props) => {\n  const { open, onClose, type, onSelect } = props;\n\n  const theme = useTheme();\n  const [patientInstructions, setPatientInstructions] = useState<CommunicationDTO[]>([]);\n  const { isFetching } = useGetPatientInstructions({ type }, (data) => {\n    setPatientInstructions(data);\n  });\n  const isMyTemplates = type === 'provider';\n  const { mutate, isLoading: isDeleting } = useDeletePatientInstruction();\n  const queryClient = useQueryClient();\n\n  const onDelete = (id: string): void => {\n    mutate(\n      { instructionId: id },\n      {\n        onSuccess: () => {\n          void queryClient.invalidateQueries({ queryKey: ['telemed-get-patient-instructions'] });\n        },\n      }\n    );\n    setPatientInstructions((prevState) => prevState.filter((instruction) => instruction.resourceId !== id));\n  };\n\n  return (\n    <Dialog open={open} onClose={onClose} maxWidth=\"md\" fullWidth scroll=\"paper\">\n      <DialogTitle component=\"div\" sx={{ p: 3, pb: 2, display: 'flex', alignItems: 'flex-start' }}>\n        <Typography variant=\"h4\" color={theme.palette.primary.dark} sx={{ flex: 1 }}>\n          {isMyTemplates ? 'My instruction templates' : `${PROJECT_NAME} instruction templates `}\n        </Typography>\n        <IconButton size=\"small\" onClick={onClose}>\n          <CloseIcon fontSize=\"small\" />\n        </IconButton>\n      </DialogTitle>\n      <Divider />\n      <DialogContent\n        sx={{\n          p: 3,\n        }}\n      >\n        {isFetching && patientInstructions.length === 0 ? (\n          <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n            <CircularProgress />\n          </Box>\n        ) : patientInstructions.length === 0 ? (\n          <Typography color={theme.palette.text.secondary}>No instruction templates</Typography>\n        ) : (\n          <ActionsList\n            data={patientInstructions}\n            getKey={(value, index) => value.resourceId || index}\n            renderItem={(value) => <Typography>{value.text}</Typography>}\n            renderActions={(value) => (\n              <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>\n                {isMyTemplates && (\n                  <DeleteIconButton disabled={isDeleting} onClick={() => onDelete(value.resourceId!)} />\n                )}\n                <RoundedButton\n                  onClick={() => {\n                    onSelect(value);\n                    onClose();\n                  }}\n                  variant=\"contained\"\n                >\n                  Select\n                </RoundedButton>\n              </Box>\n            )}\n            gap={2}\n            divider\n            alignItems=\"flex-start\"\n          />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};\n"]}