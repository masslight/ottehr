{"version":3,"file":"useDispositionMultipleNotes.js","sourceRoot":"","sources":["useDispositionMultipleNotes.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+BAAuD;AACvD,mDAA0D;AAC1D,+BAAwE;AACxE,wCAA6E;AAK7E;;;GAGG;AACI,IAAM,2BAA2B,GAAG,UAAC,EAM3C;QALC,OAAO,aAAA,EACP,gBAAgB,sBAAA;IAQhB,IAAM,aAAa,GAAG,IAAA,cAAM,EAA2C,EAAE,CAAC,CAAC;IAC3E,IAAM,uBAAuB,GAAoB,IAAA,0BAAQ,EAAC,EAAE,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC;IAEtG,IAAM,kCAAkC,GACtC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,MAAK,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,CAAA,CAAC,CAAC,CAAC,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;IAErF,IAAA,iBAAS,EAAC;QACR,aAAa,CAAC,OAAO,CAAC,uBAAuB,CAAC;YAC5C,aAAa,CAAC,OAAO,CAAC,uBAAuB,CAAC;gBAC9C,kCAAkC;gBAClC,IAAA,sBAAc,EAAC,uBAAuB,CAAC,CAAC;QAE1C,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE;YACzB,YAAY,EAAE,aAAa,CAAC,OAAO,CAAC,uBAAuB,CAAC;YAC5D,WAAW,EAAE,IAAI;SAClB,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,OAAO,EAAE,kCAAkC,EAAE,uBAAuB,CAAC,CAAC,CAAC;IAE3E,IAAM,YAAY,GAAiB,IAAA,mBAAW,EAC5C,UAAC,IAAY;QACX,OAAO,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACnE,CAAC,EACD,CAAC,OAAO,CAAC,CACV,CAAC;IAEF,IAAM,QAAQ,GAAa,IAAA,mBAAW,EAAC,UAAC,MAAM;;QAC5C,OAAO,IAAA,4BAAoB,wBACtB,MAAM,KACT,IAAI,EAAE,MAAA,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mCAAI,EAAE,IAC9C,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,EAAE,YAAY,cAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;AACpC,CAAC,CAAC;AA3CW,QAAA,2BAA2B,+BA2CtC","sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { UseFormReturn, useWatch } from 'react-hook-form';\nimport { DispositionDTO, DispositionType, getDefaultNote } from 'utils';\nimport { DispositionFormValues, mapFormToDisposition } from '../../../utils';\n\ntype SetNoteCache = (note: string) => void;\ntype WithNote = (values: DispositionFormValues) => DispositionDTO;\n\n/**\n * This hook makes it possible to use DispositionDTO with a single note field as if we have unique note fields for each disposition type.\n * It creates a notes cache for each disposition type during the session and handles their usage.\n */\nexport const useDispositionMultipleNotes = ({\n  methods,\n  savedDisposition,\n}: {\n  methods: UseFormReturn<DispositionFormValues>;\n  savedDisposition: DispositionDTO | undefined;\n}): {\n  setNoteCache: SetNoteCache;\n  withNote: WithNote;\n} => {\n  const notesCacheRef = useRef<Partial<Record<DispositionType, string>>>({});\n  const selectedDispositionType: DispositionType = useWatch({ control: methods.control, name: 'type' });\n\n  const savedNoteForCurrentDispositionType =\n    methods.getValues('type') === savedDisposition?.type ? savedDisposition?.note : '';\n\n  useEffect(() => {\n    notesCacheRef.current[selectedDispositionType] =\n      notesCacheRef.current[selectedDispositionType] ||\n      savedNoteForCurrentDispositionType ||\n      getDefaultNote(selectedDispositionType);\n\n    methods.resetField('note', {\n      defaultValue: notesCacheRef.current[selectedDispositionType],\n      keepTouched: true,\n    });\n  }, [methods, savedNoteForCurrentDispositionType, selectedDispositionType]);\n\n  const setNoteCache: SetNoteCache = useCallback(\n    (note: string) => {\n      return (notesCacheRef.current[methods.getValues('type')] = note);\n    },\n    [methods]\n  );\n\n  const withNote: WithNote = useCallback((values) => {\n    return mapFormToDisposition({\n      ...values,\n      note: notesCacheRef.current[values.type] ?? '',\n    });\n  }, []);\n\n  return { setNoteCache, withNote };\n};\n"]}