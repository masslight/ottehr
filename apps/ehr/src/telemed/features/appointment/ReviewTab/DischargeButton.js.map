{"version":3,"file":"DischargeButton.js","sourceRoot":"","sources":["DischargeButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import CheckIcon from '@mui/icons-material/Check';\nimport { Box, Skeleton } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport { FC, useMemo, useState } from 'react';\nimport { useAppointment } from 'src/features/css-module/hooks/useAppointment';\nimport { handleChangeInPersonVisitStatus } from 'src/helpers/inPersonVisitStatusUtils';\nimport { useApiClients } from 'src/hooks/useAppClients';\nimport useEvolveUser from 'src/hooks/useEvolveUser';\nimport { getVisitStatus } from 'utils';\nimport { RoundedButton } from '../../../../components/RoundedButton';\nimport { dataTestIds } from '../../../../constants/data-test-ids';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../state';\n\nexport const DischargeButton: FC = () => {\n  const { appointment, encounter } = getSelectors(useAppointmentStore, ['appointment', 'encounter']);\n  const { refetch } = useAppointment(appointment?.id);\n  const { oystehrZambda } = useApiClients();\n  const user = useEvolveUser();\n  const [statusLoading, setStatusLoading] = useState<boolean>(false);\n\n  const inPersonStatus = useMemo(() => appointment && getVisitStatus(appointment, encounter), [appointment, encounter]);\n  const isAlreadyDischarged = inPersonStatus === 'discharged' || inPersonStatus === 'completed';\n\n  if (!user || !encounter?.id) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'end' }}>\n        <Skeleton variant=\"rectangular\" width={120} height={36} sx={{ borderRadius: '20px' }} />\n      </Box>\n    );\n  }\n\n  const encounterId: string = encounter.id;\n\n  const handleDischarge = async (): Promise<void> => {\n    setStatusLoading(true);\n\n    try {\n      await handleChangeInPersonVisitStatus({ encounterId, user, updatedStatus: 'discharged' }, oystehrZambda);\n\n      await refetch();\n\n      enqueueSnackbar('Patient discharged successfully', { variant: 'success' });\n    } catch (error) {\n      console.error(error);\n      enqueueSnackbar('An error occurred. Please try again.', { variant: 'error' });\n    } finally {\n      setStatusLoading(false);\n    }\n  };\n\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'end' }}>\n      <RoundedButton\n        disabled={statusLoading || isAlreadyDischarged}\n        loading={statusLoading}\n        variant=\"contained\"\n        onClick={handleDischarge}\n        startIcon={isAlreadyDischarged ? <CheckIcon color=\"inherit\" /> : undefined}\n        data-testid={dataTestIds.progressNotePage.dischargeButton}\n      >\n        {isAlreadyDischarged ? 'Discharged' : 'Discharge'}\n      </RoundedButton>\n    </Box>\n  );\n};\n"]}