{"version":3,"file":"ReviewAndSignButton.js","sourceRoot":"","sources":["ReviewAndSignButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import CheckIcon from '@mui/icons-material/Check';\nimport { Box, Tooltip, Typography } from '@mui/material';\nimport { DateTime } from 'luxon';\nimport { FC, useMemo, useState } from 'react';\nimport { getVisitStatus, PRACTITIONER_CODINGS, TelemedAppointmentStatusEnum } from 'utils';\nimport { RoundedButton } from '../../../../components/RoundedButton';\nimport { dataTestIds } from '../../../../constants/data-test-ids';\nimport { useFeatureFlags } from '../../../../features/css-module/context/featureFlags';\nimport { useAppointment } from '../../../../features/css-module/hooks/useAppointment';\nimport { usePractitionerActions } from '../../../../features/css-module/hooks/usePractitioner';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { ConfirmationDialog } from '../../../components';\nimport { useGetAppointmentAccessibility } from '../../../hooks';\nimport { useOystehrAPIClient } from '../../../hooks/useOystehrAPIClient';\nimport {\n  useAppointmentStore,\n  useChangeTelemedAppointmentStatusMutation,\n  useSignAppointmentMutation,\n} from '../../../state';\nimport { getPatientName } from '../../../utils';\n\ntype ReviewAndSignButtonProps = {\n  onSigned?: () => void;\n};\n\nexport const ReviewAndSignButton: FC<ReviewAndSignButtonProps> = ({ onSigned }) => {\n  const { patient, appointment, encounter, chartData } = getSelectors(useAppointmentStore, [\n    'patient',\n    'appointment',\n    'encounter',\n    'chartData',\n  ]);\n  const apiClient = useOystehrAPIClient();\n  const { mutateAsync: changeTelemedAppointmentStatus, isLoading: isChangeLoading } =\n    useChangeTelemedAppointmentStatusMutation();\n  const { mutateAsync: signAppointment, isLoading: isSignLoading } = useSignAppointmentMutation();\n  const [openTooltip, setOpenTooltip] = useState(false);\n\n  const { refetch } = useAppointment(appointment?.id);\n  const { css } = useFeatureFlags();\n  const appointmentAccessibility = useGetAppointmentAccessibility();\n\n  const primaryDiagnosis = (chartData?.diagnosis || []).find((item) => item.isPrimary);\n  const medicalDecision = chartData?.medicalDecision?.text;\n  const emCode = chartData?.emCode;\n  const patientInfoConfirmed = chartData?.patientInfoConfirmed?.value;\n  const inHouseLabResultsPending = chartData?.inHouseLabResults?.resultsPending;\n\n  const patientName = getPatientName(patient?.name).firstLastName;\n\n  const { isEncounterUpdatePending } = usePractitionerActions(encounter, 'end', PRACTITIONER_CODINGS.Attender);\n\n  const isLoading = isChangeLoading || isSignLoading || isEncounterUpdatePending;\n  const inPersonStatus = useMemo(() => appointment && getVisitStatus(appointment, encounter), [appointment, encounter]);\n\n  const completed = useMemo(() => {\n    if (css) {\n      return inPersonStatus === 'completed';\n    }\n    return appointmentAccessibility.status === TelemedAppointmentStatusEnum.complete;\n  }, [css, inPersonStatus, appointmentAccessibility.status]);\n\n  const errorMessage = useMemo(() => {\n    const messages: string[] = [];\n\n    if (completed) {\n      return messages;\n    }\n\n    if (css && inPersonStatus) {\n      if (inPersonStatus === 'provider') {\n        messages.push('You must discharge the patient before signing');\n      } else if (inPersonStatus !== 'discharged') {\n        messages.push('The appointment must be in the status of discharged');\n      }\n    } else {\n      if (appointmentAccessibility.status !== TelemedAppointmentStatusEnum.unsigned) {\n        messages.push('You need to finish a video call with the patient');\n      }\n    }\n\n    if (!primaryDiagnosis || !medicalDecision || !emCode) {\n      messages.push('You need to fill in the missing data');\n    }\n\n    if (!patientInfoConfirmed) {\n      messages.push('You need to confirm patient information');\n    }\n\n    if (inHouseLabResultsPending) {\n      messages.push('In-House lab results pending');\n    }\n\n    return messages;\n  }, [\n    css,\n    completed,\n    inPersonStatus,\n    primaryDiagnosis,\n    medicalDecision,\n    emCode,\n    patientInfoConfirmed,\n    appointmentAccessibility.status,\n    inHouseLabResultsPending,\n  ]);\n\n  const handleCloseTooltip = (): void => {\n    setOpenTooltip(false);\n  };\n\n  const handleOpenTooltip = (): void => {\n    setOpenTooltip(true);\n  };\n\n  const handleSign = async (): Promise<void> => {\n    if (!apiClient || !appointment?.id) {\n      throw new Error('api client not defined or appointmentId not provided');\n    }\n\n    if (css) {\n      try {\n        const tz = DateTime.now().zoneName;\n        await signAppointment({\n          apiClient,\n          appointmentId: appointment.id,\n          timezone: tz,\n        });\n        await refetch();\n      } catch (error: any) {\n        console.log(error.message);\n      }\n    } else {\n      await changeTelemedAppointmentStatus({\n        apiClient,\n        appointmentId: appointment.id,\n        newStatus: TelemedAppointmentStatusEnum.complete,\n      });\n      useAppointmentStore.setState({\n        encounter: { ...encounter, status: 'finished' },\n        appointment: { ...appointment, status: 'fulfilled' },\n      });\n    }\n\n    if (onSigned) {\n      onSigned();\n    }\n  };\n\n  return (\n    <Box sx={{ display: 'flex', justifyContent: 'end' }}>\n      <Tooltip\n        placement=\"top\"\n        open={openTooltip && errorMessage.length > 0}\n        onClose={handleCloseTooltip}\n        onOpen={handleOpenTooltip}\n        title={errorMessage.map((message) => (\n          <Typography key={message}>{message}</Typography>\n        ))}\n      >\n        <Box>\n          <ConfirmationDialog\n            title={`Review & Sign ${patientName}`}\n            description=\"Are you sure you have reviewed the patient chart, performed the examination, defined the diagnoses, medical decision making and E&M code and are ready to sign this patient.\"\n            response={handleSign}\n            actionButtons={{\n              proceed: {\n                text: 'Sign',\n              },\n              back: { text: 'Cancel' },\n            }}\n          >\n            {(showDialog) => (\n              <RoundedButton\n                disabled={errorMessage.length > 0 || isLoading || completed || inPersonStatus === 'provider'}\n                loading={isLoading}\n                variant=\"contained\"\n                onClick={showDialog}\n                startIcon={completed ? <CheckIcon color=\"inherit\" /> : undefined}\n                data-testid={dataTestIds.progressNotePage.reviewAndSignButton}\n              >\n                {completed ? 'Signed' : 'Review & Sign'}\n              </RoundedButton>\n            )}\n          </ConfirmationDialog>\n        </Box>\n      </Tooltip>\n    </Box>\n  );\n};\n"]}