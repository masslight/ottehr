{"version":3,"file":"PatientInfoConfirmedCheckbox.js","sourceRoot":"","sources":["PatientInfoConfirmedCheckbox.tsx"],"names":[],"mappings":";;;AAAA,0CAA2D;AAC3D,uCAA4C;AAC5C,+BAAkC;AAClC,wEAAqE;AACrE,yEAAwE;AACxE,2CAAmE;AACnE,2CAA0E;AAEnE,IAAM,4BAA4B,GAAO;;IACxC,IAAA,KAAqC,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,WAAW,EAAE,qBAAqB,CAAC,CAAC,EAA1G,SAAS,eAAA,EAAE,mBAAmB,yBAA4E,CAAC;IAC3G,IAAuB,UAAU,GAAK,IAAA,sCAA8B,GAAE,sBAArC,CAAsC;IACzE,IAAA,KAAwB,IAAA,wBAAgB,GAAE,EAAxC,MAAM,YAAA,EAAE,SAAS,eAAuB,CAAC;IAEjD,IAAM,oBAAoB,GAAG,CAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,oBAAoB,0CAAE,KAAK,KAAI,KAAK,CAAC;IAE7E,IAAM,QAAQ,GAAG,UAAC,KAAc;QAC9B,mBAAmB,CAAC,EAAE,oBAAoB,EAAE,EAAE,KAAK,OAAA,EAAE,EAAE,CAAC,CAAC;QACzD,MAAM,CACJ,EAAE,oBAAoB,EAAE,EAAE,KAAK,OAAA,EAAE,EAAE,EACnC;YACE,SAAS,EAAE,UAAC,IAAI;gBACd,IAAM,2BAA2B,GAAG,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC;gBACxE,IAAI,2BAA2B,EAAE,CAAC;oBAChC,mBAAmB,CAAC,EAAE,oBAAoB,EAAE,2BAA2B,EAAE,CAAC,CAAC;gBAC7E,CAAC;YACH,CAAC;YACD,OAAO,EAAE;gBACP,IAAA,2BAAe,EAAC,+EAA+E,EAAE;oBAC/F,OAAO,EAAE,OAAO;iBACjB,CAAC,CAAC;gBACH,mBAAmB,CAAC,EAAE,oBAAoB,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,oBAAoB,EAAE,CAAC,CAAC;YACjF,CAAC;SACF,CACF,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,2BAAgB,CACf,OAAO,CAAC,CACN,CAAC,mBAAQ,CACP,QAAQ,CAAC,CAAC,SAAS,IAAI,UAAU,CAAC,CAClC,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAC9B,WAAW,CAAC,CAAC,2BAAW,CAAC,cAAc,CAAC,+BAA+B,CAAC,CACxE,QAAQ,CAAC,CAAC,UAAC,CAAC,IAAK,OAAA,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,EAA1B,CAA0B,CAAC,EAEhD,CAAC,CACD,KAAK,CAAC,0FAA0F,EAChG,CACH,CAAC;AACJ,CAAC,CAAC;AAzCW,QAAA,4BAA4B,gCAyCvC","sourcesContent":["import { Checkbox, FormControlLabel } from '@mui/material';\nimport { enqueueSnackbar } from 'notistack';\nimport React, { FC } from 'react';\nimport { dataTestIds } from '../../../../../constants/data-test-ids';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useGetAppointmentAccessibility } from '../../../../hooks';\nimport { useAppointmentStore, useSaveChartData } from '../../../../state';\n\nexport const PatientInfoConfirmedCheckbox: FC = () => {\n  const { chartData, setPartialChartData } = getSelectors(useAppointmentStore, ['chartData', 'setPartialChartData']);\n  const { isAppointmentReadOnly: isReadOnly } = useGetAppointmentAccessibility();\n  const { mutate, isLoading } = useSaveChartData();\n\n  const patientInfoConfirmed = chartData?.patientInfoConfirmed?.value || false;\n\n  const onChange = (value: boolean): void => {\n    setPartialChartData({ patientInfoConfirmed: { value } });\n    mutate(\n      { patientInfoConfirmed: { value } },\n      {\n        onSuccess: (data) => {\n          const patientInfoConfirmedUpdated = data.chartData.patientInfoConfirmed;\n          if (patientInfoConfirmedUpdated) {\n            setPartialChartData({ patientInfoConfirmed: patientInfoConfirmedUpdated });\n          }\n        },\n        onError: () => {\n          enqueueSnackbar('An error has occurred while confirming patient information. Please try again.', {\n            variant: 'error',\n          });\n          setPartialChartData({ patientInfoConfirmed: chartData?.patientInfoConfirmed });\n        },\n      }\n    );\n  };\n\n  return (\n    <FormControlLabel\n      control={\n        <Checkbox\n          disabled={isLoading || isReadOnly}\n          checked={patientInfoConfirmed}\n          data-testid={dataTestIds.telemedEhrFlow.patientInfoConfirmationCheckbox}\n          onChange={(e) => onChange(e.target.checked)}\n        />\n      }\n      label=\"I confirmed patient's name, DOB, introduced myself and gave my licensure and credentials\"\n    />\n  );\n};\n"]}