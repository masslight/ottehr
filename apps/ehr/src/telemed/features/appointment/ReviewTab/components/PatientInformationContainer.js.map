{"version":3,"file":"PatientInformationContainer.js","sourceRoot":"","sources":["PatientInformationContainer.tsx"],"names":[],"mappings":";;;AAAA,0CAAgD;AAChD,+BAAiC;AAEjC,+BAAyD;AACzD,yEAAwE;AACxE,2CAAwD;AACxD,2CAAmD;AACnD,iDAAgD;AAEzC,IAAM,2BAA2B,GAAO;;IACvC,IAAA,KAAqC,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC,EAA1G,OAAO,aAAA,EAAE,qBAAqB,2BAA4E,CAAC;IAEnH,IAAM,WAAW,GAAG,IAAA,sBAAc,EAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAC,CAAC,mBAAmB,CAAC;IACtE,IAAM,GAAG,GAAG,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,KAAI,gBAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC9G,IAAM,KAAK,GAAG,MAAA,MAAA,MAAA,IAAA,wCAAgC,EAAC,iBAAiB,EAAE,qBAAqB,CAAC,0CAAE,MAAM,0CAAG,CAAC,CAAC,0CAAE,WAAW,CAAC;IACnH,IAAM,kBAAkB,GAAG;QACzB,SAAS,EAAE,MAAA,MAAA,MAAA,IAAA,wCAAgC,EAAC,sCAAsC,EAAE,qBAAqB,CAAC,0CACtG,MAAM,0CAAG,CAAC,CAAC,0CAAE,WAAW;QAC5B,QAAQ,EAAE,MAAA,MAAA,MAAA,IAAA,wCAAgC,EAAC,qCAAqC,EAAE,qBAAqB,CAAC,0CACpG,MAAM,0CAAG,CAAC,CAAC,0CAAE,WAAW;KAC7B,CAAC;IAEF,OAAO,CACL,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAC3E;MAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAC3C;;MACF,EAAE,qBAAU,CACZ;MAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAC9D;QAAA,CAAC,6BAAa,CAAC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,EACvD;QAAA,CAAC,6BAAa,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAChD;QAAA,CAAC,kBAAkB,CAAC,SAAS,IAAI,kBAAkB,CAAC,QAAQ,IAAI,CAC9D,CAAC,6BAAa,CACZ,KAAK,CAAC,uCAAuC,CAC7C,KAAK,CAAC,CAAC,UAAG,kBAAkB,CAAC,QAAQ,eAAK,kBAAkB,CAAC,SAAS,CAAE,CAAC,EACzE,CACH,CACD;QAAA,CAAC,KAAK,IAAI,CAAC,6BAAa,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAG,CACzD;MAAA,EAAE,cAAG,CACP;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AA/BW,QAAA,2BAA2B,+BA+BtC","sourcesContent":["import { Box, Typography } from '@mui/material';\nimport { DateTime } from 'luxon';\nimport { FC } from 'react';\nimport { getQuestionnaireResponseByLinkId } from 'utils';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../../state';\nimport { getPatientName } from '../../../../utils';\nimport { VisitNoteItem } from './VisitNoteItem';\n\nexport const PatientInformationContainer: FC = () => {\n  const { patient, questionnaireResponse } = getSelectors(useAppointmentStore, ['patient', 'questionnaireResponse']);\n\n  const patientName = getPatientName(patient?.name).lastFirstMiddleName;\n  const dob = patient?.birthDate && DateTime.fromFormat(patient.birthDate, 'yyyy-MM-dd').toFormat('MM/dd/yyyy');\n  const phone = getQuestionnaireResponseByLinkId('guardian-number', questionnaireResponse)?.answer?.[0]?.valueString;\n  const accompanyingPerson = {\n    firstName: getQuestionnaireResponseByLinkId('person-accompanying-minor-first-name', questionnaireResponse)\n      ?.answer?.[0]?.valueString,\n    lastName: getQuestionnaireResponseByLinkId('person-accompanying-minor-last-name', questionnaireResponse)\n      ?.answer?.[0]?.valueString,\n  };\n\n  return (\n    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, width: '100%' }}>\n      <Typography variant=\"h5\" color=\"primary.dark\">\n        Patient information\n      </Typography>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n        <VisitNoteItem label=\"Patient name\" value={patientName} />\n        <VisitNoteItem label=\"Date of birth\" value={dob} />\n        {accompanyingPerson.firstName && accompanyingPerson.lastName && (\n          <VisitNoteItem\n            label=\"Person accompanying the minor patient\"\n            value={`${accompanyingPerson.lastName}, ${accompanyingPerson.firstName}`}\n          />\n        )}\n        {phone && <VisitNoteItem label=\"Phone\" value={phone} />}\n      </Box>\n    </Box>\n  );\n};\n"]}