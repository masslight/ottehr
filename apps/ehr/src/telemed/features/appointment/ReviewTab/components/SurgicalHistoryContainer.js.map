{"version":3,"file":"SurgicalHistoryContainer.js","sourceRoot":"","sources":["SurgicalHistoryContainer.tsx"],"names":[],"mappings":";;;AAAA,0CAA0D;AAG1D,wEAAqE;AACrE,yEAAwE;AACxE,2CAAwD;AACxD,kFAAiF;AAE1E,IAAM,wBAAwB,GAA8B,UAAC,EAAS;;QAAP,KAAK,WAAA;IACjE,IAAA,SAAS,GAAK,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,WAAW,CAAC,CAAC,UAArD,CAAsD;IACvE,IAAM,KAAK,GAAG,IAAA,mBAAQ,GAAE,CAAC;IAEzB,IAAM,UAAU,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,eAAe,CAAC;IAC9C,IAAM,mBAAmB,GAAG,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,mBAAmB,0CAAE,IAAI,CAAC;IAEjE,OAAO,CACL,CAAC,cAAG,CACF,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAC1E,WAAW,CAAC,CAAC,2BAAW,CAAC,cAAc,CAAC,iCAAiC,CAAC,CAE1E;MAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAC3C;;MACF,EAAE,qBAAU,CACZ;MAAA,CAAC,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,EAAC,CAAC,CAAC,CACpB,UAAU,CAAC,GAAG,CAAC,UAAC,SAAS,IAAK,OAAA,CAC5B,CAAC,qBAAU,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CACpC;YAAA,CAAC,SAAS,CAAC,IAAI,CAAE,CAAA,CAAC,SAAS,CAAC,OAAO,CACrC;UAAA,EAAE,qBAAU,CAAC,CACd,EAJ6B,CAI7B,CAAC,CACH,CAAC,CAAC,CAAC,CACF,CAAC,qBAAU,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,mBAAmB,EAAE,qBAAU,CAAC,CAClF,CACD;MAAA,CAAC,mBAAmB,IAAI,CAAC,qBAAU,CAAC,CAAC,mBAAmB,CAAC,EAAE,qBAAU,CAAC,CAEtE;;MAAA,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAC5B,EACE;UAAA,CAAC,iCAAe,CAAC,sBAAsB,EAAE,iCAAe,CACxD;UAAA,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAC9D;YAAA,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,CAAC,qBAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,qBAAU,CAAC,EAA1D,CAA0D,CAAC,CACnF;UAAA,EAAE,cAAG,CACP;QAAA,GAAG,CACJ,CACH;IAAA,EAAE,cAAG,CAAC,CACP,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,wBAAwB,4BAoCnC","sourcesContent":["import { Box, Typography, useTheme } from '@mui/material';\nimport { FC } from 'react';\nimport { NoteDTO } from 'utils';\nimport { dataTestIds } from '../../../../../constants/data-test-ids';\nimport { getSelectors } from '../../../../../shared/store/getSelectors';\nimport { useAppointmentStore } from '../../../../state';\nimport { AssessmentTitle } from '../../AssessmentTab/components/AssessmentTitle';\n\nexport const SurgicalHistoryContainer: FC<{ notes?: NoteDTO[] }> = ({ notes }) => {\n  const { chartData } = getSelectors(useAppointmentStore, ['chartData']);\n  const theme = useTheme();\n\n  const procedures = chartData?.surgicalHistory;\n  const surgicalHistoryNote = chartData?.surgicalHistoryNote?.text;\n\n  return (\n    <Box\n      sx={{ display: 'flex', flexDirection: 'column', gap: 0.5, width: '100%' }}\n      data-testid={dataTestIds.telemedEhrFlow.reviewTabSurgicalHistoryContainer}\n    >\n      <Typography variant=\"h5\" color=\"primary.dark\">\n        Surgical history\n      </Typography>\n      {procedures?.length ? (\n        procedures.map((procedure) => (\n          <Typography key={procedure.resourceId}>\n            {procedure.code} {procedure.display}\n          </Typography>\n        ))\n      ) : (\n        <Typography color={theme.palette.text.secondary}>No surgical history</Typography>\n      )}\n      {surgicalHistoryNote && <Typography>{surgicalHistoryNote}</Typography>}\n\n      {notes && notes.length > 0 && (\n        <>\n          <AssessmentTitle>Surgical history notes</AssessmentTitle>\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n            {notes?.map((note) => <Typography key={note.resourceId}>{note.text}</Typography>)}\n          </Box>\n        </>\n      )}\n    </Box>\n  );\n};\n"]}