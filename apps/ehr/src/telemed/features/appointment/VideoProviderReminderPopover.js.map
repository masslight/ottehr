{"version":3,"file":"VideoProviderReminderPopover.js","sourceRoot":"","sources":["VideoProviderReminderPopover.tsx"],"names":[],"mappings":";;;AAAA,0CAAgD;AAEhD,+BAAyD;AACzD,8DAAyD;AACzD,mEAAkE;AAClE,uCAA4C;AAC5C,+CAAqD;AACrD,qCAA6D;AAC7D,qCAAkD;AAE3C,IAAM,4BAA4B,GAAO;;IACtC,IAA4B,eAAe,GAAK,IAAA,sCAA8B,GAAE,2BAArC,CAAsC;IACjF,IAAA,qBAAqB,GAAK,IAAA,2BAAY,EAAC,2BAAmB,EAAE,CAAC,uBAAuB,CAAC,CAAC,sBAAjE,CAAkE;IAC/F,IAAM,IAAI,GAAG,IAAA,uBAAa,GAAE,CAAC;IAE7B,IAAM,YAAY,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,KAAI,KAAK,CAAC;IAC7C,IAAM,MAAM,GAAG,eAAe,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAClG,IAAM,OAAO,GACX,CAAA,MAAA,MAAA,MAAA,IAAA,wCAAgC,EAAC,wBAAwB,EAAE,qBAAqB,CAAC,0CAAE,MAAM,0CAAG,CAAC,CAAC,0CAAE,WAAW;QAC3G,KAAK,CAAC;IAER,OAAO,CACL,CAAC,8BAAiB,CAChB,eAAe,CAAC,CACd,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CACnC;UAAA,CAAC,qBAAU,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE,qBAAU,CAC1D;UAAA,CAAC,qBAAU,CACT;;wBACY,CAAC,YAAY,CAAE,sBAAqB,CAAC,MAAM,CAAE;gGAC2B,CAAC,OAAO,CAC9F;UAAA,EAAE,qBAAU,CACd;QAAA,EAAE,cAAG,CACP,CAAC,CACD,YAAY,CAAC,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAEhC;MAAA,CAAC,UAAC,EAAqB;gBAAnB,iBAAiB,uBAAA;YAAO,OAAA,CAC1B,CAAC,cAAG,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,iBAAiB,CAAC,CAC1G;UAAA,CAAC,qBAAY,CAAC,QAAQ,CAAC,OAAO,EAC9B;UAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAC1C;;UACF,EAAE,qBAAU,CACd;QAAA,EAAE,cAAG,CAAC,CACP;QAP2B,CAO3B,CACH;IAAA,EAAE,8BAAiB,CAAC,CACrB,CAAC;AACJ,CAAC,CAAC;AAnCW,QAAA,4BAA4B,gCAmCvC","sourcesContent":["import { Box, Typography } from '@mui/material';\nimport { FC } from 'react';\nimport { getQuestionnaireResponseByLinkId } from 'utils';\nimport useEvolveUser from '../../../hooks/useEvolveUser';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { ReminderIcon } from '../../assets';\nimport { InnerStatePopover } from '../../components';\nimport { useGetAppointmentAccessibility } from '../../hooks';\nimport { useAppointmentStore } from '../../state';\n\nexport const VideoProviderReminderPopover: FC = () => {\n  const { licensedPractitionerStates: availableStates } = useGetAppointmentAccessibility();\n  const { questionnaireResponse } = getSelectors(useAppointmentStore, ['questionnaireResponse']);\n  const user = useEvolveUser();\n\n  const providerName = user?.userName || '___';\n  const states = availableStates && availableStates.length > 0 ? availableStates.join(', ') : '___';\n  const address =\n    getQuestionnaireResponseByLinkId('patient-street-address', questionnaireResponse)?.answer?.[0]?.valueString ||\n    '___';\n\n  return (\n    <InnerStatePopover\n      popoverChildren={\n        <Box sx={{ p: 2, maxWidth: '330px' }}>\n          <Typography fontWeight={500}>Provider reminder</Typography>\n          <Typography>\n            Please confirm the patient's name, DOB, and introduce yourself with your licensure and credentials (e.g. My\n            name is Dr. {providerName} and I am licensed in {states} and board certified in pediatrics). For patients\n            located in NJ you must also confirm their address, the address for this patient is: {address}\n          </Typography>\n        </Box>\n      }\n      popoverProps={{ sx: undefined }}\n    >\n      {({ handlePopoverOpen }) => (\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, cursor: 'pointer' }} onClick={handlePopoverOpen}>\n          <ReminderIcon fontSize=\"small\" />\n          <Typography variant=\"body2\" fontWeight={500}>\n            Reminder\n          </Typography>\n        </Box>\n      )}\n    </InnerStatePopover>\n  );\n};\n"]}