{"version":3,"file":"CompletedFormsContainer.js","sourceRoot":"","sources":["CompletedFormsContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useAuth0 } from '@auth0/auth0-react';\nimport { otherColors } from '@ehrTheme/colors';\nimport { Button } from '@mui/material';\nimport { Bundle, BundleEntry, DocumentReference } from 'fhir/r4b';\nimport { FC, ReactElement, useState } from 'react';\nimport { CONSENT_CODE, getIpAddress, getQuestionnaireResponseByLinkId, mdyStringFromISOString } from 'utils';\nimport { getPresignedFileUrl } from '../../../../helpers/files.helper';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { useAppointmentStore, useGetDocumentReferences } from '../../../state';\nimport { InformationCard } from './InformationCard';\nconst PdfButton = ({ pdfUrl }: { pdfUrl?: string }): ReactElement => {\n  return (\n    <Button\n      variant=\"outlined\"\n      sx={{\n        borderColor: otherColors.consentBorder,\n        borderRadius: 100,\n        textTransform: 'none',\n        fontWeight: 500,\n        fontSize: 14,\n        minWidth: 'max-content',\n      }}\n      href={pdfUrl || ''}\n      target=\"_blank\"\n      disabled={!pdfUrl}\n    >\n      Get PDF\n    </Button>\n  );\n};\n\nexport const CompletedFormsContainer: FC = () => {\n  const { getAccessTokenSilently } = useAuth0();\n  const { patient, appointment, questionnaireResponse } = getSelectors(useAppointmentStore, [\n    'patient',\n    'appointment',\n    'questionnaireResponse',\n  ]);\n\n  const [consentPdfUrl, setConsentPdfUrl] = useState<string | undefined>();\n  const [hipaaPdfUrl, setHipaaPdfUrl] = useState<string | undefined>();\n\n  useGetDocumentReferences({ appointmentId: appointment?.id, patientId: patient?.id }, async (data) => {\n    const authToken = await getAccessTokenSilently();\n\n    const documentReferenceResources: DocumentReference[] = [];\n\n    const bundleEntries = data.entry;\n    bundleEntries?.forEach((bundleEntry: BundleEntry) => {\n      const bundleResource = bundleEntry.resource as Bundle;\n      bundleResource.entry?.forEach((entry) => {\n        const docRefResource = entry.resource as DocumentReference;\n        if (docRefResource) {\n          documentReferenceResources.push(docRefResource);\n        }\n      });\n    });\n\n    for (const docRef of documentReferenceResources) {\n      const docRefCode = docRef.type?.coding?.[0].code;\n\n      if (docRefCode === CONSENT_CODE) {\n        for (const content of docRef.content) {\n          const title = content.attachment.title;\n          const z3Url = content.attachment.url;\n          const presignedUrl = z3Url && (await getPresignedFileUrl(z3Url, authToken));\n\n          if (title === 'Consent forms') {\n            setConsentPdfUrl(presignedUrl);\n          } else if (title === 'HIPAA forms') {\n            setHipaaPdfUrl(presignedUrl);\n          }\n        }\n      }\n    }\n  });\n\n  const hipaaAcknowledgement = getQuestionnaireResponseByLinkId('hipaa-acknowledgement', questionnaireResponse)\n    ?.answer?.[0]?.valueBoolean;\n  const consentToTreat = getQuestionnaireResponseByLinkId('consent-to-treat', questionnaireResponse)?.answer?.[0]\n    ?.valueBoolean;\n\n  const signature = getQuestionnaireResponseByLinkId('signature', questionnaireResponse)?.answer?.[0]?.valueString;\n  const fullName = getQuestionnaireResponseByLinkId('full-name', questionnaireResponse)?.answer?.[0]?.valueString;\n  const relationship = getQuestionnaireResponseByLinkId('consent-form-signer-relationship', questionnaireResponse)\n    ?.answer?.[0]?.valueString;\n  const signDate = questionnaireResponse?.authored && mdyStringFromISOString(questionnaireResponse?.authored);\n  const ipAddress = getIpAddress(questionnaireResponse);\n\n  return (\n    <InformationCard\n      title=\"Completed consent forms\"\n      fields={[\n        {\n          label: 'I have reviewed and accept HIPAA Acknowledgement',\n          value: hipaaAcknowledgement ? 'Signed' : 'Not signed',\n          button: <PdfButton pdfUrl={hipaaPdfUrl} />,\n        },\n        {\n          label: 'I have reviewed and accept Consent to Treat, Guarantee of Payment & Card on File Agreement',\n          value: consentToTreat ? 'Signed' : 'Not signed',\n          button: <PdfButton pdfUrl={consentPdfUrl} />,\n        },\n        {\n          label: 'Signature',\n          value: signature,\n        },\n        {\n          label: 'Full name',\n          value: fullName,\n        },\n        {\n          label: 'Relationship to the patient',\n          value: relationship,\n        },\n        {\n          label: 'Date',\n          value: signDate,\n        },\n        {\n          label: 'IP',\n          value: ipAddress,\n        },\n      ]}\n    />\n  );\n};\n"]}