{"version":3,"file":"TitleRow.js","sourceRoot":"","sources":["TitleRow.tsx"],"names":[],"mappings":";;;AAAA,0CAAiD;AACjD,+BAA8C;AAC9C,+BAA4D;AAC5D,sEAAqE;AACrE,yEAAwE;AACxE,wCAAqD;AACrD,iEAAgE;AAEzD,IAAM,QAAQ,GAAO;;IACpB,IAAA,KAA4C,IAAA,2BAAY,EAAC,2BAAmB,EAAE;QAClF,SAAS;QACT,aAAa;QACb,iBAAiB;KAClB,CAAC,EAJM,OAAO,aAAA,EAAE,WAAW,iBAAA,EAAE,eAAe,qBAI3C,CAAC;IAEH,IAAM,QAAQ,GAAG,IAAA,eAAO,EAAC;QACvB,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,IAAA,mBAAW,EAAC,OAAO,CAAC,CAAC;QAC9B,CAAC;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,IAAM,YAAY,GAAG,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK,KAAI,IAAA,8BAAsB,EAAC,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK,CAAC,CAAC;IACtF,IAAM,MAAM,GACV,CAAA,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,0CAAE,KAAK;SAC/B,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,IAAI,CAAA;QACrB,UAAG,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,IAAI,eAAK,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,0CAAE,KAAK,CAAC,WAAW,EAAE,CAAE,CAAC;IACzE,IAAA,KAAgD,IAAA,gBAAQ,EAAU,KAAK,CAAC,EAAvE,mBAAmB,QAAA,EAAE,sBAAsB,QAA4B,CAAC;IAE/E,IAAM,qBAAqB,GAAG,cAAY,OAAA,sBAAsB,CAAC,KAAK,CAAC,EAA7B,CAA6B,CAAC;IAExE,OAAO,CACL,EACE;MAAA,CAAC,eAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAClE;QAAA,CAAC,mCAAgB,CAAC,OAAO,CAAC,CAAC,cAAM,OAAA,sBAAsB,CAAC,IAAI,CAAC,EAA5B,CAA4B,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EACzG;QAAA,CAAC,qBAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAC3C;UAAA,CAAC,QAAQ,CACX;QAAA,EAAE,qBAAU,CAEZ;;QAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,qBAAU,CAErD;;QAAA,CAAC,qBAAU,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,qBAAU,CACjD;MAAA,EAAE,eAAI,CACN;MAAA,CAAC,6CAAqB,CAAC,SAAS,CAAC,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,CAAC,qBAAqB,CAAC,EACxF;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC;AAtCW,QAAA,QAAQ,YAsCnB","sourcesContent":["import { Grid, Typography } from '@mui/material';\nimport { FC, useMemo, useState } from 'react';\nimport { getFullName, mdyStringFromISOString } from 'utils';\nimport { getSelectors } from '../../../../shared/store/getSelectors';\nimport { PencilIconButton } from '../../../components/PencilIconButton';\nimport { useAppointmentStore } from '../../../state';\nimport { EditPatientNameDialog } from './EditPatientNameDialog';\n\nexport const TitleRow: FC = () => {\n  const { patient, appointment, locationVirtual } = getSelectors(useAppointmentStore, [\n    'patient',\n    'appointment',\n    'locationVirtual',\n  ]);\n\n  const fullName = useMemo(() => {\n    if (patient) {\n      return getFullName(patient);\n    }\n    return '';\n  }, [patient]);\n\n  const visitStarted = appointment?.start && mdyStringFromISOString(appointment?.start);\n  const office =\n    locationVirtual?.address?.state &&\n    locationVirtual?.name &&\n    `${locationVirtual?.name}, ${locationVirtual?.address?.state.toUpperCase()}`;\n  const [updateNameModalOpen, setUpdateNameModalOpen] = useState<boolean>(false);\n\n  const closePatientNameModal = (): void => setUpdateNameModalOpen(false);\n\n  return (\n    <>\n      <Grid container direction=\"row\" sx={{ mt: 1, alignItems: 'center' }}>\n        <PencilIconButton onClick={() => setUpdateNameModalOpen(true)} size=\"25px\" sx={{ mr: '7px', padding: 0 }} />\n        <Typography variant=\"h2\" color=\"primary.dark\">\n          {fullName}\n        </Typography>\n\n        <Typography sx={{ ml: 2 }}>{visitStarted}</Typography>\n\n        <Typography sx={{ ml: 2 }}>{office}</Typography>\n      </Grid>\n      <EditPatientNameDialog modalOpen={updateNameModalOpen} onClose={closePatientNameModal} />\n    </>\n  );\n};\n"]}