{"version":3,"file":"EditInsurance.js","sourceRoot":"","sources":["EditInsurance.tsx"],"names":[],"mappings":"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","sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  FormLabel,\n  Grid,\n  Paper,\n  Skeleton,\n  TextField,\n  Typography,\n  useTheme,\n} from '@mui/material';\nimport { Organization } from 'fhir/r4b';\nimport { enqueueSnackbar } from 'notistack';\nimport { useRef, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { FHIR_EXTENSION, INSURANCE_SETTINGS_MAP } from 'utils';\nimport { INSURANCES_URL } from '../../../App';\nimport CustomBreadcrumbs from '../../../components/CustomBreadcrumbs';\nimport PageContainer from '../../../layout/PageContainer';\nimport { useInsuranceMutation, useInsuranceOrganizationsQuery, useInsurancesQuery } from './telemed-admin.queries';\n\n// TODO: uncomment when insurance settings will be applied to patient paperwork step with filling insurance data\n// const INSURANCE_SETTINGS_CHECKBOXES: Array<\n//   Exclude<keyof typeof INSURANCE_SETTINGS_MAP, typeof ENABLE_ELIGIBILITY_CHECK_KEY>\n// > = [\n//   'requiresSubscriberId',\n//   'requiresSubscriberName',\n//   'requiresSubscriberDOB',\n//   'requiresRelationshipToSubscriber',\n//   'requiresInsuranceName',\n//   'requiresInsuranceCardImage',\n//   'requiresFacilityNPI',\n//   'requiresStateUID',\n// ];\n\ntype InsuranceSettingsBooleans = {\n  [key in keyof typeof INSURANCE_SETTINGS_MAP]?: boolean;\n};\n\ninterface PayorOrg {\n  name?: string;\n  id?: string;\n}\n\nexport type InsuranceData = InsuranceSettingsBooleans & {\n  id: Organization['id'];\n  payor?: PayorOrg;\n  displayName: string;\n  active: Organization['active'];\n};\n\ntype InsuranceForm = Omit<InsuranceData, 'id' | 'active'>;\n\nexport default function EditInsurance(): JSX.Element {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const { insurance: insuranceIdParam } = useParams();\n  const isNew = insuranceIdParam === 'new';\n  const insuranceId = isNew ? undefined : insuranceIdParam;\n  const [error, setError] = useState('');\n  const didSetInsuranceDetailsForm = useRef(false);\n\n  const { control, getValues, reset } = useForm<InsuranceForm>({\n    defaultValues: {\n      payor: undefined,\n      displayName: '',\n\n      // TODO: uncomment when insurance settings will be applied to patient paperwork step with filling insurance data\n      // ...INSURANCE_SETTINGS_DEFAULTS,\n    },\n  });\n\n  const { isFetching: insuranceOrgsFetching, data: insuranceOrgsData } = useInsuranceOrganizationsQuery();\n  const insurancePayorOrgs: PayorOrg[] = insuranceOrgsData?.map((org) => ({ name: org.name, id: org.id })) || [\n    { id: '', name: '' },\n  ];\n\n  const {\n    data: insuranceData,\n    isFetching: insuranceDataLoading,\n    refetch: refetchInsuranceData,\n  } = useInsurancesQuery(insuranceId, insuranceId !== undefined);\n  const insuranceDetails = isNew ? undefined : insuranceData?.[0];\n  const isActive = insuranceDetails?.active ?? true;\n\n  const [payerNameInputValue, setPayerNameInputValue] = useState('');\n\n  const settingsMap = Object.fromEntries(\n    Object.entries(INSURANCE_SETTINGS_MAP).map(([key, _]) => [key as keyof typeof INSURANCE_SETTINGS_MAP, false])\n  ) as InsuranceSettingsBooleans;\n\n  insuranceDetails?.extension\n    ?.find((ext) => ext.url === FHIR_EXTENSION.InsurancePlan.insuranceRequirements.url)\n    ?.extension?.forEach((settingExt) => {\n      settingsMap[settingExt.url as keyof typeof INSURANCE_SETTINGS_MAP] = settingExt.valueBoolean || false;\n    });\n\n  if (insuranceDetails && !didSetInsuranceDetailsForm.current) {\n    reset({\n      payor: insuranceDetails,\n      displayName: insuranceDetails.name,\n      ...settingsMap,\n    });\n    didSetInsuranceDetailsForm.current = true;\n  }\n\n  const { mutateAsync: mutateInsurance, isLoading: mutationPending } = useInsuranceMutation(insuranceDetails);\n\n  const onSubmit = async (event: any): Promise<void> => {\n    setError('');\n    event.preventDefault();\n    const formData = getValues();\n    const data: InsuranceData = {\n      id: insuranceId,\n      active: insuranceDetails?.active ?? true,\n      ...formData,\n    };\n    const submitSnackbarText = isNew\n      ? `${data.displayName} was successfully created`\n      : `${data.displayName} was updated successfully`;\n    try {\n      const mutateResp = await mutateInsurance(data);\n      enqueueSnackbar(`${submitSnackbarText}`, {\n        variant: 'success',\n      });\n      const mutateInsuranceId = mutateResp.id ? mutateResp.id : '';\n      navigate(INSURANCES_URL + `/${mutateInsuranceId}`);\n    } catch {\n      const submitErrorString = 'Error trying to save insurance configuration. Please, try again';\n      setError(`${submitErrorString}`);\n      enqueueSnackbar(`${submitErrorString}`, {\n        variant: 'error',\n      });\n    }\n  };\n\n  const handleStatusChange = async (newStatus: InsuranceData['active']): Promise<void> => {\n    try {\n      await mutateInsurance({\n        id: insuranceId,\n        payor: insuranceDetails,\n        displayName: insuranceDetails!.name || '',\n        ...settingsMap,\n        active: newStatus,\n      });\n      await refetchInsuranceData();\n      enqueueSnackbar(`${insuranceDetails!.name || 'Insurance'} status was updated successfully`, {\n        variant: 'success',\n      });\n    } catch {\n      const statusErrorString = 'Error trying to change insurance configuration status. Please, try again';\n      setError(`${statusErrorString}`);\n      enqueueSnackbar(`${statusErrorString}`, {\n        variant: 'error',\n      });\n    }\n  };\n\n  return (\n    <PageContainer tabTitle={'Edit State'}>\n      <Grid container direction=\"row\" alignItems=\"center\" justifyContent=\"center\">\n        <Grid item maxWidth={'584px'} width={'100%'}>\n          <CustomBreadcrumbs\n            chain={[\n              { link: INSURANCES_URL, children: 'Insurance' },\n              {\n                link: '#',\n                children: isNew ? (\n                  'New insurance'\n                ) : insuranceDataLoading ? (\n                  <Skeleton width={150} />\n                ) : (\n                  insuranceDetails?.name || ''\n                ),\n              },\n            ]}\n          />\n          <Typography\n            variant=\"h3\"\n            color=\"primary.dark\"\n            marginTop={2}\n            marginBottom={2}\n            sx={{ display: 'flex', flexDirection: 'row', alignItems: 'center', fontWeight: '600 !important' }}\n          >\n            {insuranceDataLoading ? <Skeleton width={250} /> : insuranceDetails?.name || (isNew ? 'New' : '')}\n          </Typography>\n          {insuranceId && insuranceDataLoading ? (\n            <Skeleton height={550} sx={{ marginY: -5 }} />\n          ) : (\n            <Paper sx={{ padding: 3 }}>\n              {/* Breadcrumbs */}\n\n              <form onSubmit={onSubmit}>\n                <FormLabel\n                  sx={{\n                    ...theme.typography.h4,\n                    color: theme.palette.primary.dark,\n                    mb: 2,\n                    fontWeight: '600 !important',\n                    display: 'block',\n                  }}\n                >\n                  Insurance settings\n                </FormLabel>\n                <Controller\n                  name=\"payor\"\n                  control={control}\n                  render={({ field: { onChange, value } }) => {\n                    return (\n                      <Autocomplete\n                        value={value || null}\n                        disabled={insuranceOrgsFetching}\n                        getOptionLabel={(option) => option.name || ''}\n                        loading={insuranceOrgsFetching}\n                        isOptionEqualToValue={(option, value) => {\n                          return option.id === value.id;\n                        }}\n                        onChange={(_, newValue) => {\n                          onChange(newValue as PayorOrg);\n                        }}\n                        inputValue={payerNameInputValue}\n                        onInputChange={(_, newValue) => setPayerNameInputValue(newValue)}\n                        options={insurancePayorOrgs}\n                        renderOption={(props, option) => {\n                          return (\n                            <li {...props} key={option.id}>\n                              {option.name}\n                            </li>\n                          );\n                        }}\n                        fullWidth\n                        renderInput={(params) => (\n                          <TextField placeholder=\"Select payer name\" {...params} label=\"Payer name\" required />\n                        )}\n                      />\n                    );\n                  }}\n                />\n                <Controller\n                  name=\"displayName\"\n                  control={control}\n                  render={({ field: { onChange, value } }) => (\n                    <TextField\n                      id=\"outlined-read-only-input\"\n                      label=\"Display name\"\n                      value={value || ''}\n                      onChange={onChange}\n                      sx={{ marginTop: 2, marginBottom: 1, width: '100%' }}\n                      margin=\"dense\"\n                    />\n                  )}\n                />\n\n                {/* TODO: uncomment when insurance settings will be applied to patient paperwork step with filling insurance data */}\n                {/* <Controller\n                  name={ENABLE_ELIGIBILITY_CHECK_KEY}\n                  control={control}\n                  render={({ field: { onChange, value } }) => (\n                    <FormControlLabel\n                      sx={{ width: '100%' }}\n                      value={value}\n                      checked={value}\n                      control={<Switch checked={value || false} onChange={onChange} />}\n                      label={INSURANCE_SETTINGS_MAP[ENABLE_ELIGIBILITY_CHECK_KEY]}\n                    />\n                  )}\n                ></Controller> */}\n                {/* {INSURANCE_SETTINGS_CHECKBOXES.map((settingName) => {\n                  const name = settingName as keyof typeof INSURANCE_SETTINGS_MAP;\n                  return (\n                    <Controller\n                      key={name}\n                      name={name}\n                      control={control}\n                      render={({ field: { onChange, value } }) => (\n                        <FormControlLabel\n                          sx={{ width: '100%' }}\n                          value={value}\n                          disabled={INSURANCE_SETTINGS_DEFAULTS[name] === true}\n                          checked={value}\n                          control={<Checkbox onChange={onChange}></Checkbox>}\n                          label={INSURANCE_SETTINGS_MAP[name]}\n                        />\n                      )}\n                    ></Controller>\n                  );\n                })} */}\n                {error && (\n                  <Box color=\"error.main\" width=\"100%\" marginTop={2}>\n                    {error}\n                  </Box>\n                )}\n                <LoadingButton\n                  variant=\"contained\"\n                  color=\"primary\"\n                  loading={mutationPending}\n                  sx={{\n                    textTransform: 'none',\n                    borderRadius: 28,\n                    marginTop: 3,\n                    fontWeight: 'bold',\n                    marginRight: 1,\n                  }}\n                  type=\"submit\"\n                  disabled={false}\n                >\n                  Save changes\n                </LoadingButton>\n                <Link to={INSURANCES_URL}>\n                  <Button\n                    variant=\"text\"\n                    color=\"primary\"\n                    sx={{\n                      textTransform: 'none',\n                      borderRadius: 28,\n                      marginTop: 3,\n                      fontWeight: 'bold',\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </Link>\n              </form>\n            </Paper>\n          )}\n          {insuranceId !== 'new' &&\n            (insuranceDataLoading ? (\n              <Skeleton height={300} sx={{ marginTop: -8 }} />\n            ) : (\n              <Paper sx={{ padding: 3, marginTop: 3 }}>\n                <Typography variant=\"h4\" color=\"primary.dark\" sx={{ fontWeight: '600 !important' }}>\n                  {isActive ? 'Deactivate insurance' : 'Activate insurance'}\n                </Typography>\n                <Typography variant=\"body1\" marginTop={1}>\n                  {isActive\n                    ? 'When you deactivate this insurance, patients will not be able to select it.'\n                    : 'Activate this license.'}\n                </Typography>\n\n                <LoadingButton\n                  variant=\"contained\"\n                  color={isActive ? 'error' : 'primary'}\n                  sx={{\n                    textTransform: 'none',\n                    borderRadius: 28,\n                    marginTop: 4,\n                    fontWeight: 'bold',\n                    marginRight: 1,\n                  }}\n                  loading={mutationPending}\n                  onClick={() => handleStatusChange(!isActive)}\n                >\n                  {isActive ? 'Deactivate' : 'Activate'}\n                </LoadingButton>\n              </Paper>\n            ))}\n        </Grid>\n      </Grid>\n    </PageContainer>\n  );\n}\n"]}