{"version":3,"file":"States.js","sourceRoot":"","sources":["States.tsx"],"names":[],"mappings":"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","sourcesContent":["import { otherColors } from '@ehrTheme/colors';\nimport SearchIcon from '@mui/icons-material/Search';\nimport {\n  Box,\n  Grid,\n  Paper,\n  Skeleton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TextField,\n  useTheme,\n} from '@mui/material';\nimport React, { ReactElement } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AllStates, AllStatesToNames, AllStatesToVirtualLocationsData, State, StateType } from 'utils';\nimport { isLocationVirtual } from 'utils';\nimport { STATES_URL } from '../../../App';\nimport Loading from '../../../components/Loading';\nimport { STATES_ROWS_PER_PAGE } from '../../../constants';\nimport { dataTestIds } from '../../../constants/data-test-ids';\nimport { BooleanStateChip } from '../..';\nimport { useStatesQuery } from './telemed-admin.queries';\n\nexport default function StatesPage(): ReactElement {\n  const theme = useTheme();\n  // set up the pagination states\n  const [rowsPerPage, setRowsPerPage] = React.useState(STATES_ROWS_PER_PAGE);\n  const [pageNumber, setPageNumber] = React.useState(0);\n  const [searchText, setSearchText] = React.useState('');\n\n  const { data, isFetching } = useStatesQuery();\n  const stateLocations = React.useMemo(() => data || [], [data]);\n\n  // Filter the states based on the locations\n  const fhirLocationStates = React.useMemo(\n    () =>\n      stateLocations\n        ? AllStates.filter((state: State) =>\n            stateLocations.some((loc) => loc.address?.state === state.value && isLocationVirtual(loc))\n          )\n        : [],\n    [stateLocations]\n  );\n\n  // Filter the states based on the search text\n  const filteredStates = React.useMemo(\n    () =>\n      fhirLocationStates.filter((state: State) =>\n        `${state.label} - ${AllStatesToVirtualLocationsData[state.value as StateType]}`\n          .toLowerCase()\n          .includes(searchText.toLowerCase())\n      ),\n    [searchText, fhirLocationStates]\n  );\n\n  // For pagination, only include the rows that are on the current page\n  const pageStates = React.useMemo(\n    () =>\n      filteredStates.slice(\n        pageNumber * rowsPerPage, // skip over the rows from previous pages\n        (pageNumber + 1) * rowsPerPage // only show the rows from the current page\n      ),\n    [pageNumber, filteredStates, rowsPerPage]\n  );\n\n  // Handle pagination\n  const handleChangePage = (_: unknown, newPageNumber: number): void => {\n    setPageNumber(newPageNumber);\n  };\n\n  // Handle changing the number of rows per page\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    setRowsPerPage(parseInt(event.target.value));\n    setPageNumber(0);\n  };\n\n  // Handle changing the search text\n  const handleChangeSearchText = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void =>\n    setSearchText(event.target.value);\n\n  return (\n    <Paper sx={{ padding: 2 }}>\n      <TableContainer>\n        <Grid container spacing={2} paddingTop={1}>\n          {/* Locations Search Box */}\n          <Grid item xs={12} sm={5} marginTop={-0.5}>\n            <Box sx={{ display: 'contents' }}>\n              <Box>\n                <TextField\n                  id=\"outlined-basic\"\n                  label=\"States\"\n                  variant=\"outlined\"\n                  onChange={(e) => {\n                    if (pageNumber !== 0) setPageNumber(0);\n                    handleChangeSearchText(e);\n                  }}\n                  InputProps={{ endAdornment: <SearchIcon /> }}\n                  sx={{ marginBottom: 2 }}\n                  margin=\"dense\"\n                  data-testid={dataTestIds.statesPage.statesSearch}\n                />\n              </Box>\n            </Box>\n          </Grid>\n          {isFetching && <Loading />}\n        </Grid>\n\n        <Table sx={{ minWidth: 650 }} aria-label=\"locationsTable\">\n          {/* Label Row */}\n          <TableHead>\n            <TableRow>\n              <TableCell sx={{ fontWeight: 'bold', width: '50%' }}>State name</TableCell>\n              <TableCell sx={{ fontWeight: 'bold' }} align=\"left\">\n                Operate in state\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {pageStates.map((state: State, idx: number) => {\n              const stateLocation = stateLocations.find((loc) => loc.address?.state === state.value);\n              const operatesInState = Boolean(stateLocation && stateLocation.status === 'active');\n              const operatesLabelText = operatesInState ? 'yes' : 'no';\n              return (\n                <TableRow key={idx} data-testid={dataTestIds.statesPage.stateRow(state.value)}>\n                  <TableCell data-testid={dataTestIds.statesPage.stateValue}>\n                    <Link\n                      to={`${STATES_URL}/${state.value}`}\n                      style={{\n                        display: 'contents',\n                        color: theme.palette.primary.main,\n                      }}\n                    >\n                      {state.label} - {AllStatesToNames[state.value as StateType]}\n                    </Link>\n                  </TableCell>\n                  <TableCell\n                    align=\"left\"\n                    sx={{\n                      color: otherColors.tableRow,\n                    }}\n                  >\n                    {isFetching ? (\n                      <Skeleton width={35} height={20} />\n                    ) : (\n                      <BooleanStateChip\n                        dataTestId={dataTestIds.statesPage.operateInStateValue}\n                        label={operatesLabelText}\n                        state={operatesInState}\n                      />\n                    )}\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n\n        {/* Table Pagination */}\n        <TablePagination\n          rowsPerPageOptions={[10, 25, 50, 100]}\n          component=\"div\"\n          count={filteredStates.length}\n          rowsPerPage={rowsPerPage}\n          page={pageNumber}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n          data-testid={dataTestIds.pagination.paginationContainer}\n        />\n      </TableContainer>\n    </Paper>\n  );\n}\n"]}