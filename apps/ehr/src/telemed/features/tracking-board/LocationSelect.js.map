{"version":3,"file":"LocationSelect.js","sourceRoot":"","sources":["LocationSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Autocomplete, Chip, TextField } from '@mui/material';\nimport Oystehr from '@oystehr/sdk';\nimport { Location } from 'fhir/r4b';\nimport { ReactElement, useCallback, useEffect, useMemo, useState } from 'react';\nimport { isLocationVirtual } from 'utils';\nimport { dataTestIds } from '../../../constants/data-test-ids';\nimport { sortLocationsByLabel } from '../../../helpers';\nimport { useApiClients } from '../../../hooks/useAppClients';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useTrackingBoardStore } from '../../state';\n\ntype LocationsDropdownOption = {\n  label: string;\n  value: string | null;\n};\n\nenum LoadingState {\n  initial,\n  loading,\n  loaded,\n}\n\nexport function LocationsSelect(): ReactElement {\n  const { oystehr } = useApiClients();\n  const [locations, setLocations] = useState<Location[]>([]);\n  const [loadingState, setLoadingState] = useState(LoadingState.initial);\n  const { locationsIds } = getSelectors(useTrackingBoardStore, ['locationsIds']);\n\n  useEffect(() => {\n    async function getLocationsResults(oystehr: Oystehr): Promise<void> {\n      if (!oystehr) {\n        return;\n      }\n\n      setLoadingState(LoadingState.loading);\n\n      try {\n        let locationsResults = (\n          await oystehr.fhir.search<Location>({\n            resourceType: 'Location',\n            params: [{ name: '_count', value: '1000' }],\n          })\n        ).unbundle();\n        locationsResults = locationsResults.filter((loc) => !isLocationVirtual(loc));\n        setLocations(locationsResults);\n      } catch (e) {\n        console.error('error loading locations', e);\n      } finally {\n        setLoadingState(LoadingState.loaded);\n      }\n    }\n\n    if (oystehr && loadingState === LoadingState.initial) {\n      void getLocationsResults(oystehr);\n    }\n  }, [oystehr, loadingState]);\n\n  const options: LocationsDropdownOption[] = useMemo(() => {\n    const allLocations = locations.map((location) => {\n      return { label: `${location.address?.state?.toUpperCase()} - ${location.name}`, value: location.id };\n    });\n\n    return sortLocationsByLabel(allLocations as { label: string; value: string }[]);\n  }, [locations]);\n\n  const currentDropdownValues: LocationsDropdownOption[] = useMemo(() => {\n    if (locationsIds?.length === 0) {\n      return [];\n    }\n    const actualSelectedLocationsOptions: LocationsDropdownOption[] = (locationsIds || []).map((locationId) => ({\n      label: locations.find((locationTemp) => locationTemp.id === locationId)?.name || '',\n      value: locationId,\n    }));\n\n    return actualSelectedLocationsOptions;\n  }, [locationsIds, locations]);\n\n  const handleLocationsChange = useCallback((event: any, selectedOptions: LocationsDropdownOption[]): void => {\n    const locationsIds = selectedOptions\n      .filter((locationOption) => !!locationOption.value)\n      .map((locationOption) => locationOption.value!);\n\n    const locationsIdsOrNull = locationsIds.length !== 0 ? locationsIds : null;\n    useTrackingBoardStore.setState({ locationsIds: locationsIdsOrNull });\n  }, []);\n\n  return (\n    <Autocomplete\n      data-testid={dataTestIds.telemedEhrFlow.trackingBoardLocationsSelect}\n      value={currentDropdownValues}\n      onChange={handleLocationsChange}\n      getOptionLabel={(state) => state.label || 'Unknown'}\n      isOptionEqualToValue={(option, tempValue) => option.value === tempValue.value}\n      options={options}\n      renderOption={(props, option) => {\n        return (\n          <li\n            {...props}\n            key={option.value}\n            data-testid={dataTestIds.telemedEhrFlow.trackingBoardLocationsSelectOption(option.value!)}\n          >\n            {option.label}\n          </li>\n        );\n      }}\n      fullWidth\n      multiple\n      renderInput={(params) => <TextField name=\"location\" {...params} label=\"Locations\" />}\n      renderTags={(options: readonly LocationsDropdownOption[], getTagProps) =>\n        options.map((option: LocationsDropdownOption, index: number) => {\n          const { key, onDelete, ...tagProps } = getTagProps({ index });\n          return <Chip variant=\"filled\" label={option.label} key={key} onDelete={onDelete} {...tagProps} />;\n        })\n      }\n    />\n  );\n}\n"]}