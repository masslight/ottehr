{"version":3,"file":"StateSelect.js","sourceRoot":"","sources":["StateSelect.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Autocomplete, Chip, TextField } from '@mui/material';\nimport { ReactElement } from 'react';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport { AllStatesToVirtualLocationsData } from 'utils';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useTrackingBoardStore } from '../../state';\n\ntype UsStateDropdownOption = {\n  label: string;\n  value: string | null;\n};\n\nconst ALL_STATES_LABEL = 'All states';\nconst ALL_STATES_OPTION: UsStateDropdownOption = { label: ALL_STATES_LABEL, value: null };\n\nconst intersectArrays = (arr1: string[], arr2: string[]): string[] => {\n  const buffer = new Set(arr2);\n  return arr1.filter((element) => buffer.has(element));\n};\n\nconst areArraysEqual = (arr1: string[], arr2: string[]): boolean => {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport function StateSelect(): ReactElement {\n  const {\n    availableStates: providerLicensedStates,\n    selectedStates,\n    alignment,\n  } = getSelectors(useTrackingBoardStore, ['availableStates', 'selectedStates', 'alignment']);\n\n  const isMyPatientsFilterActivated = alignment === 'my-patients';\n  const possibleUsStates = isMyPatientsFilterActivated\n    ? providerLicensedStates\n    : Object.keys(AllStatesToVirtualLocationsData);\n\n  useEffect(() => {\n    if (!isMyPatientsFilterActivated) {\n      return;\n    }\n\n    if (!selectedStates) {\n      return;\n    }\n\n    const statesAfterAlignmentToggle = intersectArrays(selectedStates ?? [], providerLicensedStates);\n\n    if (areArraysEqual(selectedStates, statesAfterAlignmentToggle)) {\n      return;\n    }\n\n    useTrackingBoardStore.setState({ selectedStates: statesAfterAlignmentToggle });\n  }, [alignment, isMyPatientsFilterActivated, selectedStates, providerLicensedStates]);\n\n  const dropdownOptions: UsStateDropdownOption[] = [\n    ALL_STATES_OPTION,\n    ...possibleUsStates.map((usState) => ({ label: usState, value: usState })),\n  ];\n  const currentDropdownValues: UsStateDropdownOption[] = useMemo(() => {\n    if (possibleUsStates.length === 0) {\n      return [];\n    }\n    const actualSelectedStates = isMyPatientsFilterActivated\n      ? intersectArrays(selectedStates ?? [], providerLicensedStates)\n      : selectedStates;\n    const actualSelectedStatesOptions: UsStateDropdownOption[] = (actualSelectedStates || []).map((usState) => ({\n      label: usState,\n      value: usState,\n    }));\n\n    if (!actualSelectedStatesOptions || actualSelectedStatesOptions.length === 0) {\n      return [ALL_STATES_OPTION];\n    }\n    return actualSelectedStatesOptions;\n  }, [possibleUsStates, selectedStates, providerLicensedStates, isMyPatientsFilterActivated]);\n\n  const isOnlyAllStatesOptionSelected = useMemo(() => {\n    const firstOption = currentDropdownValues.at(0);\n    return (firstOption && firstOption.label === ALL_STATES_LABEL) ?? false;\n  }, [currentDropdownValues]);\n\n  const handleStateChange = useCallback(\n    (event: any, selectedOptions: UsStateDropdownOption[]): void => {\n      const hadSelectedStates = (selectedStates && selectedStates.length > 0) ?? false;\n      const hasSelectedAllStatesOption = selectedOptions.some((option) => option.label === ALL_STATES_LABEL);\n      if (hadSelectedStates && hasSelectedAllStatesOption) {\n        // if at least one US state has been previously selected and the user chooses \"All States\" option\n        // from the dropdown then clear all previous US states selection\n        useTrackingBoardStore.setState({ selectedStates: null });\n        return;\n      }\n\n      const statesNames = selectedOptions\n        .filter((usStateOption) => usStateOption.label !== ALL_STATES_LABEL)\n        .filter((usStateOption) => !!usStateOption.value)\n        .map((usStateOption) => usStateOption.value!);\n\n      const statesNamesOrNull = statesNames.length !== 0 ? statesNames : null;\n      useTrackingBoardStore.setState({ selectedStates: statesNamesOrNull });\n    },\n    [selectedStates]\n  );\n\n  return (\n    <Autocomplete\n      value={currentDropdownValues}\n      onChange={handleStateChange}\n      getOptionLabel={(state) => state.label || 'Unknown'}\n      isOptionEqualToValue={(option, tempValue) => option.value === tempValue.value}\n      options={dropdownOptions}\n      renderOption={(props, option) => {\n        return (\n          <li {...props} key={option.value}>\n            {option.label}\n          </li>\n        );\n      }}\n      fullWidth\n      multiple\n      disableClearable={isOnlyAllStatesOptionSelected}\n      renderInput={(params) => <TextField name=\"state\" {...params} label=\"State\" />}\n      renderTags={(options: readonly UsStateDropdownOption[], getTagProps) =>\n        options.map((option: UsStateDropdownOption, index: number) => {\n          const { key, onDelete, ...tagProps } = getTagProps({ index });\n          const onDeleteHandler = option.label !== ALL_STATES_LABEL ? onDelete : undefined;\n          return <Chip variant=\"filled\" label={option.label} key={key} onDelete={onDeleteHandler} {...tagProps} />;\n        })\n      }\n    />\n  );\n}\n"]}