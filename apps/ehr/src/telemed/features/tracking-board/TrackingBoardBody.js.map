{"version":3,"file":"TrackingBoardBody.js","sourceRoot":"","sources":["TrackingBoardBody.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Box,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  Switch,\n  TextField,\n  ToggleButtonGroup,\n} from '@mui/material';\nimport { ReactElement } from 'react';\nimport { PatternFormat } from 'react-number-format';\nimport { ProviderNotificationMethod } from 'utils';\nimport { dataTestIds } from '../../../constants/data-test-ids';\nimport { useUpdateProviderNotificationSettingsMutation } from '../../../features/notifications/notifications.queries';\nimport { useProviderNotificationsStore } from '../../../features/notifications/notifications.store';\nimport useEvolveUser from '../../../hooks/useEvolveUser';\nimport PageContainer from '../../../layout/PageContainer';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { ContainedPrimaryToggleButton } from '../../components';\nimport { useTrackingBoardStore } from '../../state';\nimport { TrackingBoardTabs } from './TrackingBoardTabs';\n\nexport function TrackingBoardBody(): ReactElement {\n  const { alignment, setAlignment } = getSelectors(useTrackingBoardStore, ['alignment', 'setAlignment']);\n  const user = useEvolveUser();\n  const { notificationsEnabled, notificationMethod } = getSelectors(useProviderNotificationsStore, [\n    'notificationsEnabled',\n    'notificationMethod',\n  ]);\n  const updateNotificationSettingsMutation = useUpdateProviderNotificationSettingsMutation((params) => {\n    useProviderNotificationsStore.setState({ notificationsEnabled: params.enabled, notificationMethod: params.method });\n  });\n  const phoneNumber = user?.profileResource?.telecom?.find((telecom) => telecom.system === 'sms')?.value;\n\n  return (\n    <form>\n      <PageContainer>\n        <>\n          <Grid container direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n            <ToggleButtonGroup size=\"small\" value={alignment} exclusive onChange={setAlignment}>\n              <ContainedPrimaryToggleButton\n                value=\"all-patients\"\n                data-testid={dataTestIds.telemedEhrFlow.allPatientsButton}\n              >\n                All Patients\n              </ContainedPrimaryToggleButton>\n              <ContainedPrimaryToggleButton\n                value=\"my-patients\"\n                data-testid={dataTestIds.telemedEhrFlow.myPatientsButton}\n              >\n                Patients Matching My Credentials\n              </ContainedPrimaryToggleButton>\n            </ToggleButtonGroup>\n\n            <Box>\n              <FormControl sx={{ marginTop: '7px', marginRight: '20px' }}>\n                <FormGroup>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        value={notificationsEnabled || false}\n                        disabled={updateNotificationSettingsMutation.isLoading}\n                        checked={notificationsEnabled || false}\n                        onChange={() =>\n                          updateNotificationSettingsMutation.mutateAsync({\n                            enabled: !notificationsEnabled,\n                            method: notificationMethod || ProviderNotificationMethod['phone and computer'],\n                          })\n                        }\n                      />\n                    }\n                    label=\"Send alerts\"\n                    labelPlacement=\"start\"\n                  />\n                </FormGroup>\n              </FormControl>\n              <PatternFormat\n                customInput={TextField}\n                value={phoneNumber}\n                format=\"(###) ###-####\"\n                label=\"Send alerts to:\"\n                InputLabelProps={{ shrink: true }}\n                placeholder=\"(XXX) XXX-XXXX\"\n                readOnly={!notificationsEnabled || notificationMethod === ProviderNotificationMethod['computer']}\n                disabled={!notificationsEnabled || notificationMethod === ProviderNotificationMethod['computer']}\n              />\n              <FormControl sx={{ marginLeft: 2, width: 250 }}>\n                <InputLabel id=\"alert-setting-label\">Notify me by:</InputLabel>\n                <Select\n                  labelId=\"alert-setting-label\"\n                  id=\"alert-setting\"\n                  value={notificationMethod || ProviderNotificationMethod['phone and computer']}\n                  label=\"Notify me by\"\n                  disabled={updateNotificationSettingsMutation.isLoading}\n                  onChange={(event) => {\n                    console.log(event.target);\n                    void updateNotificationSettingsMutation.mutateAsync({\n                      enabled: notificationsEnabled || false,\n                      method: event.target.value as ProviderNotificationMethod,\n                    });\n                  }}\n                >\n                  {Object.keys(ProviderNotificationMethod).map((key) => (\n                    <MenuItem\n                      key={key}\n                      value={ProviderNotificationMethod[key as keyof typeof ProviderNotificationMethod]}\n                    >\n                      {ProviderNotificationMethod[key as keyof typeof ProviderNotificationMethod]}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Box>\n          </Grid>\n          <TrackingBoardTabs />\n        </>\n      </PageContainer>\n    </form>\n  );\n}\n"]}