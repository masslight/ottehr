{"version":3,"file":"TrackingBoardFilters.js","sourceRoot":"","sources":["TrackingBoardFilters.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Box, Checkbox, FormControl, FormControlLabel, Grid, InputLabel, MenuItem, Select } from '@mui/material';\nimport { DateTime } from 'luxon';\nimport { FC } from 'react';\nimport { ApptTelemedTab } from 'utils';\nimport DateSearch from '../../../components/DateSearch';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useTrackingBoardStore } from '../../state';\nimport { UnsignedFor } from '../../utils';\nimport { LocationsSelect } from './LocationSelect';\nimport { StateSelect } from './StateSelect';\nimport { VisitTypeSelect } from './VisitTypeSelect';\n\nconst selectOptions = [\n  {\n    label: 'Under 12 hours',\n    value: UnsignedFor.under12,\n  },\n  {\n    label: 'More than 24 hours',\n    value: UnsignedFor.more24,\n  },\n  {\n    label: 'All',\n    value: UnsignedFor.all,\n  },\n];\n\nexport const TrackingBoardFilters: FC<{ tab: ApptTelemedTab }> = (props) => {\n  const { tab } = props;\n  // const { oystehr: oystehrClient } = useApiClients();\n  // const [practitioners, setPractitioners] = useState<Practitioner[] | undefined>(undefined);\n  // const [healthcareServices, setHealthcareServices] = useState<HealthcareService[] | undefined>(undefined);\n  // const [providers, setProviders] = useState<string[] | undefined>(undefined);\n  // const [groups, setGroups] = useState<string[] | undefined>(undefined);\n\n  // useEffect(() => {\n  //   async function getPractitioners(oystehrClient: Oystehr): Promise<void> {\n  //     if (!oystehrClient) {\n  //       return;\n  //     }\n\n  //     try {\n  //       const practitionersTemp: Practitioner[] = (\n  //         await oystehrClient.fhir.search<Practitioner>({\n  //           resourceType: 'Practitioner',\n  //           params: [\n  //             { name: '_count', value: '1000' },\n  //             // { name: 'name:missing', value: 'false' },\n  //           ],\n  //         })\n  //       ).unbundle();\n  //       setPractitioners(practitionersTemp);\n  //     } catch (e) {\n  //       console.error('error loading practitioners', e);\n  //     }\n  //   }\n  //   async function getHealthcareServices(oystehrClient: Oystehr): Promise<void> {\n  //     if (!oystehrClient) {\n  //       return;\n  //     }\n\n  //     try {\n  //       const healthcareServicesTemp: HealthcareService[] = (\n  //         await oystehrClient.fhir.search<HealthcareService>({\n  //           resourceType: 'HealthcareService',\n  //           params: [{ name: '_count', value: '1000' }],\n  //         })\n  //       ).unbundle();\n  //       setHealthcareServices(healthcareServicesTemp);\n  //     } catch (e) {\n  //       console.error('error loading healthcare services', e);\n  //     }\n  //   }\n\n  //   if (oystehrClient) {\n  //     void getPractitioners(oystehrClient);\n  //     void getHealthcareServices(oystehrClient);\n  //   }\n  // }, [oystehrClient]);\n\n  const { date, unsignedFor, showOnlyNext } = getSelectors(useTrackingBoardStore, [\n    'date',\n    'unsignedFor',\n    'showOnlyNext',\n  ]);\n\n  // const handleProviderChange = (_e: any, value: string[]): void => {\n  //   console.log(10, value);\n  //   setProviders(value);\n  //   useTrackingBoardStore.setState({ providers: value });\n  // };\n  // const handleGroupChange = (_e: any, value: string[]): void => {\n  //   console.log(10, value);\n  //   setGroups(value);\n  //   useTrackingBoardStore.setState({ groups: value });\n  // };\n  const useUnsigned = tab === ApptTelemedTab['not-signed'];\n  const useFirst = tab === ApptTelemedTab.ready;\n\n  return (\n    <Box sx={{ padding: 2, display: 'flex', flexDirection: 'column' }}>\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <LocationsSelect />\n        </Grid>\n        <Grid item xs={6}>\n          <StateSelect />\n        </Grid>\n        {/* <Grid item xs={6}>\n          <ProvidersSelect\n            providers={providers ? providers : []}\n            practitioners={practitioners}\n            handleSubmit={handleProviderChange}\n          ></ProvidersSelect>\n        </Grid> */}\n        {/* <Grid item xs={6}>\n          <GroupSelect\n            groups={groups ? groups : []}\n            healthcareServices={healthcareServices}\n            handleSubmit={handleGroupChange}\n          ></GroupSelect>\n        </Grid> */}\n        <Grid item xs={6}>\n          <DateSearch\n            label=\"Date\"\n            date={date}\n            setDate={(date) => useTrackingBoardStore.setState({ date })}\n            updateURL={false}\n            storeDateInLocalStorage={false}\n            defaultValue={DateTime.now()}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <VisitTypeSelect />\n        </Grid>\n        {useUnsigned && (\n          <Grid item xs={6}>\n            <FormControl fullWidth>\n              <InputLabel>Unsigned for</InputLabel>\n              <Select\n                value={unsignedFor}\n                label=\"Unsigned for\"\n                onChange={(event) => useTrackingBoardStore.setState({ unsignedFor: event.target.value as UnsignedFor })}\n              >\n                {selectOptions.map((option) => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        )}\n      </Grid>\n      {useFirst && (\n        <FormControlLabel\n          sx={{ pt: 2 }}\n          control={\n            <Checkbox\n              checked={showOnlyNext}\n              onChange={(e) => useTrackingBoardStore.setState({ showOnlyNext: e.target.checked })}\n            />\n          }\n          label=\"Show only NEXT\"\n        />\n      )}\n    </Box>\n  );\n};\n"]}