{"version":3,"file":"TrackingBoardTable.js","sourceRoot":"","sources":["TrackingBoardTable.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  alpha,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  useTheme,\n} from '@mui/material';\nimport { DateTime } from 'luxon';\nimport React, { ReactElement, useMemo } from 'react';\nimport { AllStatesToNames, ApptTelemedTab, StateType, TelemedAppointmentInformation } from 'utils';\nimport { dataTestIds } from '../../../constants/data-test-ids';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useTrackingBoardStore } from '../../state';\nimport { compareAppointments, compareLuxonDates, filterAppointments } from '../../utils';\nimport { TrackingBoardFilters } from './TrackingBoardFilters';\nimport { TrackingBoardTableRow, TrackingBoardTableRowSkeleton } from './TrackingBoardTableRow';\n\ninterface AppointmentTableProps {\n  tab: ApptTelemedTab;\n}\n\ninterface TrackingBoardColumn {\n  id: string;\n  label: string;\n  conditional?: {\n    showWhen: keyof ColumnConditions;\n  };\n}\n\ninterface ColumnConditions {\n  showProvider: boolean;\n}\n\nconst TRACKING_BOARD_COLUMNS_CONFIG: Record<string, TrackingBoardColumn> = {\n  STATUS: {\n    id: 'status',\n    label: 'Type & Status',\n  },\n  WAITING_TIME: {\n    id: 'waitingTime',\n    label: 'Waiting time',\n  },\n  PATIENT_INFO_REASON: {\n    id: 'patient-info-reason',\n    label: 'Patient & Reason',\n  },\n  LOCATION: {\n    id: 'state',\n    label: 'State',\n  },\n  PROVIDER: {\n    id: 'provider',\n    label: 'Provider',\n    conditional: {\n      showWhen: 'showProvider',\n    },\n  },\n  GROUP: {\n    id: 'group',\n    label: 'Group',\n  },\n  CHAT: {\n    id: 'chat',\n    label: 'Chat',\n  },\n  ACTION: {\n    id: 'action',\n    label: 'Action',\n  },\n};\n\nexport function TrackingBoardTable({ tab }: AppointmentTableProps): ReactElement {\n  const theme = useTheme();\n  const { appointments, selectedStates, availableStates, isAppointmentsLoading, unsignedFor, showOnlyNext } =\n    getSelectors(useTrackingBoardStore, [\n      'appointments',\n      'selectedStates',\n      'unsignedFor',\n      'availableStates',\n      'isAppointmentsLoading',\n      'showOnlyNext',\n    ]);\n\n  const filteredAppointments = filterAppointments(appointments, unsignedFor, tab, showOnlyNext, availableStates);\n\n  const showProvider = tab !== ApptTelemedTab.ready;\n\n  const columns = getVisibleColumns({ showProvider });\n\n  const groupsSortedByState: Record<string, TelemedAppointmentInformation[]> = useMemo(() => {\n    const createGroups = (): Record<string, TelemedAppointmentInformation[]> => {\n      return filteredAppointments.reduce<Record<string, TelemedAppointmentInformation[]>>(\n        (accumulator, appointment) => {\n          if (appointment.locationVirtual.state) {\n            if (!accumulator[appointment.locationVirtual.state]) {\n              accumulator[appointment.locationVirtual.state] = [];\n            }\n            accumulator[appointment.locationVirtual.state].push(appointment);\n            return accumulator;\n          } else if (appointment.provider) {\n            if (!accumulator[appointment.provider.join(',')]) {\n              accumulator[appointment.provider.join(',')] = [];\n            }\n            accumulator[appointment.provider.join(',')].push(appointment);\n            return accumulator;\n          } else if (appointment.group) {\n            if (!accumulator[appointment.group.join(',')]) {\n              accumulator[appointment.group.join(',')] = [];\n            }\n            accumulator[appointment.group.join(',')].push(appointment);\n            return accumulator;\n          } else {\n            console.error('missing location and provider and group for appointment', appointment);\n            return accumulator;\n          }\n        },\n        {}\n      );\n    };\n\n    const groups = createGroups();\n\n    const states = selectedStates || [];\n    if (!states || states.length === 0) {\n      return groups;\n    }\n    // Rebuild the record with a sorted states as keys\n    const sortedGroups: Record<string, TelemedAppointmentInformation[]> = {};\n    states.forEach((usState) => {\n      if (usState in groups) {\n        sortedGroups[usState] = groups[usState];\n      }\n    });\n\n    return sortedGroups;\n  }, [filteredAppointments, selectedStates]);\n\n  const groupCollapse = Object.keys(groupsSortedByState).reduce<Record<string, boolean>>((accumulator, state) => {\n    accumulator[state] = false;\n    return accumulator;\n  }, {});\n\n  const oldestId = filteredAppointments\n    .filter((appointment) => availableStates.includes(appointment.locationVirtual.state!))\n    .sort((a, b) => compareLuxonDates(DateTime.fromISO(a.start!), DateTime.fromISO(b.start!)))?.[0]?.id;\n  const showNext = tab === ApptTelemedTab.ready;\n\n  return (\n    <Box>\n      <TrackingBoardFilters tab={tab} />\n      <TableContainer sx={{ overflow: 'inherit' }} data-testid={dataTestIds.telemedEhrFlow.trackingBoardTable}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              {columns.map((column) => (\n                <TableCell key={column.id}>\n                  <Typography variant=\"subtitle2\" sx={{ fontSize: '14px' }}>\n                    {column.label}\n                  </Typography>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {isAppointmentsLoading ? (\n              <TrackingBoardTableRowSkeleton\n                showProvider={showProvider}\n                isState={false}\n                columnsCount={columns.length}\n              />\n            ) : (\n              Object.keys(groupsSortedByState).map((state) => (\n                <React.Fragment key={state}>\n                  <TableRow data-testid={dataTestIds.telemedEhrFlow.trackingBoardTableGroupRow}>\n                    <TableCell\n                      sx={{ backgroundColor: alpha(theme.palette.secondary.main, 0.08) }}\n                      colSpan={9 + +showProvider}\n                    >\n                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                        <Typography variant=\"subtitle2\" sx={{ fontSize: '14px' }}>\n                          {state} - {AllStatesToNames[state as StateType]}\n                        </Typography>\n                      </Box>\n                    </TableCell>\n                  </TableRow>\n                  {!groupCollapse[state] &&\n                    groupsSortedByState[state]\n                      .sort((a, b) => compareAppointments(tab === ApptTelemedTab['not-signed'], a, b))\n                      .map((appointment) => (\n                        <TrackingBoardTableRow\n                          key={appointment.id}\n                          appointment={appointment}\n                          showProvider={showProvider}\n                          next={appointment.id === oldestId && showNext}\n                        />\n                      ))}\n                </React.Fragment>\n              ))\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Box>\n  );\n}\n\nconst getVisibleColumns = (conditions: ColumnConditions): TrackingBoardColumn[] => {\n  return Object.values(TRACKING_BOARD_COLUMNS_CONFIG).filter(\n    (column) => !column.conditional || conditions[column.conditional.showWhen]\n  );\n};\n"]}