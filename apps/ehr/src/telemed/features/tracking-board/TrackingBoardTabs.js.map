{"version":3,"file":"TrackingBoardTabs.js","sourceRoot":"","sources":["TrackingBoardTabs.tsx"],"names":[],"mappings":"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","sourcesContent":["import { TabContext, TabList, TabPanel } from '@mui/lab';\nimport { Box, Paper, Tab } from '@mui/material';\nimport { ReactElement, useEffect, useState } from 'react';\nimport { ApptTelemedTab } from 'utils';\nimport CreateDemoVisits from '../../../components/CreateDemoVisits';\nimport Loading from '../../../components/Loading';\nimport { dataTestIds } from '../../../constants/data-test-ids';\nimport { getSelectors } from '../../../shared/store/getSelectors';\nimport { useOystehrAPIClient } from '../../hooks/useOystehrAPIClient';\nimport { useGetTelemedAppointments, useTrackingBoardStore } from '../../state';\nimport { ApptTabToStatus } from '../../utils';\nimport { TrackingBoardTable } from './TrackingBoardTable';\n\nexport function TrackingBoardTabs(): ReactElement {\n  const { alignment, selectedStates, date, providers, groups, setAppointments, locationsIds, visitTypes } =\n    getSelectors(useTrackingBoardStore, [\n      'alignment',\n      'selectedStates',\n      'providers',\n      'groups',\n      'date',\n      'setAppointments',\n      'locationsIds',\n      'visitTypes',\n    ]);\n\n  const [value, setValue] = useState<ApptTelemedTab>(ApptTelemedTab.ready);\n\n  const handleChange = (_: any, newValue: ApptTelemedTab): any => {\n    setValue(newValue);\n  };\n\n  const apiClient = useOystehrAPIClient();\n\n  const dateFilter = date ? date.toISODate()! : undefined;\n\n  const actualStatesFilter = selectedStates ? selectedStates : undefined;\n  const { isFetching, isFetchedAfterMount } = useGetTelemedAppointments(\n    {\n      apiClient,\n      usStatesFilter: actualStatesFilter,\n      locationsIdsFilter: locationsIds || undefined,\n      providersFilter: providers || undefined,\n      groupsFilter: groups || undefined,\n      patientFilter: alignment,\n      statusesFilter: ApptTabToStatus[value],\n      dateFilter,\n      visitTypesFilter: visitTypes || undefined,\n    },\n    (data) => {\n      setAppointments(data.appointments);\n    }\n  );\n\n  useEffect(() => {\n    useTrackingBoardStore.setState({ isAppointmentsLoading: !isFetchedAfterMount });\n  }, [isFetchedAfterMount]);\n\n  return (\n    <Box sx={{ width: '100%', marginTop: 3 }}>\n      <TabContext value={value}>\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n          <TabList onChange={handleChange} aria-label=\"appointment tabs\">\n            <Tab\n              label=\"Ready for provider\"\n              value={ApptTelemedTab.ready}\n              sx={{ textTransform: 'none', fontWeight: 500 }}\n              data-testid={dataTestIds.telemedEhrFlow.telemedAppointmentsTabs(ApptTelemedTab.ready)}\n            />\n            <Tab\n              label=\"Provider\"\n              value={ApptTelemedTab.provider}\n              sx={{ textTransform: 'none', fontWeight: 500 }}\n              data-testid={dataTestIds.telemedEhrFlow.telemedAppointmentsTabs(ApptTelemedTab.provider)}\n            />\n            <Tab\n              label=\"Unsigned\"\n              value={ApptTelemedTab['not-signed']}\n              sx={{ textTransform: 'none', fontWeight: 500 }}\n              data-testid={dataTestIds.telemedEhrFlow.telemedAppointmentsTabs(ApptTelemedTab['not-signed'])}\n            />\n            <Tab\n              label=\"Complete\"\n              value={ApptTelemedTab.complete}\n              sx={{ textTransform: 'none', fontWeight: 500 }}\n              data-testid={dataTestIds.telemedEhrFlow.telemedAppointmentsTabs(ApptTelemedTab.complete)}\n            />\n            {isFetching && <Loading />}\n          </TabList>\n        </Box>\n        <Paper sx={{ marginTop: 3 }}>\n          <TabPanel value={value} sx={{ padding: 0 }}>\n            <TrackingBoardTable tab={value} />\n          </TabPanel>\n        </Paper>\n        <CreateDemoVisits />\n      </TabContext>\n    </Box>\n  );\n}\n"]}