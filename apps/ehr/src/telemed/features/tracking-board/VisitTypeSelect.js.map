{"version":3,"file":"VisitTypeSelect.js","sourceRoot":"","sources":["VisitTypeSelect.tsx"],"names":[],"mappings":";;AAMA,0CA2BC;AAjCD,0CAAwD;AAExD,+BAAqC;AACrC,8CAA0E;AAC1E,wFAAwF;AAExF,SAAgB,eAAe;IACrB,IAAA,UAAU,GAAK,IAAA,oBAAY,EAAC,4CAAqB,EAAE,CAAC,YAAY,CAAC,CAAC,WAAxD,CAAyD;IAC3E,IAAM,iBAAiB,GAAG,MAAM,CAAC,IAAI,CAAC,+BAAuB,CAAC,CAAC,MAAM,CACnE,UAAC,GAAG,IAAK,OAAA,GAAG,KAAK,iBAAS,CAAC,OAAO,IAAI,GAAG,KAAK,iBAAS,CAAC,MAAM,EAArD,CAAqD,CAC/D,CAAC;IAEF,OAAO,CACL,CAAC,uBAAY,CACX,EAAE,CAAC,YAAY,CACf,EAAE,CAAC,CAAC;YACF,kCAAkC,EAAE;gBAClC,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE;gBAClC,SAAS,EAAE,OAAO;aACnB;SACF,CAAC,CACF,KAAK,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAC3D,OAAO,CAAC,CAAC,iBAAiB,CAAC,CAC3B,cAAc,CAAC,CAAC,UAAC,MAAM;YACrB,OAAO,+BAAuB,CAAC,MAAmB,CAAC,CAAC;QACtD,CAAC,CAAC,CACF,QAAQ,CAAC,CAAC,UAAC,CAAC,EAAE,KAAK;YACjB,4CAAqB,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAoB,EAAE,CAAC,CAAC;QACvE,CAAC,CAAC,CACF,QAAQ,CACR,WAAW,CAAC,CAAC,UAAC,MAAM,IAAK,OAAA,CAAC,oBAAS,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,MAAM,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAG,EAA/E,CAA+E,CAAC,EACzG,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { Autocomplete, TextField } from '@mui/material';\nimport { ReactElement } from 'react';\nimport { getSelectors } from 'utils';\nimport { VisitType, VisitTypeToLabelTelemed } from '../../../types/types';\nimport { useTrackingBoardStore } from '../../state/tracking-board/tracking-board.store';\n\nexport function VisitTypeSelect(): ReactElement {\n  const { visitTypes } = getSelectors(useTrackingBoardStore, ['visitTypes']);\n  const visitTypesOptions = Object.keys(VisitTypeToLabelTelemed).filter(\n    (key) => key === VisitType.PreBook || key === VisitType.WalkIn\n  );\n\n  return (\n    <Autocomplete\n      id=\"visitTypes\"\n      sx={{\n        '.MuiButtonBase-root.MuiChip-root': {\n          width: { xs: '100%', sm: '120px' },\n          textAlign: 'start',\n        },\n      }}\n      value={visitTypes != null ? visitTypes : visitTypesOptions}\n      options={visitTypesOptions}\n      getOptionLabel={(option) => {\n        return VisitTypeToLabelTelemed[option as VisitType];\n      }}\n      onChange={(_, value) => {\n        useTrackingBoardStore.setState({ visitTypes: value as VisitType[] });\n      }}\n      multiple\n      renderInput={(params) => <TextField name=\"visitTypes\" {...params} label=\"Visit type\" required={false} />}\n    />\n  );\n}\n"]}