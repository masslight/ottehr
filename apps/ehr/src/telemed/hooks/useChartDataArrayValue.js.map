{"version":3,"file":"useChartDataArrayValue.js","sourceRoot":"","sources":["useChartDataArrayValue.ts"],"names":[],"mappings":"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","sourcesContent":["import { enqueueSnackbar } from 'notistack';\nimport { useQueryClient } from 'react-query';\nimport { GetChartDataResponse, SaveableDTO, SearchParams } from 'utils';\nimport { useChartData } from '../../features/css-module/hooks/useChartData';\nimport { getSelectors } from '../../shared/store/getSelectors';\nimport { useAppointmentStore, useDeleteChartData, useSaveChartData } from '../state';\n\ntype ChartDataArrayValueType = Pick<\n  GetChartDataResponse,\n  'episodeOfCare' | 'allergies' | 'medications' | 'conditions' | 'surgicalHistory'\n>;\n\ntype ElementType<T extends ReadonlyArray<unknown>> = T extends ReadonlyArray<infer ElementType> ? ElementType : never;\n\nconst mapValueToLabel: Record<keyof ChartDataArrayValueType, string> = {\n  episodeOfCare: 'known hospitalizations',\n  allergies: 'known allergies',\n  medications: 'current medications',\n  conditions: 'medical conditions',\n  surgicalHistory: 'surgical history',\n};\n\nexport const useChartDataArrayValue = <\n  T extends keyof ChartDataArrayValueType,\n  K extends NonNullable<ChartDataArrayValueType[T]>,\n>(\n  name: T,\n  reset?: () => void,\n  customParams?: SearchParams,\n  onRemoveCallback?: () => any\n): {\n  isLoading: boolean;\n  onSubmit: (data: ElementType<K>) => Promise<boolean>;\n  onRemove: (resourceId: string) => Promise<void>;\n  values: K;\n} => {\n  const { mutate: saveChartData, isLoading: isSaveLoading } = useSaveChartData();\n  const { mutate: deleteChartData, isLoading: isDeleteLoading } = useDeleteChartData();\n  const { chartData, setPartialChartData, encounter } = getSelectors(useAppointmentStore, [\n    'chartData',\n    'setPartialChartData',\n    'encounter',\n  ]);\n  const {\n    isLoading: isChartDataLoading,\n    chartData: currentFieldData,\n    queryKey,\n  } = useChartData({\n    encounterId: encounter.id || '',\n    requestedFields: { [name]: customParams || {} },\n    enabled: !!customParams,\n    replaceStoreValues: true,\n  });\n  const queryClient = useQueryClient();\n\n  const values = (customParams ? currentFieldData?.[name] || [] : chartData?.[name] || []) as K;\n\n  const onSubmit = (data: ElementType<K>): Promise<boolean> => {\n    return new Promise((resolve, reject) => {\n      saveChartData(\n        {\n          [name]: [data],\n        },\n        {\n          onSuccess: (data) => {\n            setPartialChartData({\n              [name]: [...values, ...(data.chartData[name] as K)],\n            });\n            queryClient.setQueryData<typeof currentFieldData>(queryKey, (oldData) => ({\n              ...oldData!,\n              [name]: [...values, ...(data.chartData[name] as K)],\n            }));\n            resolve(true);\n          },\n          onError: (error) => {\n            enqueueSnackbar(`An error has occurred while adding ${mapValueToLabel[name]}. Please try again.`, {\n              variant: 'error',\n            });\n            reject(error);\n          },\n        }\n      );\n      if (reset) {\n        reset();\n      }\n    });\n  };\n\n  const onRemove = async (resourceId: string): Promise<void> => {\n    const newState = (values as K & SaveableDTO[]).filter((value) => value.resourceId === resourceId);\n    return deleteChartData(\n      {\n        [name]: newState,\n      },\n      {\n        onSuccess: (_data) => {\n          setPartialChartData({\n            [name]: (values as K & SaveableDTO[]).filter((value) => value.resourceId !== resourceId),\n          });\n          queryClient.setQueryData<typeof currentFieldData>(queryKey, (oldData) => ({\n            ...oldData!,\n            [name]: (values as K & SaveableDTO[]).filter((value) => value.resourceId !== resourceId),\n          }));\n          onRemoveCallback?.();\n        },\n        onError: () => {\n          enqueueSnackbar(`An error has occurred while deleting ${mapValueToLabel[name]}. Please try again.`, {\n            variant: 'error',\n          });\n        },\n      }\n    );\n  };\n\n  return { isLoading: isSaveLoading || isDeleteLoading || isChartDataLoading, onSubmit, onRemove, values };\n};\n"]}