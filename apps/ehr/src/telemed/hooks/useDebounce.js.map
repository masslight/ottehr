{"version":3,"file":"useDebounce.js","sourceRoot":"","sources":["useDebounce.ts"],"names":[],"mappings":";;;AAAA,+BAA+B;AAExB,IAAM,WAAW,GAAG,UAAC,OAAa;IAAb,wBAAA,EAAA,aAAa;IACvC,IAAM,UAAU,GAAG,IAAA,cAAM,GAAiC,CAAC;IAE3D,IAAM,QAAQ,GAAG,UAAC,IAAgB;QAChC,IAAI,UAAU,CAAC,OAAO,EAAE,CAAC;YACvB,KAAK,EAAE,CAAC;QACV,CAAC;QACD,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC;YAC9B,IAAI,EAAE,CAAC;QACT,CAAC,EAAE,OAAO,CAAC,CAAC;IACd,CAAC,CAAC;IAEF,IAAM,KAAK,GAAG;QACZ,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACjC,UAAU,CAAC,OAAO,GAAG,SAAS,CAAC;IACjC,CAAC,CAAC;IAEF,OAAO,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AAC7B,CAAC,CAAC;AAlBW,QAAA,WAAW,eAkBtB","sourcesContent":["import { useRef } from 'react';\n\nexport const useDebounce = (timeout = 500): { debounce: (func: () => void) => void; clear: () => void } => {\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n\n  const debounce = (func: () => void): void => {\n    if (timeoutRef.current) {\n      clear();\n    }\n    timeoutRef.current = setTimeout(() => {\n      func();\n    }, timeout);\n  };\n\n  const clear = (): void => {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  };\n\n  return { debounce, clear };\n};\n"]}