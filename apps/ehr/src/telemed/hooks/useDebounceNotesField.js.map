{"version":3,"file":"useDebounceNotesField.js","sourceRoot":"","sources":["useDebounceNotesField.ts"],"names":[],"mappings":"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","sourcesContent":["import { enqueueSnackbar } from 'notistack';\nimport { useRef } from 'react';\nimport { useChartData } from 'src/features/css-module/hooks/useChartData';\nimport { ChartDataFields } from 'utils';\nimport { getSelectors } from '../../shared/store/getSelectors';\nimport { useAppointmentStore, useDeleteChartData, useSaveChartData } from '../state';\n\ntype ChartDataTextValueType = Pick<\n  ChartDataFields,\n  'chiefComplaint' | 'ros' | 'surgicalHistoryNote' | 'medicalDecision' | 'addendumNote'\n>;\n\nconst nameToTypeEnum = {\n  chiefComplaint: 'text',\n  ros: 'text',\n  surgicalHistoryNote: 'text',\n  medicalDecision: 'text',\n  addendumNote: 'text',\n} as const;\n\nconst mapValueToLabel: Record<keyof ChartDataTextValueType, string> = {\n  chiefComplaint: 'HPI note',\n  ros: 'ROS note',\n  surgicalHistoryNote: 'Surgical history note',\n  medicalDecision: 'Medical Decision Making note',\n  addendumNote: 'Addendum note',\n};\n\nconst requestedFieldsOptions: Partial<Record<keyof ChartDataTextValueType, { _tag?: string }>> = {\n  chiefComplaint: { _tag: 'chief-complaint' },\n  ros: { _tag: 'ros' },\n  surgicalHistoryNote: { _tag: 'surgical-history-note' },\n  medicalDecision: { _tag: 'medical-decision' },\n  addendumNote: {},\n};\n\nexport const useDebounceNotesField = <T extends keyof ChartDataTextValueType>(\n  name: T\n): { onValueChange: (text: string) => void; isLoading: boolean; isChartDataLoading: boolean } => {\n  const { encounter, chartData, setPartialChartData } = getSelectors(useAppointmentStore, [\n    'encounter',\n    'chartData',\n    'setPartialChartData',\n  ]);\n  const { mutate: saveChartData, isLoading: isSaveLoading } = useSaveChartData();\n  const { mutate: deleteChartData, isLoading: isDeleteLoading } = useDeleteChartData();\n\n  const { isLoading: isChartDataLoading } = useChartData({\n    encounterId: encounter.id || '',\n    requestedFields: {\n      [name]: requestedFieldsOptions[name],\n    },\n    onSuccess: (data) => {\n      useAppointmentStore.setState((prevState) => ({\n        ...prevState,\n        chartData: {\n          ...prevState.chartData,\n          patientId: prevState.chartData?.patientId || '',\n          [name]: data[name],\n        },\n      }));\n    },\n  });\n\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n\n  const isLoading = isSaveLoading || isDeleteLoading;\n\n  const onValueChange = (text: string): void => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = undefined;\n    }\n    timeoutRef.current = setTimeout(() => {\n      text = text.trim();\n      const variables = {\n        [name]: {\n          resourceId: chartData?.[name]?.resourceId,\n          [nameToTypeEnum[name]]: text,\n        },\n      };\n      if (text) {\n        saveChartData(variables, {\n          onSuccess: (data) => {\n            setPartialChartData({ [name]: data.chartData[name] });\n          },\n          onError: () => {\n            enqueueSnackbar(`${mapValueToLabel[name]} field was not saved. Please change it's value to try again.`, {\n              variant: 'error',\n            });\n          },\n        });\n      } else {\n        setPartialChartData({ [name]: undefined });\n        deleteChartData(variables, {\n          onError: () => {\n            enqueueSnackbar(`${mapValueToLabel[name]} field was not saved. Please change it's value to try again.`, {\n              variant: 'error',\n            });\n          },\n        });\n      }\n    }, 700);\n  };\n\n  return { onValueChange, isLoading, isChartDataLoading };\n};\n"]}