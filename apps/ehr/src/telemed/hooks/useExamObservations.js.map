{"version":3,"file":"useExamObservations.js","sourceRoot":"","sources":["useExamObservations.ts"],"names":[],"mappings":"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","sourcesContent":["import { enqueueSnackbar } from 'notistack';\nimport { useCallback } from 'react';\nimport {\n  ExamCardsNames,\n  ExamFieldsNames,\n  ExamObservationDTO,\n  InPersonExamCardsNames,\n  InPersonExamFieldsNames,\n} from 'utils';\nimport { useFeatureFlags } from '../../features/css-module/context/featureFlags';\nimport {\n  useDeleteChartData,\n  useExamObservationsStore as useTelemedExamObservationsStore,\n  useInPersonExamObservationsStore,\n  useSaveChartData,\n} from '../state';\n\ntype ExamNames = ExamCardsNames | ExamFieldsNames;\ntype InPersonExamNames = InPersonExamCardsNames | InPersonExamFieldsNames;\ntype AllExamNames = ExamNames | InPersonExamNames;\ntype ExamRecord = { [field in AllExamNames]?: ExamObservationDTO };\ntype Update = (param?: ExamObservationDTO | ExamObservationDTO[] | ExamRecord, noFetch?: boolean) => void;\ntype Delete = (param?: ExamObservationDTO | ExamObservationDTO[] | ExamRecord, noFetch?: boolean) => void;\n\nconst arrayToObject: (array: ExamObservationDTO[]) => ExamRecord = (array) =>\n  array.reduce((prev, curr) => {\n    prev[curr.field] = curr;\n    return prev;\n  }, {} as ExamRecord);\n\nconst objectToArray: (object: ExamRecord) => ExamObservationDTO[] = (object) => Object.values(object);\n\n/**\n * @typedef {Function} UpdateExamObservations\n * @param {ExamObservationDTO} param - Exam observation object.\n * @param {ExamObservationDTO[]} param - Array of exam observation objects.\n * @param {ExamRecord} param - Record of exam observation objects.\n * @param {boolean} noFetch - Flag not to update server values.\n */\n\n/**\n * Hook to get and update exam observations.\n * @return {Object} state\n * @return {ExamObservationDTO} state.value - All exam observations.\n * @return {UpdateExamObservations} state.update - Function to update exam observations.\n * @return {boolean} state.isLoading - Update query loading status.\n */\nexport function useExamObservations(): {\n  value: ExamObservationDTO[];\n  update: Update;\n  delete: Delete;\n  isLoading: boolean;\n};\n\n/**\n * Hook to get and update exam observations.\n * @param {AllExamNames} param - Field name.\n * @return {Object} state\n * @return {ExamObservationDTO} state.value - Exam observation with chosen field name.\n * @return {UpdateExamObservations} state.update - Function to update exam observations.\n * @return {boolean} state.isLoading - Update query loading status.\n */\nexport function useExamObservations(param: AllExamNames): {\n  value: ExamObservationDTO;\n  update: Update;\n  delete: Delete;\n  isLoading: boolean;\n};\n\n/**\n * Hook to get and update exam observations.\n * @param {(AllExamNames)[]} param - Array of field names.\n * @return {Object} state\n * @return {ExamObservationDTO[]} state.value - Exam observations with chosen field names.\n * @return {UpdateExamObservations} state.update - Function to update exam observations.\n * @return {boolean} state.isLoading - Update query loading status.\n */\nexport function useExamObservations(param: AllExamNames[]): {\n  value: ExamObservationDTO[];\n  update: Update;\n  delete: Delete;\n  isLoading: boolean;\n};\n\nexport function useExamObservations(param?: AllExamNames | AllExamNames[]): {\n  value: ExamObservationDTO | ExamObservationDTO[];\n  update: Update;\n  delete: Delete;\n  isLoading: boolean;\n} {\n  const { css } = useFeatureFlags();\n  const useExamObservationsStore = css ? useInPersonExamObservationsStore : useTelemedExamObservationsStore;\n\n  const state = useExamObservationsStore() as ReturnType<(typeof useTelemedExamObservationsStore)['getState']>;\n  const { mutate: saveChartData, isLoading: isSaveLoading } = useSaveChartData();\n  const { mutate: deleteChartData, isLoading: isDeleteLoading } = useDeleteChartData();\n\n  const getPrevStateAndValues = useCallback(\n    (\n      param: ExamObservationDTO | ExamObservationDTO[] | ExamRecord\n    ): {\n      prevState: ReturnType<(typeof useTelemedExamObservationsStore)['getState']> &\n        ReturnType<(typeof useInPersonExamObservationsStore)['getState']>;\n      prevValues: ExamRecord;\n    } => {\n      // TODO: fix types\n\n      const prevState = useExamObservationsStore.getState() as ReturnType<\n        (typeof useTelemedExamObservationsStore)['getState']\n      > &\n        ReturnType<(typeof useInPersonExamObservationsStore)['getState']>;\n\n      const prevValues = Array.isArray(param)\n        ? param.reduce((prev, curr) => {\n            prev[curr.field] = prevState[curr.field as ExamNames & InPersonExamNames];\n            // prev[curr.field] = prevState[curr.field];\n            return prev;\n          }, {} as ExamRecord)\n        : Object.prototype.hasOwnProperty.call(param, 'field')\n        ? {\n            [(param as ExamObservationDTO).field]:\n              prevState[(param as ExamObservationDTO).field as ExamNames & InPersonExamNames],\n          }\n        : (Object.keys(param as ExamRecord) as AllExamNames[]).reduce((prev, curr) => {\n            prev[curr] = prevState[curr as ExamNames & InPersonExamNames];\n            return prev;\n          }, {} as ExamRecord);\n\n      return { prevState, prevValues };\n    },\n    [useExamObservationsStore]\n  );\n\n  const update: Update = (param, noFetch) => {\n    if (!param) {\n      return;\n    }\n\n    const { prevValues } = getPrevStateAndValues(param);\n\n    useExamObservationsStore.setState(\n      Array.isArray(param)\n        ? arrayToObject(param)\n        : Object.prototype.hasOwnProperty.call(param, 'field')\n        ? { [(param as ExamObservationDTO).field]: param }\n        : (param as ExamRecord)\n    );\n\n    if (noFetch) {\n      return;\n    }\n\n    saveChartData(\n      {\n        examObservations: Array.isArray(param)\n          ? param\n          : Object.prototype.hasOwnProperty.call(param, 'field')\n          ? [param as ExamObservationDTO]\n          : objectToArray(param as ExamRecord),\n      },\n      {\n        onSuccess: (data) => {\n          const newState = data.chartData.examObservations?.filter(\n            (observation) =>\n              !observation.field.endsWith('-comment') ||\n              !prevValues[observation.field as ExamNames & InPersonExamNames]?.resourceId\n          );\n          if (newState) {\n            useExamObservationsStore.setState(arrayToObject(newState));\n          }\n        },\n        onError: () => {\n          enqueueSnackbar('An error has occurred while saving exam data. Please try again.', { variant: 'error' });\n          useExamObservationsStore.setState(prevValues);\n        },\n      }\n    );\n  };\n\n  const deleteExamObservations: Delete = (param, noFetch) => {\n    if (!param) {\n      return;\n    }\n\n    const { prevState, prevValues } = getPrevStateAndValues(param);\n\n    useExamObservationsStore.setState(() => {\n      // If param is an array, convert to object\n      if (Array.isArray(param)) {\n        const newObject = arrayToObject(param);\n        // Remove fields from prevState that are in newObject\n        const filteredState = { ...prevState };\n        Object.keys(newObject).forEach((key) => {\n          delete filteredState[key as ExamNames & InPersonExamNames];\n        });\n        return { ...filteredState, ...newObject };\n      }\n\n      // If param is a single observation\n      if (Object.prototype.hasOwnProperty.call(param, 'field')) {\n        const field = (param as ExamObservationDTO).field;\n        // Create a new state without the field\n        const { [field]: _removed, ...rest } = prevState;\n\n        return { [field]: { field: _removed.field, note: '' }, ...rest };\n      }\n\n      // If param is an ExamRecord\n      const examRecord = param as ExamRecord;\n      // Remove all fields from prevState that are in examRecord\n      const filteredState = { ...prevState };\n      Object.keys(examRecord).forEach((key) => {\n        delete filteredState[key as ExamNames & InPersonExamNames];\n      });\n      return { ...filteredState, ...examRecord };\n    });\n\n    if (noFetch) {\n      return;\n    }\n\n    deleteChartData(\n      {\n        examObservations: Array.isArray(param)\n          ? param\n          : Object.prototype.hasOwnProperty.call(param, 'field')\n          ? [param as ExamObservationDTO]\n          : objectToArray(param as ExamRecord),\n      },\n      {\n        onError: () => {\n          useExamObservationsStore.setState(prevValues);\n        },\n      }\n    );\n  };\n\n  return {\n    value: param\n      ? typeof param === 'string'\n        ? state[param as ExamNames]\n        : param.map((option) => state[option as ExamNames])\n      : objectToArray(state),\n    update,\n    delete: deleteExamObservations,\n    isLoading: isDeleteLoading || isSaveLoading,\n  };\n}\n"]}