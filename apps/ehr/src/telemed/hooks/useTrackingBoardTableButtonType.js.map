{"version":3,"file":"useTrackingBoardTableButtonType.js","sourceRoot":"","sources":["useTrackingBoardTableButtonType.ts"],"names":[],"mappings":";;;AAAA,+BAA4C;AAC5C,+BAAmH;AACnH,2DAAsD;AACtD,gEAA+D;AAC/D,kCAAiD;AAE1C,IAAM,+BAA+B,GAAG,UAAC,EAI/C;QAHC,WAAW,iBAAA;IAIL,IAAA,KAAkB,IAAA,gBAAQ,EAAC,EAAE,CAAC,EAA7B,IAAI,QAAA,EAAE,OAAO,QAAgB,CAAC;IAE7B,IAAA,eAAe,GAAK,IAAA,2BAAY,EAAC,6BAAqB,EAAE,CAAC,iBAAiB,CAAC,CAAC,gBAA7D,CAA8D;IACrF,IAAM,IAAI,GAAG,IAAA,uBAAa,GAAE,CAAC;IAE7B,IAAM,0BAA0B,GAC9B,CAAC,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,eAAe,CAAA,IAAI,IAAA,qCAA6B,EAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAExG,IAAA,iBAAS,EAAC;QACR,IACE,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK;YAClC,CAAC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC;YAC5D,CAAC,oCAA4B,CAAC,QAAQ,EAAE,oCAA4B,CAAC,QAAQ,CAAC,CAAC,QAAQ,CACrF,WAAW,CAAC,aAA6C,CAC1D;YACD,CAAC,CAAC,oCAA4B,CAAC,WAAW,CAAC,EAAE,oCAA4B,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAC7F,WAAW,CAAC,aAA6C,CAC1D;gBACC,CAAC,0BAA0B,CAAC,EAC9B,CAAC;YACD,IACE,WAAW,CAAC,aAAa,KAAK,oCAA4B,CAAC,QAAQ;gBACnE,WAAW,CAAC,eAAe,CAAC,KAAK;gBACjC,eAAe,CAAC,QAAQ,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC;gBAC3D,0BAA0B,EAC1B,CAAC;gBACD,OAAO,CAAC,eAAe,CAAC,CAAC;YAC3B,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,cAAc,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;aAAM,IAAI,WAAW,CAAC,aAAa,KAAK,oCAA4B,CAAC,KAAK,EAAE,CAAC;YAC5E,OAAO,CAAC,UAAU,CAAC,CAAC;QACtB,CAAC;aAAM,IAAI,WAAW,CAAC,aAAa,KAAK,oCAA4B,CAAC,WAAW,CAAC,EAAE,CAAC;YACnF,OAAO,CAAC,UAAU,CAAC,CAAC;QACtB,CAAC;aAAM,IAAI,WAAW,CAAC,aAAa,KAAK,oCAA4B,CAAC,UAAU,CAAC,EAAE,CAAC;YAClF,OAAO,CAAC,WAAW,CAAC,CAAC;QACvB,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,EAAE,CAAC,CAAC;QACd,CAAC;IACH,CAAC,EAAE,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK,EAAE,eAAe,EAAE,WAAW,CAAC,aAAa,EAAE,0BAA0B,CAAC,CAAC,CAAC;IAEhH,OAAO,EAAE,IAAI,MAAA,EAAE,CAAC;AAClB,CAAC,CAAC;AA/CW,QAAA,+BAA+B,mCA+C1C","sourcesContent":["import { useEffect, useState } from 'react';\nimport { checkEncounterHasPractitioner, TelemedAppointmentInformation, TelemedAppointmentStatusEnum } from 'utils';\nimport useEvolveUser from '../../hooks/useEvolveUser';\nimport { getSelectors } from '../../shared/store/getSelectors';\nimport { useTrackingBoardStore } from '../state';\n\nexport const useTrackingBoardTableButtonType = ({\n  appointment,\n}: {\n  appointment: TelemedAppointmentInformation;\n}): { type: string } => {\n  const [type, setType] = useState('');\n\n  const { availableStates } = getSelectors(useTrackingBoardStore, ['availableStates']);\n  const user = useEvolveUser();\n\n  const isEncounterForPractitioner =\n    !!user?.profileResource && checkEncounterHasPractitioner(appointment.encounter, user.profileResource);\n\n  useEffect(() => {\n    if (\n      !appointment.locationVirtual.state ||\n      !availableStates.includes(appointment.locationVirtual.state) ||\n      [TelemedAppointmentStatusEnum.complete, TelemedAppointmentStatusEnum.unsigned].includes(\n        appointment.telemedStatus as TelemedAppointmentStatusEnum\n      ) ||\n      ([TelemedAppointmentStatusEnum['pre-video'], TelemedAppointmentStatusEnum['on-video']].includes(\n        appointment.telemedStatus as TelemedAppointmentStatusEnum\n      ) &&\n        !isEncounterForPractitioner)\n    ) {\n      if (\n        appointment.telemedStatus === TelemedAppointmentStatusEnum.unsigned &&\n        appointment.locationVirtual.state &&\n        availableStates.includes(appointment.locationVirtual.state) &&\n        isEncounterForPractitioner\n      ) {\n        setType('viewContained');\n      } else {\n        setType('viewOutlined');\n      }\n    } else if (appointment.telemedStatus === TelemedAppointmentStatusEnum.ready) {\n      setType('assignMe');\n    } else if (appointment.telemedStatus === TelemedAppointmentStatusEnum['pre-video']) {\n      setType('unassign');\n    } else if (appointment.telemedStatus === TelemedAppointmentStatusEnum['on-video']) {\n      setType('reconnect');\n    } else {\n      setType('');\n    }\n  }, [appointment.locationVirtual.state, availableStates, appointment.telemedStatus, isEncounterForPractitioner]);\n\n  return { type };\n};\n"]}