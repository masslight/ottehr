{"version":3,"file":"appointment.store.js","sourceRoot":"","sources":["appointment.store.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA,mCAAiC;AAwBjC,IAAM,mBAAmB,GAAqB;IAC5C,WAAW,EAAE,SAAS;IACtB,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE,SAAS;IACnB,eAAe,EAAE,SAAS;IAC1B,YAAY,EAAE,SAAS;IACvB,SAAS,EAAE,EAAe;IAC1B,qBAAqB,EAAE,SAAS;IAChC,gBAAgB,EAAE,EAAE;IACpB,kBAAkB,EAAE,EAAE;IACtB,oBAAoB,EAAE,KAAK;IAC3B,kBAAkB,EAAE,KAAK;IACzB,SAAS,EAAE,SAAS;IACpB,UAAU,EAAE,KAAK;IACjB,iBAAiB,EAAE,SAAS;CAC7B,CAAC;AAEW,QAAA,mBAAmB,GAAG,IAAA,gBAAM,GAA8C,CAAC,UAAC,GAAG,IAAK,OAAA,uBAC5F,mBAAmB,KACtB,mBAAmB,EAAE,UAAC,IAAI;QACxB,GAAG,CAAC,UAAC,KAAK;;YAAK,OAAA,CAAC;gBACd,SAAS,iCAAO,KAAK,CAAC,SAAS,KAAE,SAAS,EAAE,CAAA,MAAA,KAAK,CAAC,SAAS,0CAAE,SAAS,KAAI,EAAE,KAAK,IAAI,CAAE;aACxF,CAAC,CAAA;SAAA,CAAC,CAAC;IACN,CAAC,EACD,iBAAiB,EAAE,UAAC,cAA8B;QAChD,OAAA,GAAG,CAAC,UAAC,KAAK;;YACR,IAAM,mBAAmB,GAAG,CAAA,MAAA,KAAK,CAAC,SAAS,0CAAE,YAAY,KAAI,EAAE,CAAC;YAChE,IAAM,mBAAmB,qBAAyB,mBAAmB,OAAC,CAAC;YAEvE,IAAM,wBAAwB,GAAG,mBAAmB,CAAC,SAAS,CAC5D,UAAC,WAAW,IAAK,OAAA,WAAW,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK,EAA1C,CAA0C,CAC5D,CAAC;YAEF,IAAM,kBAAkB,gBAAQ,mBAAmB,CAAC,wBAAwB,CAAC,CAAE,CAAC;YAEhF,IAAI,wBAAwB,KAAK,CAAC,CAAC,IAAI,OAAO,IAAI,cAAc,EAAE,CAAC;gBACjE,IAAI,CAAC,CAAC,MAAM,IAAI,cAAc,CAAC,IAAI,MAAM,IAAI,kBAAkB;oBAAE,OAAO,kBAAkB,CAAC,IAAI,CAAC;gBAEhG,mBAAmB,CAAC,wBAAwB,CAAC,GAAG,+BAC3C,kBAAkB,KACrB,KAAK,EAAE,cAAc,CAAC,KAAK,KACxB,CAAC,MAAM,IAAI,cAAc,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,IAAI,EAAE,CAAC,CAC7C,CAAC;YACtB,CAAC;iBAAM,CAAC;gBACN,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC3C,CAAC;YAED,OAAO;gBACL,SAAS,wBACJ,KAAK,CAAC,SAAU,KACnB,YAAY,EAAE,mBAAmB,GAClC;aACF,CAAC;QACJ,CAAC,CAAC;IA5BF,CA4BE,IACJ,EArC+F,CAqC/F,CAAC,CAAC","sourcesContent":["import { Appointment, Encounter, Location, Patient, Practitioner, QuestionnaireResponse } from 'fhir/r4b';\nimport { GetChartDataResponse, ObservationDTO, ReviewAndSignData } from 'utils';\nimport { create } from 'zustand';\n\ntype AppointmentState = {\n  appointment: Appointment | undefined;\n  patient: Patient | undefined;\n  location: Location | undefined;\n  locationVirtual: Location | undefined;\n  practitioner?: Practitioner;\n  encounter: Encounter;\n  questionnaireResponse: QuestionnaireResponse | undefined;\n  patientPhotoUrls: string[];\n  schoolWorkNoteUrls: string[];\n  isAppointmentLoading: boolean;\n  isChartDataLoading: boolean;\n  chartData: GetChartDataResponse | undefined;\n  currentTab: string;\n  reviewAndSignData: ReviewAndSignData | undefined;\n};\n\ninterface AppointmentStoreActions {\n  setPartialChartData: (value: Partial<GetChartDataResponse>) => void;\n  updateObservation: (observation: ObservationDTO) => void;\n}\n\nconst APPOINTMENT_INITIAL: AppointmentState = {\n  appointment: undefined,\n  patient: undefined,\n  location: undefined,\n  locationVirtual: undefined,\n  practitioner: undefined,\n  encounter: {} as Encounter,\n  questionnaireResponse: undefined,\n  patientPhotoUrls: [],\n  schoolWorkNoteUrls: [],\n  isAppointmentLoading: false,\n  isChartDataLoading: false,\n  chartData: undefined,\n  currentTab: 'hpi',\n  reviewAndSignData: undefined,\n};\n\nexport const useAppointmentStore = create<AppointmentState & AppointmentStoreActions>()((set) => ({\n  ...APPOINTMENT_INITIAL,\n  setPartialChartData: (data) => {\n    set((state) => ({\n      chartData: { ...state.chartData, patientId: state.chartData?.patientId || '', ...data },\n    }));\n  },\n  updateObservation: (newObservation: ObservationDTO) =>\n    set((state) => {\n      const currentObservations = state.chartData?.observations || [];\n      const updatedObservations: ObservationDTO[] = [...currentObservations];\n\n      const existingObservationIndex = updatedObservations.findIndex(\n        (observation) => observation.field === newObservation.field\n      );\n\n      const updatedObservation = { ...updatedObservations[existingObservationIndex] };\n\n      if (existingObservationIndex !== -1 && 'value' in newObservation) {\n        if (!('note' in newObservation) && 'note' in updatedObservation) delete updatedObservation.note;\n\n        updatedObservations[existingObservationIndex] = {\n          ...updatedObservation,\n          value: newObservation.value,\n          ...('note' in newObservation && { note: newObservation.note }),\n        } as ObservationDTO;\n      } else {\n        updatedObservations.push(newObservation);\n      }\n\n      return {\n        chartData: {\n          ...state.chartData!,\n          observations: updatedObservations,\n        },\n      };\n    }),\n}));\n"]}