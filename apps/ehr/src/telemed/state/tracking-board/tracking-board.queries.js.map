{"version":3,"file":"tracking-board.queries.js","sourceRoot":"","sources":["tracking-board.queries.ts"],"names":[],"mappings":"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","sourcesContent":["import { Operation } from 'fast-json-patch';\nimport { Patient } from 'fhir/r4b';\nimport { useMutation, useQuery } from 'react-query';\nimport {\n  addOrReplaceOperation,\n  ChangeTelemedAppointmentStatusInput,\n  InitTelemedSessionRequestParams,\n  SignAppointmentInput,\n} from 'utils';\nimport { useApiClients } from '../../../hooks/useAppClients';\nimport { OystehrTelemedAPIClient, PromiseReturnType } from '../../data';\nimport { GetAppointmentsRequestParams } from '../../utils';\n\nexport const useGetTelemedAppointments = (\n  {\n    apiClient,\n    usStatesFilter,\n    dateFilter,\n    providersFilter,\n    groupsFilter,\n    patientFilter,\n    statusesFilter,\n    locationsIdsFilter,\n    visitTypesFilter,\n  }: {\n    apiClient: OystehrTelemedAPIClient | null;\n  } & GetAppointmentsRequestParams,\n  onSuccess: (data: PromiseReturnType<ReturnType<OystehrTelemedAPIClient['getTelemedAppointments']>>) => void\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n) => {\n  return useQuery(\n    [\n      'telemed-appointments',\n      {\n        apiClient,\n        usStatesFilter,\n        providersFilter,\n        groupsFilter,\n        dateFilter,\n        patientFilter,\n        statusesFilter,\n        locationsIdsFilter,\n        visitTypesFilter,\n      },\n    ],\n    () => {\n      if (apiClient) {\n        return apiClient.getTelemedAppointments({\n          usStatesFilter,\n          providersFilter,\n          groupsFilter,\n          dateFilter,\n          patientFilter,\n          statusesFilter,\n          locationsIdsFilter,\n          visitTypesFilter,\n        });\n      }\n      throw new Error('api client not defined');\n    },\n    {\n      refetchInterval: 10000,\n      onSuccess,\n      onError: (err) => {\n        console.error('Error during fetching get telemed appointments: ', err);\n      },\n    }\n  );\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useInitTelemedSessionMutation = () =>\n  useMutation({\n    mutationFn: ({\n      apiClient,\n      appointmentId,\n      userId,\n    }: {\n      apiClient: OystehrTelemedAPIClient;\n    } & InitTelemedSessionRequestParams) => {\n      return apiClient.initTelemedSession({\n        appointmentId,\n        userId,\n      });\n    },\n  });\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useChangeTelemedAppointmentStatusMutation = () =>\n  useMutation({\n    mutationFn: ({\n      apiClient,\n      appointmentId,\n      newStatus,\n    }: {\n      apiClient: OystehrTelemedAPIClient;\n    } & Omit<ChangeTelemedAppointmentStatusInput, 'secrets'>) => {\n      return apiClient.changeTelemedAppointmentStatus({\n        appointmentId,\n        newStatus,\n      });\n    },\n  });\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useSignAppointmentMutation = () =>\n  useMutation({\n    mutationFn: ({\n      apiClient,\n      appointmentId,\n      timezone,\n    }: {\n      apiClient: OystehrTelemedAPIClient;\n    } & Omit<SignAppointmentInput, 'secrets'>) => {\n      return apiClient.signAppointment({\n        appointmentId,\n        timezone,\n      });\n    },\n  });\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport const useEditPatientInformationMutation = () => {\n  const { oystehr } = useApiClients();\n  return useMutation({\n    mutationFn: ({\n      originalPatientData,\n      updatedPatientData,\n      fieldsToUpdate,\n    }: {\n      originalPatientData: Patient;\n      updatedPatientData: Patient;\n      fieldsToUpdate?: ('name' | 'birthDate' | 'gender' | 'address' | 'telecom')[];\n    }) => {\n      if (!oystehr) {\n        throw new Error('Oystehr not found');\n      }\n\n      if (!fieldsToUpdate || fieldsToUpdate.length === 0) {\n        fieldsToUpdate = ['name', 'birthDate', 'address', 'telecom'];\n      }\n      const fieldsSet = [...new Set(fieldsToUpdate)];\n\n      const patchOperations: Operation[] = fieldsSet.map((field) =>\n        addOrReplaceOperation(originalPatientData[field], `/${field}`, updatedPatientData[field])\n      );\n\n      return oystehr.fhir.patch<Patient>({\n        resourceType: 'Patient',\n        id: updatedPatientData.id ?? '',\n        operations: patchOperations,\n      });\n    },\n    onError: (err) => {\n      console.error('Error during editing patient information: ', err);\n    },\n  });\n};\n"]}