{"version":3,"file":"tracking-board.store.js","sourceRoot":"","sources":["tracking-board.store.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,+BAAiC;AAEjC,mCAAiC;AAEjC,qCAA0C;AAsB1C,IAAM,sBAAsB,GAAuB;IACjD,YAAY,EAAE,EAAE;IAChB,qBAAqB,EAAE,KAAK;IAC5B,SAAS,EAAE,aAAa;IACxB,IAAI,EAAE,gBAAQ,CAAC,KAAK,EAAE;IACtB,cAAc,EAAE,IAAI;IACpB,SAAS,EAAE,IAAI;IACf,YAAY,EAAE,IAAI;IAClB,MAAM,EAAE,IAAI;IACZ,WAAW,EAAE,mBAAW,CAAC,OAAO;IAChC,eAAe,EAAE,EAAE;IACnB,UAAU,EAAE,EAAE;IACd,YAAY,EAAE,KAAK;CACpB,CAAC;AAEW,QAAA,qBAAqB,GAAG,IAAA,gBAAM,GAAkD,CAAC,UAAC,GAAG,IAAK,OAAA,uBAClG,sBAAsB,KACzB,YAAY,EAAE,UAAC,CAAC,EAAE,SAAS;QACzB,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;YACvB,GAAG,CAAC,cAAM,OAAA,CAAC;gBACT,SAAS,WAAA;aACV,CAAC,EAFQ,CAER,CAAC,CAAC;QACN,CAAC;IACH,CAAC,EACD,eAAe,EAAE,UAAC,YAAY;QAC5B,GAAG,CAAC,cAAM,OAAA,CAAC;YACT,YAAY,cAAA;SACb,CAAC,EAFQ,CAER,CAAC,CAAC;IACN,CAAC,IACD,EAdqG,CAcrG,CAAC,CAAC","sourcesContent":["import { DateTime } from 'luxon';\nimport { PatientFilterType, TelemedAppointmentInformation } from 'utils';\nimport { create } from 'zustand';\nimport { VisitType } from '../../../types/types';\nimport { UnsignedFor } from '../../utils';\n\ntype TrackingBoardState = {\n  appointments: TelemedAppointmentInformation[];\n  isAppointmentsLoading: boolean;\n  alignment: PatientFilterType;\n  date: DateTime | null;\n  selectedStates: string[] | null;\n  providers: string[] | null;\n  groups: string[] | null;\n  locationsIds: string[] | null;\n  unsignedFor: UnsignedFor;\n  availableStates: string[];\n  showOnlyNext: boolean;\n  visitTypes: VisitType[] | null;\n};\n\ntype TrackingBoardStoreActions = {\n  setAlignment: (_: any, alignment: PatientFilterType | null) => void;\n  setAppointments: (appointments: TelemedAppointmentInformation[]) => void;\n};\n\nconst TRACKING_BOARD_INITIAL: TrackingBoardState = {\n  appointments: [],\n  isAppointmentsLoading: false,\n  alignment: 'my-patients',\n  date: DateTime.local(),\n  selectedStates: null,\n  providers: null,\n  locationsIds: null,\n  groups: null,\n  unsignedFor: UnsignedFor.under12,\n  availableStates: [],\n  visitTypes: [],\n  showOnlyNext: false,\n};\n\nexport const useTrackingBoardStore = create<TrackingBoardState & TrackingBoardStoreActions>()((set) => ({\n  ...TRACKING_BOARD_INITIAL,\n  setAlignment: (_, alignment) => {\n    if (alignment !== null) {\n      set(() => ({\n        alignment,\n      }));\n    }\n  },\n  setAppointments: (appointments) => {\n    set(() => ({\n      appointments,\n    }));\n  },\n}));\n"]}