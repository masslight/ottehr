{"version":3,"file":"appointment-accessibility.helper.js","sourceRoot":"","sources":["appointment-accessibility.helper.ts"],"names":[],"mappings":";;;AACA,+BAOe;AAwBR,IAAM,+BAA+B,GAAG,UAAC,EAMT;;QALrC,eAAe,qBAAA,EACf,SAAS,eAAA,EACT,WAAW,iBAAA,EACX,IAAI,UAAA,EACJ,oBAAiB,EAAjB,YAAY,mBAAG,EAAE,KAAA;IAEjB,IAAM,WAAW,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,eAAe,KAAI,IAAA,kCAA0B,EAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC9F,IAAM,0BAA0B,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,KAAK,EAAV,CAAU,CAAC,CAAC;IAC1E,IAAM,KAAK,GAAG,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,0CAAE,KAAkB,CAAC;IAC3D,IAAM,6BAA6B,GACjC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,0BAA0B,IAAI,0BAA0B,CAAC,QAAQ,CAAC,KAAkB,CAAC,CAAC;IAErG,IAAM,MAAM,GAAG,IAAA,0BAAkB,EAAC,SAAS,CAAC,MAAM,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,CAAC,CAAC;IACzE,IAAM,wCAAwC,GAC5C,CAAC,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,eAAe,CAAA,IAAI,IAAA,qCAA6B,EAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAC5F,IAAM,gBAAgB,GACpB,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,oCAA4B,CAAC,QAAQ,EAAE,oCAA4B,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE5G,IAAM,mCAAmC,GACvC,6BAA6B;QAC7B,CAAC,MAAM,KAAK,oCAA4B,CAAC,KAAK,IAAI,wCAAwC,CAAC,CAAC;IAE9F,IAAM,qBAAqB,GAAG,CAAC;QAC7B,IAAI,YAAY,CAAC,GAAG,EAAE,CAAC;YACrB,4BAA4B;YAC5B,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,CACL,CAAC,KAAK;YACN,CAAC,6BAA6B;YAC9B,CAAC,MAAM;YACP,CAAC,gBAAgB;YACjB,CAAC,wCAAwC,CAC1C,CAAC;IACJ,CAAC,CAAC,EAAE,CAAC;IAEL,OAAO;QACL,WAAW,aAAA;QACX,0BAA0B,4BAAA;QAC1B,KAAK,OAAA;QACL,6BAA6B,+BAAA;QAC7B,MAAM,QAAA;QACN,wCAAwC,0CAAA;QACxC,gBAAgB,kBAAA;QAChB,qBAAqB,uBAAA;QACrB,mCAAmC,qCAAA;KACpC,CAAC;AACJ,CAAC,CAAC;AAjDW,QAAA,+BAA+B,mCAiD1C","sourcesContent":["import { Appointment, Encounter, Location } from 'fhir/r4b';\nimport {\n  allLicensesForPractitioner,\n  checkEncounterHasPractitioner,\n  mapStatusToTelemed,\n  PractitionerLicense,\n  StateType,\n  TelemedAppointmentStatusEnum,\n} from 'utils';\nimport { FeatureFlags } from '../../features/css-module/context/featureFlags';\nimport { EvolveUser } from '../../hooks/useEvolveUser';\n\nexport type GetAppointmentAccessibilityDataProps = {\n  locationVirtual?: Location;\n  encounter: Encounter;\n  appointment?: Appointment;\n  user?: EvolveUser;\n  featureFlags: Partial<FeatureFlags>;\n};\n\nexport type GetAppointmentAccessibilityDataResult = {\n  allLicenses?: PractitionerLicense[];\n  licensedPractitionerStates?: string[];\n  state?: StateType;\n  isPractitionerLicensedInState: boolean;\n  status?: TelemedAppointmentStatusEnum;\n  isEncounterAssignedToCurrentPractitioner: boolean;\n  isStatusEditable: boolean;\n  isAppointmentReadOnly: boolean;\n  isCurrentUserHasAccessToAppointment: boolean;\n};\n\nexport const getAppointmentAccessibilityData = ({\n  locationVirtual,\n  encounter,\n  appointment,\n  user,\n  featureFlags = {},\n}: GetAppointmentAccessibilityDataProps): GetAppointmentAccessibilityDataResult => {\n  const allLicenses = user?.profileResource && allLicensesForPractitioner(user.profileResource);\n  const licensedPractitionerStates = allLicenses?.map((item) => item.state);\n  const state = locationVirtual?.address?.state as StateType;\n  const isPractitionerLicensedInState =\n    !!state && !!licensedPractitionerStates && licensedPractitionerStates.includes(state as StateType);\n\n  const status = mapStatusToTelemed(encounter.status, appointment?.status);\n  const isEncounterAssignedToCurrentPractitioner =\n    !!user?.profileResource && checkEncounterHasPractitioner(encounter, user.profileResource);\n  const isStatusEditable =\n    !!status && ![TelemedAppointmentStatusEnum.complete, TelemedAppointmentStatusEnum.ready].includes(status);\n\n  const isCurrentUserHasAccessToAppointment =\n    isPractitionerLicensedInState &&\n    (status === TelemedAppointmentStatusEnum.ready || isEncounterAssignedToCurrentPractitioner);\n\n  const isAppointmentReadOnly = (() => {\n    if (featureFlags.css) {\n      // TODO actualize this logic\n      return false;\n    }\n\n    return (\n      !state ||\n      !isPractitionerLicensedInState ||\n      !status ||\n      !isStatusEditable ||\n      !isEncounterAssignedToCurrentPractitioner\n    );\n  })();\n\n  return {\n    allLicenses,\n    licensedPractitionerStates,\n    state,\n    isPractitionerLicensedInState,\n    status,\n    isEncounterAssignedToCurrentPractitioner,\n    isStatusEditable,\n    isAppointmentReadOnly,\n    isCurrentUserHasAccessToAppointment,\n  };\n};\n"]}