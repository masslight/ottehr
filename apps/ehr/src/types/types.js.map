{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"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","sourcesContent":["import { Appointment, Slot } from 'fhir/r4b';\nimport { FhirAppointmentType, OTTEHR_MODULE, PatientFollowupDetails, ScheduleType, ServiceMode } from 'utils';\n\n// this likely will be consolidated to utils package. doughty conflict resolver, take heed:\n// the important change to include here is that slot is of type \"Slot\" rather than string\nexport interface CreateAppointmentParameters {\n  patient: PatientInfo | undefined;\n  visitType: FhirAppointmentType | undefined;\n  scheduleType: ScheduleType;\n  serviceType: ServiceMode;\n  slot?: Slot | undefined;\n  locationID?: string | undefined;\n}\n\nexport interface SaveFollowupParameter {\n  encounterDetails: PatientFollowupDetails;\n}\n\nexport type PatientInfo = {\n  id: string | undefined;\n  newPatient: boolean;\n  // pointOfDiscovery: boolean; // if this info has been obtained, true & 'How did you hear about us' will not show\n  firstName: string | undefined;\n  lastName: string | undefined;\n  dateOfBirth: string | undefined;\n  sex: PersonSex | undefined;\n  phoneNumber: string | undefined;\n  email: string | undefined;\n  emailUser: EmailUserValue | undefined;\n  reasonForVisit: string | undefined;\n  reasonAdditional?: string;\n};\n\nexport { AllStates } from 'utils';\nexport type { State, StateType } from 'utils';\n\nexport type EmailUserValue = 'Patient (Self)' | 'Parent/Guardian';\n\nexport const appointmentTypeLabels: { [type in FhirAppointmentType]: string } = {\n  prebook: 'Pre-booked',\n  walkin: 'Walk-in',\n  posttelemed: 'Post Telemed',\n};\n\n// this might be a bit redundant given the AppointmentType type. is \"booked\" still used somewhere?\nexport enum VisitType {\n  WalkIn = 'walk-in',\n  PreBook = 'pre-booked',\n  PostTelemed = 'post-telemed',\n}\n\nexport const VisitTypeToLabel: { [visitType in VisitType]: string } = {\n  'walk-in': 'Walk-in In Person Visit',\n  'pre-booked': 'Pre-booked In Person Visit',\n  'post-telemed': 'Post Telemed Lab Only',\n};\n\nexport const VisitTypeToLabelTelemed: { [visitType in VisitType]: string } = {\n  'walk-in': 'On-demand Telemed',\n  'pre-booked': 'Pre-booked Telemed',\n  'post-telemed': 'Post Telemed Lab Only',\n};\n\nexport enum PersonSex {\n  Male = 'male',\n  Female = 'female',\n  Intersex = 'other',\n}\n\nexport const getFhirAppointmentTypeForVisitType = (\n  visitType: VisitType | undefined\n): FhirAppointmentType | undefined => {\n  if (visitType === VisitType.WalkIn) {\n    return FhirAppointmentType.walkin;\n  } else if (visitType === VisitType.PostTelemed) {\n    return FhirAppointmentType.posttelemed;\n  } else if (visitType === VisitType.PreBook) {\n    return FhirAppointmentType.prebook;\n  } else {\n    return undefined;\n  }\n};\n\nexport const fhirAppointmentTypeToVisitType: { [type in FhirAppointmentType]: VisitType } = {\n  prebook: VisitType.PreBook,\n  walkin: VisitType.WalkIn,\n  posttelemed: VisitType.PostTelemed,\n};\n\nexport const getVisitTypeLabelForAppointment = (appointment: Appointment): string => {\n  const fhirAppointmentType = appointment?.appointmentType?.text as FhirAppointmentType;\n  const isFhirAppointmentMetaTagTelemed = appointment.meta?.tag?.find((tag) => tag.code === OTTEHR_MODULE.TM);\n\n  let visitTypeToLabelEnum = VisitTypeToLabel;\n  if (isFhirAppointmentMetaTagTelemed) {\n    visitTypeToLabelEnum = VisitTypeToLabelTelemed;\n  }\n\n  const visitType = fhirAppointmentTypeToVisitType[fhirAppointmentType];\n\n  const label = visitTypeToLabelEnum[visitType];\n  return label || '-';\n};\n\nexport type DOW = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';\nexport type HourOfDay =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23;\n\nexport interface Capacity {\n  hour: HourOfDay;\n  capacity: number;\n}\n\nexport interface ScheduleDay {\n  open: HourOfDay;\n  close: HourOfDay;\n  openingBuffer: number;\n  closingBuffer: number;\n  workingDay: boolean;\n  hours: Capacity[];\n}\nexport interface Weekdays {\n  [day: string]: Weekday;\n}\n\nexport interface Overrides {\n  [day: string]: Day;\n}\n\nexport interface Day {\n  open: number;\n  close: number;\n  openingBuffer: number;\n  closingBuffer: number;\n  hours: Capacity[];\n}\n\nexport interface Weekday extends Day {\n  workingDay: boolean;\n}\n\nexport enum ClosureType {\n  OneDay = 'one-day',\n  Period = 'period',\n}\nexport interface Closure {\n  start: string;\n  end: string;\n  type: ClosureType;\n}\n\nexport interface ScheduleExtension {\n  schedule: DailySchedule | undefined;\n  scheduleOverrides: ScheduleOverrides | undefined;\n  closures: Closure[] | undefined;\n}\n\nexport type DailySchedule = Record<DOW, ScheduleDay>;\nexport type ScheduleOverrides = Record<string, ScheduleDay>;\n\nexport enum DocumentType {\n  InsuranceFront = 'insurance-card-front',\n  InsuranceBack = 'insurance-card-back',\n  FullInsurance = 'fullInsuranceCard',\n  InsuranceFrontSecondary = 'insurance-card-front-2',\n  InsuranceBackSecondary = 'insurance-card-back-2',\n  FullInsuranceSecondary = 'fullInsuranceCard-2',\n  PhotoIdFront = 'photo-id-front',\n  PhotoIdBack = 'photo-id-back',\n  FullPhotoId = 'fullPhotoIDCard',\n  HipaaConsent = 'HIPAA Acknowledgement',\n  CttConsent = 'Consent to Treat, Guarantee of Payment & Card on File Agreement',\n  CttConsentOld = 'Consent to Treat and Guarantee of Payment',\n}\nexport interface DocumentInfo {\n  type: DocumentType;\n  z3Url: string;\n  presignedUrl: string | undefined;\n}\n"]}