{"version":3,"file":"getAuth0Token.js","sourceRoot":"","sources":["getAuth0Token.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sCA2CC;AA3CD,SAAsB,aAAa;;;;;;oBAC3B,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;oBAGlD,IAAI,CAAC,cAAc,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;wBAC9E,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;oBACjD,CAAC;oBACD,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;wBACrE,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;wBAC9C,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;oBAChD,CAAC;yBAAM,CAAC;wBACN,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;wBACxC,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;oBAC1C,CAAC;oBACK,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC;oBAElD,IAAI,CAAC,cAAc,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,IAAI,CAAC,cAAc,EAAE,CAAC;wBACzE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;oBACjD,CAAC;;;;oBAGC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;oBACtB,qBAAM,KAAK,CAAC,cAAc,EAAE;4BAC3C,MAAM,EAAE,MAAM;4BACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;4BAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;gCACnB,UAAU,EAAE,oBAAoB;gCAChC,SAAS,EAAE,YAAY;gCACvB,aAAa,EAAE,YAAY;gCAC3B,QAAQ,EAAE,cAAc;6BACzB,CAAC;yBACH,CAAC,EAAA;;oBATI,QAAQ,GAAG,SASf;oBAEF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;wBACjB,MAAM,IAAI,KAAK,CAAC,8BAAuB,QAAQ,CAAC,MAAM,CAAE,CAAC,CAAC;oBAC5D,CAAC;oBAED,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;oBACvB,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;wBAA7B,sBAAO,CAAC,SAAqB,CAAC,CAAC,YAAY,EAAC;;;oBAE5C,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,OAAK,CAAC,CAAC;oBACpD,MAAM,IAAI,KAAK,CAAC,OAAK,CAAC,OAAO,CAAC,CAAC;;;;;CAElC","sourcesContent":["export async function getAuth0Token(): Promise<string> {\n  const AUTH0_ENDPOINT = process.env.AUTH0_ENDPOINT;\n  let AUTH0_CLIENT: string;\n  let AUTH0_SECRET: string;\n  if (!AUTH0_ENDPOINT || !process.env.AUTH0_CLIENT || !process.env.AUTH0_SECRET) {\n    throw new Error('❌ Missing auth0 credentials');\n  }\n  if (process.env.AUTH0_CLIENT_TESTS && process.env.AUTH0_SECRET_TESTS) {\n    AUTH0_CLIENT = process.env.AUTH0_CLIENT_TESTS;\n    AUTH0_SECRET = process.env.AUTH0_SECRET_TESTS;\n  } else {\n    AUTH0_CLIENT = process.env.AUTH0_CLIENT;\n    AUTH0_SECRET = process.env.AUTH0_SECRET;\n  }\n  const AUTH0_AUDIENCE = process.env.AUTH0_AUDIENCE;\n\n  if (!AUTH0_ENDPOINT || !AUTH0_CLIENT || !AUTH0_SECRET || !AUTH0_AUDIENCE) {\n    throw new Error('❌ Missing auth0 credentials');\n  }\n\n  try {\n    console.log(`Fetching auth0 token...`);\n    const response = await fetch(AUTH0_ENDPOINT, {\n      method: 'POST',\n      headers: { 'content-type': 'application/json' },\n      body: JSON.stringify({\n        grant_type: 'client_credentials',\n        client_id: AUTH0_CLIENT,\n        client_secret: AUTH0_SECRET,\n        audience: AUTH0_AUDIENCE,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    console.log('Got auth0 token');\n    return (await response.json()).access_token;\n  } catch (error: any) {\n    console.error('❌ Failed to get auth0 token', error);\n    throw new Error(error.message);\n  }\n}\n"]}