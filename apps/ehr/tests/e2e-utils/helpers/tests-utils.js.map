{"version":3,"file":"tests-utils.js","sourceRoot":"","sources":["tests-utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,0CAIC;AAED,8EAGC;AAED,oDAIC;AAED,8EAYC;AAED,8CAEC;AApCD,yCAAyD;AACzD,sEAAmE;AAEnE,SAAsB,eAAe,CAAC,IAAU;;;;;;oBAExC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;oBAC5D,qBAAM,IAAA,aAAM,EAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EAAA;;oBAApC,SAAoC,CAAC;;;;;CACtC;AAED,SAAsB,iCAAiC,CAAC,IAAU;;;;wBAChE,qBAAM,IAAA,aAAM,EAAC,IAAI,CAAC,WAAW,CAAC,2BAAW,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC,WAAW,EAAE,EAAA;;oBAA3F,SAA2F,CAAC;oBAC5F,qBAAM,IAAA,aAAM,EAAC,IAAI,CAAC,WAAW,CAAC,2BAAW,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,EAAA;;oBAAxF,SAAwF,CAAC;;;;;CAC1F;AAED,SAAsB,oBAAoB,CAAC,IAAU;;;;;;oBAC7C,mBAAmB,GAAG,IAAI,CAAC,WAAW,CAAC,2BAAW,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;oBAC/E,qBAAM,IAAA,aAAM,EAAC,mBAAmB,CAAC,CAAC,WAAW,EAAE,EAAA;;oBAA/C,SAA+C,CAAC;oBAChD,qBAAM,mBAAmB,CAAC,KAAK,EAAE,EAAA;;oBAAjC,SAAiC,CAAC;;;;;CACnC;AAED,SAAsB,iCAAiC,CACrD,IAAU,EACV,cAAsB,EACtB,OAAe;;;;;wBAEf,qBAAM,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAA;;oBAArE,SAAqE,CAAC;oBAEvD,qBAAM,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,EAAA;;oBAA/C,MAAM,GAAG,SAAsC;yBACjD,MAAM,EAAN,wBAAM;oBACR,qBAAM,IAAA,aAAM,EAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAA;;oBAAlC,SAAkC,CAAC;oBACnC,qBAAM,MAAM,CAAC,KAAK,EAAE,EAAA;;oBAApB,SAAoB,CAAC;;;;;;CAExB;AAED,SAAsB,iBAAiB,CAAC,IAAU,EAAE,OAAe;;;YACjE,sBAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,IAAI,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAC;;;CACvF","sourcesContent":["import { expect, Locator, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../src/constants/data-test-ids';\n\nexport async function waitForSnackbar(page: Page): Promise<void> {\n  // for this moment it's the easiest way to check for snackbar, data-key didn't work out\n  const snackbar = page.locator('div[id=notistack-snackbar]');\n  await expect(snackbar).toBeVisible();\n}\n\nexport async function awaitAppointmentsTableToBeVisible(page: Page): Promise<void> {\n  await expect(page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardTable)).toBeVisible();\n  await expect(page.getByTestId(dataTestIds.dashboard.loadingIndicator)).not.toBeVisible();\n}\n\nexport async function telemedDialogConfirm(page: Page): Promise<void> {\n  const dialogButtonConfirm = page.getByTestId(dataTestIds.dialog.proceedButton);\n  await expect(dialogButtonConfirm).toBeVisible();\n  await dialogButtonConfirm.click();\n}\n\nexport async function checkDropdownHasOptionAndSelectIt(\n  page: Page,\n  dropdownTestId: string,\n  pattern: string\n): Promise<void> {\n  await page.getByTestId(dropdownTestId).locator('input').fill(pattern);\n\n  const option = await getDropdownOption(page, pattern);\n  if (option) {\n    await expect(option).toBeVisible();\n    await option.click();\n  }\n}\n\nexport async function getDropdownOption(page: Page, pattern: string): Promise<Locator> {\n  return page.locator('[role=\"option\"]', { hasText: new RegExp(pattern, 'i') }).first();\n}\n"]}