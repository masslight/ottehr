{"version":3,"file":"resource-handler.js","sourceRoot":"","sources":["resource-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import Oystehr, { BatchInputPostRequest } from '@oystehr/sdk';\nimport {\n  Address,\n  Appointment,\n  ClinicalImpression,\n  Consent,\n  DocumentReference,\n  Encounter,\n  FhirResource,\n  List,\n  Patient,\n  Person,\n  Practitioner,\n  QuestionnaireResponse,\n  RelatedPerson,\n  Schedule,\n  ServiceRequest,\n  Slot,\n} from 'fhir/r4b';\nimport { readFileSync } from 'fs';\nimport { DateTime } from 'luxon';\nimport { dirname, join } from 'path';\nimport { fileURLToPath } from 'url';\nimport {\n  cleanAppointmentGraph,\n  CreateAppointmentResponse,\n  createFetchClientWithOystAuth,\n  createSampleAppointments,\n  E2E_TEST_RESOURCE_PROCESS_ID_SYSTEM,\n  FHIR_APPOINTMENT_INTAKE_HARVESTING_COMPLETED_TAG,\n  FHIR_APPOINTMENT_PREPROCESSED_TAG,\n  formatPhoneNumber,\n  GetPaperworkAnswers,\n  RelationshipOption,\n  ServiceMode,\n} from 'utils';\nimport inPersonIntakeQuestionnaire from '../../../../packages/utils/lib/deployed-resources/questionnaires/in-person-intake-questionnaire.json' assert { type: 'json' };\nimport { getAuth0Token } from './auth/getAuth0Token';\nimport {\n  inviteTestEmployeeUser,\n  removeUser,\n  TEST_EMPLOYEE_1,\n  TEST_EMPLOYEE_2,\n  TestEmployee,\n} from './resource/employees';\nimport fastSeedData from './seed-data/seed-ehr-appointment-data.json' assert { type: 'json' };\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport function getAccessToken(): string {\n  const userJsonPath = join(__dirname, '../../playwright/user.json');\n  const userData = JSON.parse(readFileSync(userJsonPath, 'utf-8'));\n\n  const authData = userData.origins[0].localStorage.find((item: { name: string }) =>\n    item.name.includes('api.zapehr.com')\n  );\n\n  if (!authData) {\n    throw new Error('Auth data not found');\n  }\n\n  const token = JSON.parse(authData.value).body.access_token;\n  return token;\n}\n\nconst EightDigitsString = '20250519';\n\nexport const PATIENT_FIRST_NAME = 'Jon';\nexport const PATIENT_LAST_NAME = 'Snow';\nexport const PATIENT_GENDER = 'Male';\n\nexport const PATIENT_BIRTHDAY = '2002-07-07';\nexport const PATIENT_BIRTH_DATE_SHORT = '07/07/2002';\nexport const PATIENT_BIRTH_DATE_LONG = 'July 07, 2002';\n\nexport const PATIENT_PHONE_NUMBER = '21' + EightDigitsString;\nexport const PATIENT_EMAIL = `john.doe.${EightDigitsString}3@example.com`;\nexport const PATIENT_CITY = 'New York';\nexport const PATIENT_LINE = `${EightDigitsString} Test Line`;\nexport const PATIENT_LINE_2 = 'Apt 4B';\nexport const PATIENT_STATE = 'NY';\nexport const PATIENT_POSTAL_CODE = '06001';\nexport const PATIENT_REASON_FOR_VISIT = 'Fever';\n\nexport const PATIENT_INSURANCE_MEMBER_ID = '123123';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_FIRST_NAME = 'John';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_LAST_NAME = 'Doe';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_MIDDLE_NAME = 'Michael';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_DATE_OF_BIRTH = '1990-01-01';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_BIRTH_SEX = 'Male';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_ADDRESS_AS_PATIENT = false;\nexport const PATIENT_INSURANCE_POLICY_HOLDER_ADDRESS = '123 Main St';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_ADDRESS_ADDITIONAL_LINE = 'Apt 1';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_CITY = 'San Sebastian';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_STATE = 'CA';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_ZIP = '92000';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_RELATIONSHIP_TO_INSURED: RelationshipOption = 'Parent';\n\nexport const PATIENT_INSURANCE_MEMBER_ID_2 = '234234';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_FIRST_NAME = 'Jane';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_LAST_NAME = 'Doe';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_MIDDLE_NAME = 'Michael';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_DATE_OF_BIRTH = '1991-01-01';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_BIRTH_SEX = 'Female';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_ADDRESS_AS_PATIENT = false;\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_ADDRESS = '123 Main St';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_ADDRESS_ADDITIONAL_LINE = 'Apt 1';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_CITY = 'New York';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_STATE = 'NY';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_ZIP = '06001';\nexport const PATIENT_INSURANCE_POLICY_HOLDER_2_RELATIONSHIP_TO_INSURED: RelationshipOption = 'Parent';\n\nexport type CreateTestAppointmentInput = {\n  firstName?: string;\n  lastName?: string;\n  gender?: string;\n  birthDate?: string;\n  phoneNumber?: string;\n  email?: string;\n  city?: string;\n  line?: string;\n  state?: string;\n  postalCode?: string;\n  reasonsForVisit?: string;\n  telemedLocationState?: string;\n  selectedLocationId?: string;\n};\n\nexport class ResourceHandler {\n  #apiClient!: Oystehr;\n  #authToken!: string;\n  #resources!: CreateAppointmentResponse['resources'] & { relatedPerson: { id: string; resourceType: string } };\n  #createAppointmentZambdaId: string;\n  #flow: 'telemed' | 'in-person';\n  #initPromise: Promise<void>;\n  #paperworkAnswers?: GetPaperworkAnswers;\n  #processId?: string;\n\n  public testEmployee1!: TestEmployee;\n  public testEmployee2!: TestEmployee;\n\n  public static async getOystehr(): Promise<Oystehr> {\n    const authToken = await getAuth0Token();\n    const oystehr = new Oystehr({\n      accessToken: authToken,\n      fhirApiUrl: process.env.FHIR_API,\n      projectApiUrl: process.env.PROJECT_API_ZAMBDA_URL,\n    });\n    return oystehr;\n  }\n\n  public get apiClient(): Oystehr {\n    return this.#apiClient;\n  }\n\n  constructor(processId: string, flow: 'telemed' | 'in-person' = 'in-person', paperworkAnswers?: GetPaperworkAnswers) {\n    this.#flow = flow;\n    this.#paperworkAnswers = paperworkAnswers;\n\n    this.#initPromise = this.initApi();\n    this.#processId = processId;\n\n    this.#createAppointmentZambdaId = 'create-appointment';\n  }\n\n  private async initApi(): Promise<void> {\n    if (this.#apiClient && this.#authToken) {\n      return;\n    }\n    this.#authToken = await getAuth0Token();\n    this.#apiClient = new Oystehr({\n      accessToken: this.#authToken,\n      fhirApiUrl: process.env.FHIR_API,\n      projectApiUrl: process.env.PROJECT_API_ZAMBDA_URL,\n    });\n  }\n\n  private async createAppointment(inputParams?: CreateTestAppointmentInput): Promise<CreateAppointmentResponse> {\n    await this.#initPromise;\n\n    try {\n      const address: Address = {\n        city: inputParams?.city ?? PATIENT_CITY,\n        line: [inputParams?.line ?? PATIENT_LINE],\n        state: inputParams?.state ?? PATIENT_STATE,\n        postalCode: inputParams?.postalCode ?? PATIENT_POSTAL_CODE,\n      };\n\n      const patientData = {\n        firstNames: [inputParams?.firstName ?? PATIENT_FIRST_NAME],\n        lastNames: [inputParams?.lastName ?? PATIENT_LAST_NAME],\n        numberOfAppointments: 1,\n        reasonsForVisit: [inputParams?.reasonsForVisit ?? PATIENT_REASON_FOR_VISIT],\n        phoneNumbers: [inputParams?.phoneNumber ?? PATIENT_PHONE_NUMBER],\n        emails: [inputParams?.email ?? PATIENT_EMAIL],\n        gender: inputParams?.gender ?? PATIENT_GENDER.toLowerCase(),\n        birthDate: inputParams?.birthDate ?? PATIENT_BIRTHDAY,\n        address: [address],\n      };\n\n      if (!process.env.PROJECT_API_ZAMBDA_URL) {\n        throw new Error('PROJECT_API_ZAMBDA_URL is not set');\n      }\n\n      if (!process.env.LOCATION_ID) {\n        throw new Error('LOCATION_ID is not set');\n      }\n\n      if (!process.env.STATE_ONE) {\n        throw new Error('STATE_ONE is not set');\n      }\n\n      if (!process.env.PROJECT_ID) {\n        throw new Error('PROJECT_ID is not set');\n      }\n\n      // Create appointment and related resources using zambda\n      const appointmentData = await createSampleAppointments({\n        oystehr: this.#apiClient,\n        authToken: getAccessToken(),\n        phoneNumber: formatPhoneNumber(PATIENT_PHONE_NUMBER)!,\n        createAppointmentZambdaId: this.#createAppointmentZambdaId,\n        zambdaUrl: process.env.PROJECT_API_ZAMBDA_URL,\n        serviceMode: this.#flow === 'telemed' ? ServiceMode.virtual : ServiceMode['in-person'],\n        selectedLocationId: inputParams?.selectedLocationId ?? process.env.LOCATION_ID,\n        locationState: inputParams?.telemedLocationState ?? process.env.STATE_ONE, // todo: check why state is used here\n        demoData: patientData,\n        projectId: process.env.PROJECT_ID!,\n        paperworkAnswers: this.#paperworkAnswers,\n        appointmentMetadata: getProcessMetaTag(this.#processId!),\n      });\n      if (!appointmentData?.resources) {\n        throw new Error('Appointment not created');\n      }\n\n      Object.values(appointmentData.resources).forEach((resource) => {\n        console.log(`✅ created ${resource.resourceType}: ${resource.id}`);\n      });\n\n      if (appointmentData.relatedPersonId) {\n        console.log(`✅ created relatedPerson: ${appointmentData.relatedPersonId}`);\n      }\n\n      return appointmentData as CreateAppointmentResponse;\n    } catch (error) {\n      console.error('❌ Failed to create resources:', error);\n      throw error;\n    }\n  }\n\n  public async setResources(params?: CreateTestAppointmentInput): Promise<void> {\n    const response = await this.createAppointment(params);\n    this.#resources = {\n      ...response.resources,\n      // add relatedPerson to resources to make possible to clean it up; endpoint returns only id\n      relatedPerson: {\n        id: response.relatedPersonId,\n        resourceType: 'RelatedPerson',\n      },\n    };\n  }\n\n  public async setResourcesFast(_params?: CreateTestAppointmentInput): Promise<void> {\n    await this.#initPromise;\n\n    if (process.env.LOCATION_ID == null) {\n      throw new Error('LOCATION_ID is not set');\n    }\n\n    const schedule = (\n      await this.#apiClient.fhir.search<Schedule>({\n        resourceType: 'Schedule',\n        params: [\n          {\n            name: 'actor',\n            value: `Location/${process.env.LOCATION_ID}`,\n          },\n        ],\n      })\n    ).unbundle()[0] as Schedule;\n\n    let seedDataString = JSON.stringify(fastSeedData);\n    seedDataString = seedDataString.replace(/\\{\\{locationId\\}\\}/g, process.env.LOCATION_ID);\n    seedDataString = seedDataString.replace(/\\{\\{scheduleId\\}\\}/g, schedule.id!);\n    seedDataString = seedDataString.replace(\n      /\\{\\{questionnaireUrl\\}\\}/g,\n      `${inPersonIntakeQuestionnaire.resource.url}|${inPersonIntakeQuestionnaire.resource.version}`\n    );\n    seedDataString = seedDataString.replace(/\\{\\{date\\}\\}/g, DateTime.now().toUTC().toFormat('yyyy-MM-dd'));\n\n    // TODO do something about the DocumentReference attachments? For the moment all of these tests point to the exact same files. Maybe that's great. Or maybe we should upload images each time?\n\n    const hydratedFastSeedJSON = JSON.parse(seedDataString);\n\n    const createdResources =\n      (\n        await this.#apiClient.fhir.transaction<\n          | Patient\n          | RelatedPerson\n          | Person\n          | Appointment\n          | Encounter\n          | Slot\n          | List\n          | Consent\n          | DocumentReference\n          | QuestionnaireResponse\n          | ServiceRequest\n          | ClinicalImpression\n        >({\n          requests: hydratedFastSeedJSON.entry.map((entry: any): BatchInputPostRequest<FhirResource> => {\n            if (entry.request.method !== 'POST') {\n              throw new Error('Only POST method is supported in fast mode');\n            }\n            let resource: FhirResource = entry.resource;\n            if (resource.resourceType === 'Appointment') {\n              resource = addProcessIdMetaTagToResource(resource, this.#processId!);\n            }\n            return {\n              method: entry.request.method,\n              url: entry.request.url,\n              fullUrl: entry.fullUrl,\n              resource: entry.resource,\n            };\n          }),\n        })\n      ).entry\n        ?.map((entry) => entry.resource)\n        .filter((entry) => entry !== undefined) ?? [];\n    this.#resources = {\n      patient: createdResources.find((resource) => resource!.resourceType === 'Patient') as Patient,\n      relatedPerson: {\n        id: (createdResources.find((resource) => resource!.resourceType === 'RelatedPerson') as RelatedPerson).id!,\n        resourceType: 'RelatedPerson',\n      },\n      appointment: createdResources.find((resource) => resource!.resourceType === 'Appointment') as Appointment,\n      encounter: createdResources.find((resource) => resource!.resourceType === 'Encounter') as Encounter,\n      questionnaire: createdResources.find(\n        (resource) => resource!.resourceType === 'QuestionnaireResponse'\n      ) as QuestionnaireResponse,\n    };\n  }\n\n  public async cleanupResources(): Promise<void> {\n    // TODO: here we should change appointment id to encounter id when we'll fix this bug in frontend,\n    // because for this moment frontend creates order with appointment id in place of encounter one\n    const metaTagCoding = getProcessMetaTag(this.#processId!);\n    if (metaTagCoding?.tag?.[0]) {\n      await cleanAppointmentGraph(metaTagCoding.tag[0], this.#apiClient);\n    }\n  }\n\n  async waitTillAppointmentPreprocessed(id: string): Promise<void> {\n    try {\n      await this.initApi();\n\n      for (let i = 0; i < 10; i++) {\n        const appointment = (\n          await this.#apiClient.fhir.search({\n            resourceType: 'Appointment',\n            params: [\n              {\n                name: '_id',\n                value: id,\n              },\n            ],\n          })\n        ).unbundle()[0] as Appointment;\n\n        const tags = appointment?.meta?.tag || [];\n        const isProcessed = tags.some((tag) => tag?.code === FHIR_APPOINTMENT_PREPROCESSED_TAG.code);\n        if (isProcessed) {\n          return;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 3000));\n      }\n\n      throw new Error(\"Appointment wasn't preprocessed\");\n    } catch (e) {\n      console.error('Error during waitTillAppointmentPreprocessed', e);\n      throw e;\n    }\n  }\n\n  async waitTillHarvestingDone(appointmentId: string): Promise<void> {\n    try {\n      await this.initApi();\n\n      for (let i = 0; i < 10; i++) {\n        const appointment = (\n          await this.#apiClient.fhir.search({\n            resourceType: 'Appointment',\n            params: [\n              {\n                name: '_id',\n                value: appointmentId,\n              },\n            ],\n          })\n        ).unbundle()[0] as Appointment;\n\n        const tags = appointment?.meta?.tag || [];\n        const isHarvestingDone = tags.some(\n          (tag) => tag?.code === FHIR_APPOINTMENT_INTAKE_HARVESTING_COMPLETED_TAG.code\n        );\n        if (isHarvestingDone) {\n          return;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 6000));\n      }\n\n      throw new Error(\"Appointment wasn't harvested by sub-intake-harvest module\");\n    } catch (e) {\n      console.error('Error during waitTillHarvestingDone', e);\n      throw e;\n    }\n  }\n\n  async setEmployees(): Promise<void> {\n    try {\n      await this.#initPromise;\n      const [employee1, employee2] = await Promise.all([\n        inviteTestEmployeeUser(TEST_EMPLOYEE_1, this.#apiClient, this.#authToken),\n        inviteTestEmployeeUser(TEST_EMPLOYEE_2, this.#apiClient, this.#authToken),\n      ]);\n\n      this.testEmployee1 = employee1!;\n      this.testEmployee2 = employee2!;\n    } catch (error) {\n      console.error('❌ New providers were not invited', error);\n    }\n  }\n\n  async deleteEmployees(): Promise<void> {\n    try {\n      if (process.env.AUTH0_CLIENT_TESTS && process.env.AUTH0_SECRET_TESTS) {\n        await Promise.all([\n          removeUser(this.testEmployee1.id, this.testEmployee1.profile.id!, this.#apiClient, this.#authToken),\n          removeUser(this.testEmployee2.id, this.testEmployee2.profile.id!, this.#apiClient, this.#authToken),\n        ]);\n      } else throw new Error('No \"AUTH0_CLIENT_TESTS\" or \"AUTH0_SECRET_TESTS\" secret provided');\n    } catch (e) {\n      console.error('❌ Failed to delete users: ', e);\n    }\n  }\n\n  public get patient(): Patient {\n    return this.findResourceByType('Patient');\n  }\n\n  public get appointment(): Appointment {\n    return this.findResourceByType('Appointment');\n  }\n\n  public get encounter(): Encounter {\n    return this.findResourceByType('Encounter');\n  }\n\n  public get questionnaireResponse(): QuestionnaireResponse {\n    return this.findResourceByType('QuestionnaireResponse');\n  }\n\n  private findResourceByType<T>(resourceType: string): T {\n    const resource = Object.values(this.#resources).find((resource) => resource.resourceType === resourceType) as T;\n\n    if (!resource) {\n      throw new Error(`Resource ${resourceType} not found in the resources`);\n    }\n\n    return resource;\n  }\n\n  async patientIdByAppointmentId(appointmentId: string): Promise<string> {\n    const appointment = await this.#apiClient.fhir.get<Appointment>({\n      resourceType: 'Appointment',\n      id: appointmentId,\n    });\n    const patientId = appointment.participant\n      .find((participant) => participant.actor?.reference?.startsWith('Patient/'))\n      ?.actor?.reference?.split('/')[1];\n    if (patientId == null) {\n      throw new Error(`Patient for appointment ${appointmentId} not found`);\n    }\n    return patientId;\n  }\n\n  async getTestsUserAndPractitioner(): Promise<{\n    id: string;\n    name: string;\n    email: string;\n    practitioner: Practitioner;\n  }> {\n    await this.#initPromise;\n    const oystehrProjectId = process.env.PROJECT_ID;\n    if (!oystehrProjectId) throw new Error('secret PROJECT_ID is not set');\n    const { oystFetch } = createFetchClientWithOystAuth({ authToken: this.#authToken, projectId: oystehrProjectId });\n    const users = await oystFetch<\n      {\n        id: string;\n        name: string;\n        email: string;\n        profile: string;\n      }[]\n    >('GET', 'https://project-api.zapehr.com/v1/user');\n\n    const user = users?.find((user) => user.email === process.env.TEXT_USERNAME);\n    if (!user) throw new Error('Failed to find authorized user');\n    const practitioner = (await this.#apiClient.fhir.get({\n      resourceType: 'Practitioner',\n      id: user.profile.replace('Practitioner/', ''),\n    })) as Practitioner;\n    return {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      practitioner,\n    };\n  }\n}\n\nconst addProcessIdMetaTagToResource = (resource: FhirResource, processId: string): FhirResource => {\n  const existingMeta = resource.meta || { tag: [] };\n  const existingTags = existingMeta.tag ?? [];\n  resource.meta = {\n    ...existingMeta,\n    tag: [\n      ...existingTags,\n      {\n        system: E2E_TEST_RESOURCE_PROCESS_ID_SYSTEM,\n        code: processId,\n      },\n    ],\n  };\n  return resource;\n};\n\nconst getProcessMetaTag = (processId: string): Appointment['meta'] => {\n  return {\n    tag: [\n      {\n        system: E2E_TEST_RESOURCE_PROCESS_ID_SYSTEM,\n        code: processId,\n      },\n    ],\n  };\n};\n"]}