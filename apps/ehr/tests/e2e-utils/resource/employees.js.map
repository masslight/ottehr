{"version":3,"file":"employees.js","sourceRoot":"","sources":["employees.ts"],"names":[],"mappings":"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","sourcesContent":["// cSpell:ignore ASSISTA, CISW, CMSW\nimport { randomUUID } from 'node:crypto';\nimport Oystehr, { UserInviteParams } from '@oystehr/sdk';\nimport { Practitioner } from 'fhir/r4b';\nimport {\n  allLicensesForPractitioner,\n  createFetchClientWithOystAuth,\n  getFirstName,\n  getLastName,\n  getMiddleName,\n  getPractitionerNPIIdentifier,\n  getSuffix,\n  makeQualificationForPractitioner,\n  PractitionerLicense,\n  RoleType,\n} from 'utils';\n\nexport interface TestEmployeeInviteParams {\n  userName?: string;\n  email?: string;\n  givenName: string;\n  middleName: string;\n  familyName?: string;\n  telecomPhone: string;\n  npi: string;\n  credentials: string;\n  roles: RoleType[];\n  qualification: PractitionerLicense[];\n}\n\nexport interface TestEmployee extends TestEmployeeInviteParams {\n  id: string;\n  userName: string;\n  email: string;\n  familyName: string;\n  phoneNumber: string;\n  authenticationMethod: string;\n  profile: Practitioner;\n}\n\ntype UserResponse = {\n  id: string;\n  name: string;\n  email: string;\n  phoneNumber: string;\n  authenticationMethod: string;\n  profile: string;\n  roles: {\n    id: string;\n    name: string;\n  }[];\n};\n\nconst testEmployeeUsernamePattern = 'e2e-employee-';\nexport const testEmployeeGivenNamePattern = 'employeeTestE2E';\n\nexport const TEST_EMPLOYEE_1: TestEmployeeInviteParams = {\n  givenName: `${testEmployeeGivenNamePattern}1`,\n  middleName: 'middle',\n  telecomPhone: '0734324300',\n  npi: '1111111111',\n  credentials: 'credentials',\n  roles: [RoleType.Provider],\n  qualification: [\n    {\n      code: 'CISW',\n      state: 'AR',\n      number: '12345',\n      date: '2026-04-23',\n      active: true,\n    },\n    {\n      code: 'PHARMACY-ASSISTA',\n      state: 'AK',\n      number: '54321',\n      date: '2026-04-23',\n      active: true,\n    },\n  ],\n};\n\nexport const TEST_EMPLOYEE_1_UPDATED_INFO: TestEmployeeInviteParams = {\n  givenName: `new ${testEmployeeGivenNamePattern}`,\n  middleName: 'new middle',\n  telecomPhone: '0734324301',\n  credentials: 'new credentials',\n  npi: '2222222222',\n  roles: [RoleType.Provider, RoleType.Staff],\n  qualification: [\n    {\n      code: 'CISW',\n      state: 'AR',\n      number: '12345',\n      date: '2026-04-23',\n      active: true,\n    },\n    {\n      code: 'PHARMACY-ASSISTA',\n      state: 'AK',\n      number: '54321',\n      date: '2026-04-23',\n      active: true,\n    },\n    {\n      code: 'CMSW',\n      state: 'CA',\n      number: '15243',\n      date: '2026-04-23',\n      active: true,\n    },\n  ],\n};\n\nexport const TEST_EMPLOYEE_2: TestEmployeeInviteParams = {\n  givenName: `${testEmployeeGivenNamePattern}2`,\n  middleName: 'middle2',\n  telecomPhone: '0734324300',\n  npi: '1111111111',\n  credentials: 'credentials',\n  roles: [RoleType.Provider],\n  qualification: [\n    {\n      code: 'PODIATRIC-ASSIST',\n      state: 'AK',\n      active: true,\n    },\n  ],\n};\n\nexport function invitationParamsForEmployee(employee: TestEmployeeInviteParams, roles: string[]): UserInviteParams {\n  if (!process.env.EHR_APPLICATION_ID) throw new Error('EHR_APPLICATION_ID is not set');\n  const uuid = randomUUID();\n  const uniqueLastName = randomUUID();\n\n  return {\n    username: employee.userName ?? `${testEmployeeUsernamePattern}${uuid}`,\n    email: employee.email ?? `e2e-tests+${uuid}@ottehr.com`,\n    applicationId: process.env.EHR_APPLICATION_ID,\n    roles,\n    resource: {\n      identifier: [\n        {\n          value: employee.npi,\n          system: 'http://hl7.org/fhir/sid/us-npi',\n        },\n      ],\n      resourceType: 'Practitioner',\n      active: true,\n      name: [\n        {\n          family: employee.familyName ?? uniqueLastName,\n          given: [employee.givenName, employee.middleName],\n          suffix: [employee.credentials],\n        },\n      ],\n      telecom: [\n        {\n          system: 'email',\n          value: employee.email,\n        },\n        {\n          value: employee.telecomPhone,\n          system: 'sms',\n        },\n      ],\n      qualification: employee.qualification.map((qualification) => makeQualificationForPractitioner(qualification)),\n    },\n  };\n}\n\nexport async function inviteTestEmployeeUser(\n  employee: TestEmployeeInviteParams,\n  oystehr: Oystehr,\n  authToken: string\n): Promise<TestEmployee | undefined> {\n  const oystehrProjectId = process.env.PROJECT_ID;\n  if (!oystehrProjectId) throw new Error('secret PROJECT_ID is not set');\n  const { oystFetch } = createFetchClientWithOystAuth({ authToken, projectId: oystehrProjectId });\n  const rolesRaw = await oystFetch<{ id: string; name: string }[]>('GET', 'https://project-api.zapehr.com/v1/iam/role');\n  const providerRoleId = rolesRaw.find((role) => role.name === RoleType.Provider)?.id;\n  if (!providerRoleId) throw new Error(`Didn't found any role with name: ${RoleType.Provider}`);\n  const response = await oystFetch<UserResponse>(\n    'POST',\n    'https://project-api.zapehr.com/v1/user/invite',\n    invitationParamsForEmployee(employee, [providerRoleId])\n  );\n  return await parseTestUser(response, oystehr);\n}\n\nexport async function removeUser(\n  userId: string,\n  practitionerId: string,\n  oystehr: Oystehr,\n  authToken: string\n): Promise<void> {\n  const oystehrProjectId = process.env.PROJECT_ID;\n  if (!oystehrProjectId) throw new Error('secret PROJECT_ID is not set');\n  const { oystFetch } = createFetchClientWithOystAuth({ authToken, projectId: oystehrProjectId });\n  const removeUser = oystFetch('DELETE', `https://project-api.zapehr.com/v1/user/${userId}`);\n  const removeUserPractitioner = oystehr.fhir.delete({ resourceType: 'Practitioner', id: practitionerId });\n  await Promise.all([removeUser, removeUserPractitioner]);\n\n  console.log(`✅ employee deleted ${userId}`);\n  console.log(`✅ practitioner for employee deleted ${practitionerId}`);\n}\n\nasync function parseTestUser(user: UserResponse, oystehr: Oystehr): Promise<TestEmployee> {\n  const practitioner = await oystehr.fhir.get<Practitioner>({\n    resourceType: 'Practitioner',\n    id: user.profile.replace('Practitioner/', ''),\n  });\n\n  const firstName = getFirstName(practitioner);\n  const middleName = getMiddleName(practitioner);\n  const lastName = getLastName(practitioner);\n  if (!firstName || !middleName || !lastName) throw new Error(`Error parsing user full name: ${user.id}`);\n  const phone = practitioner.telecom?.find((telecom) => telecom.system === 'sms')?.value;\n  const npi = getPractitionerNPIIdentifier(practitioner)?.value;\n  const qualification = allLicensesForPractitioner(practitioner);\n  const credentials = getSuffix(practitioner);\n  if (!phone) throw new Error(`No phone for this user: ${user.id}`);\n  if (!npi) throw new Error(`No npi for this user: ${user.id}`);\n  if (!credentials) throw new Error(`No credentials for this user: ${user.id}`);\n  return {\n    id: user.id,\n    userName: user.name,\n    email: user.email,\n    phoneNumber: user.phoneNumber,\n    authenticationMethod: user.authenticationMethod,\n    profile: practitioner,\n    givenName: firstName,\n    middleName: middleName,\n    familyName: lastName,\n    telecomPhone: phone,\n    npi,\n    credentials,\n    roles: user.roles.map((role) => role.name) as RoleType[],\n    qualification,\n  };\n}\n"]}