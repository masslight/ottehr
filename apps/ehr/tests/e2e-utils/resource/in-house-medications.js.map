{"version":3,"file":"in-house-medications.js","sourceRoot":"","sources":["in-house-medications.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,wEA4BC;AA9BD;mJACmJ;AACnJ,SAAsB,8BAA8B,CAClD,SAAkB,EAClB,MAA+B,EAC/B,EAAU;;;;;;oBAEJ,MAAM,GAA+C;wBACzD,YAAY,EAAE,0BAA0B;wBACxC,MAAM;4BACJ;gCACE,IAAI,EAAE,qBAAqB;gCAC3B,KAAK,EAAE,6BAA6B;6BACrC;2BACE,CAAC,MAAM,KAAK,SAAS;4BACtB,CAAC,CAAC;gCACE;oCACE,IAAI,EAAE,SAAS;oCACf,KAAK,EAAE,kBAAW,EAAE,CAAE;iCACvB;6BACF;4BACH,CAAC,CAAC;gCACE;oCACE,IAAI,EAAE,SAAS;oCACf,KAAK,EAAE,oBAAa,EAAE,CAAE;iCACzB;6BACF,CAAC,OACP;qBACF,CAAC;oBACM,qBAAM,SAAS,CAAC,IAAI,CAAC,MAAM,CAAiD,MAAM,CAAC,EAAA;wBAA3F,sBAAO,CAAC,SAAmF,CAAC,CAAC,QAAQ,EAAE,EAAC;;;;CACzG","sourcesContent":["import Oystehr, { FhirSearchParams } from '@oystehr/sdk';\nimport { MedicationAdministration, MedicationStatement } from 'fhir/r4b';\n\n/**\n * passing idType you determine what resources you'll receive, patient means all orders for patient and encounter all orders for particular visit*/\nexport async function getInHouseMedicationsResources(\n  apiClient: Oystehr,\n  idType: 'patient' | 'encounter',\n  id: string\n): Promise<(MedicationAdministration | MedicationStatement)[]> {\n  const params: FhirSearchParams<MedicationAdministration> = {\n    resourceType: 'MedicationAdministration',\n    params: [\n      {\n        name: '_revinclude:iterate',\n        value: 'MedicationStatement:part-of',\n      },\n      ...(idType === 'patient'\n        ? [\n            {\n              name: 'subject',\n              value: `Patient/${id}`,\n            },\n          ]\n        : [\n            {\n              name: 'context',\n              value: `Encounter/${id}`,\n            },\n          ]),\n    ],\n  };\n  return (await apiClient.fhir.search<MedicationAdministration | MedicationStatement>(params)).unbundle();\n}\n"]}