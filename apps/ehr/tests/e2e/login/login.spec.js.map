{"version":3,"file":"login.spec.js","sourceRoot":"","sources":["login.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAgD;AAChD,uDAA8D;AAE9D,IAAA,WAAI,EAAC,eAAe,EAAE,iEAAO,EAA0B;;QAAxB,IAAI,UAAA,EAAE,OAAO,aAAA,EAAE,OAAO,aAAA;;;;gBACnD,IAAA,6BAAiB,GAAE,CAAC;gBAEV,qBAAM,OAAO,CAAC,UAAU,CAAC;wBACjC,YAAY,EAAE,SAAS;qBACxB,CAAC,EAAA;;gBAFF,OAAO,GAAG,SAER,CAAC;gBACI,qBAAM,OAAO,CAAC,OAAO,EAAE,EAAA;;gBAA9B,IAAI,GAAG,SAAuB,CAAC;gBAC/B,qBAAM,OAAO,CAAC,YAAY,EAAE,EAAA;;gBAA5B,SAA4B,CAAC;gBAC7B,qBAAM,OAAO,CAAC,gBAAgB,EAAE,EAAA;;gBAAhC,SAAgC,CAAC;gBAEjC,qBAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAA;;gBAApB,SAAoB,CAAC;gBACrB,qBAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,aAAc,CAAC,EAAA;;gBAAxD,SAAwD,CAAC;gBACzD,qBAAM,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAA;;gBAAzC,SAAyC,CAAC;gBAC1C,qBAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAA;;gBAA9B,SAA8B,CAAC;gBAC/B,qBAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,aAAc,CAAC,EAAA;;gBAAxD,SAAwD,CAAC;gBACzD,qBAAM,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAA;;gBAAzC,SAAyC,CAAC;;;;gBAIhB,qBAAM,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAA;;gBAArF,eAAe,GAAG,SAAmE;qBACvF,eAAe,EAAf,yBAAe;gBACjB,qBAAM,IAAI,CAAC,KAAK,CAAC,2BAA2B,CAAC,EAAA;;gBAA7C,SAA6C,CAAC;;;;;gBAGhD,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;;qBAGtE,qBAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAA;;gBAAhC,SAAgC,CAAC;gBAEjC,qBAAqB;gBACrB,qBAAM,OAAO,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,wBAAwB,EAAE,CAAC,EAAA;;gBAD9D,qBAAqB;gBACrB,SAA8D,CAAC;;;;gBAKvD,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;gBAC7D,qBAAM,YAAY,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,EAAA;;gBAA7C,SAA6C,CAAC;gBAC9C,qBAAM,YAAY,CAAC,KAAK,EAAE,EAAA;;gBAA1B,SAA0B,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;;;;gBAE7D,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;;qBAGrD,qBAAM,IAAA,aAAM,EAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,KAAM,EAAE,CAAC,EAAA;;gBAA7E,SAA6E,CAAC;;;;KAC/E,CAAC,CAAC","sourcesContent":["import { expect, test } from '@playwright/test';\nimport { checkIfEnvAllowed } from '../../e2e-utils/check-env';\n\ntest('Should log in', async ({ page, context, browser }) => {\n  checkIfEnvAllowed();\n\n  context = await browser.newContext({\n    storageState: undefined,\n  });\n  page = await context.newPage();\n  await context.clearCookies();\n  await context.clearPermissions();\n\n  await page.goto('/');\n  await page.fill('#username', process.env.TEXT_USERNAME!);\n  await page.click('button[type=\"submit\"]');\n  await page.waitForTimeout(100);\n  await page.fill('#password', process.env.TEXT_PASSWORD!);\n  await page.click('button[type=\"submit\"]');\n\n  // Check if authorization page appears and accept if it does. Actual for first login.\n  try {\n    const authorizeHeader = await page.waitForSelector('text=Authorize App', { timeout: 3000 });\n    if (authorizeHeader) {\n      await page.click('button:has-text(\"Accept\")');\n    }\n  } catch {\n    console.log('No authorization page detected, continuing with test');\n  }\n\n  await page.waitForURL('/visits');\n\n  // save login context\n  await context.storageState({ path: './playwright/user.json' });\n\n  // Try to handle additional auth modal if it appears\n  try {\n    // Look for the ZapEHR button with case-insensitive text matching\n    const zapehrButton = page.getByText(/continue with zapehr/i);\n    await zapehrButton.waitFor({ timeout: 5000 });\n    await zapehrButton.click();\n    console.log('Auth modal detected, logged in through ZapEHR');\n  } catch {\n    console.log('Auth modal not detected, continuing');\n  }\n\n  await expect(page.getByTestId('PersonIcon')).toBeVisible({ timeout: 30_000 });\n});\n"]}