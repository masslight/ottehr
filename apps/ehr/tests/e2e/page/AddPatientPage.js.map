{"version":3,"file":"AddPatientPage.js","sourceRoot":"","sources":["AddPatientPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../src/constants/data-test-ids';\n\nexport class AddPatientPage {\n  #page: Page;\n\n  constructor(page: Page) {\n    this.#page = page;\n  }\n\n  async selectOffice(officeName: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.dashboard.locationSelect).click();\n    await this.#page.locator(`li[role=\"option\"]:has-text(\"${officeName}\")`).first().click();\n  }\n\n  async enterMobilePhone(phone: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.mobilePhoneInput).locator('input').fill(phone);\n  }\n\n  async verifyMobilePhoneNumberValidationErrorShown(): Promise<void> {\n    await expect(\n      this.#page.locator('p:text(\"Phone number must be 10 digits in the format (xxx) xxx-xxxx\")')\n    ).toBeVisible();\n  }\n\n  async verifySearchForPatientsErrorShown(): Promise<void> {\n    await expect(this.#page.locator('p:text(\"Please search for patients before adding\")')).toBeVisible();\n  }\n\n  async clickSearchForPatientsButton(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.searchForPatientsButton).click();\n  }\n\n  async clickAddButton(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.addButton).click();\n  }\n\n  async clickCancelButton(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.cancelButton).click();\n  }\n\n  async verifyPageStillOpened(): Promise<void> {\n    await this.#page.waitForTimeout(1000);\n    await expectAddPatientPage(this.#page);\n  }\n\n  async clickPatientNotFoundButton(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.patientNotFoundButton).click();\n  }\n\n  async enterFirstName(firstName: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.firstNameInput).locator('input').fill(firstName);\n  }\n\n  async enterLastName(lastName: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.lastNameInput).locator('input').fill(lastName);\n  }\n\n  async enterDateOfBirth(dateOfBirth: string): Promise<void> {\n    const locator = this.#page.locator('[placeholder=\"MM/DD/YYYY\"]');\n    await locator.click();\n    await this.#page.waitForTimeout(2000);\n    // just because of date input for some reason not accepting wrong date\n    await locator.pressSequentially(dateOfBirth);\n  }\n\n  async selectSexAtBirth(sexAtBirth: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.sexAtBirthDropdown).click();\n    await this.#page.getByText(sexAtBirth, { exact: true }).click();\n  }\n\n  async selectReasonForVisit(reasonForVisit: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.reasonForVisitDropdown).click();\n    await this.#page.getByText(reasonForVisit).click();\n  }\n\n  async selectVisitType(visitType: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.visitTypeDropdown).click();\n    await this.#page.getByText(visitType).click();\n  }\n\n  async verifyDateFormatValidationErrorShown(): Promise<void> {\n    await expect(this.#page.locator('p:text(\"please enter date in format MM/DD/YYYY\")')).toBeVisible();\n  }\n\n  async selectExistingPatient(existingPatient: string): Promise<void> {\n    await this.#page.getByLabel(existingPatient).first().check();\n  }\n\n  async clickPrefillForButton(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.addPatientPage.prefillForButton).click();\n  }\n\n  async verifyPrefilledPatientName(patientName: string): Promise<void> {\n    await expect(\n      this.#page.getByTestId(dataTestIds.addPatientPage.prefilledPatientName).getByText(patientName)\n    ).toBeVisible();\n  }\n\n  async verifyPrefilledPatientBirthday(patientBirthday: string): Promise<void> {\n    await expect(\n      this.#page.getByTestId(dataTestIds.addPatientPage.prefilledPatientBirthday).getByText(patientBirthday)\n    ).toBeVisible();\n  }\n\n  async verifyPrefilledPatientBirthSex(patientBirthSex: string): Promise<void> {\n    await expect(\n      this.#page.getByTestId(dataTestIds.addPatientPage.prefilledPatientBirthSex).getByText(patientBirthSex)\n    ).toBeVisible();\n  }\n\n  async verifyPrefilledPatientEmail(patientEmail: string): Promise<void> {\n    await expect(\n      this.#page.getByTestId(dataTestIds.addPatientPage.prefilledPatientEmail).getByText(patientEmail)\n    ).toBeVisible();\n  }\n\n  async selectFirstAvailableSlot(): Promise<string> {\n    const buttonLocator = this.#page.getByTestId(dataTestIds.slots.slot).first();\n    await buttonLocator.click();\n    return (await buttonLocator.textContent()) ?? '';\n  }\n  async clickCloseSelectDateWarningDialog(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.dialog.closeButton).click();\n  }\n}\n\nexport async function expectAddPatientPage(page: Page): Promise<AddPatientPage> {\n  await page.waitForURL(`/visits/add`);\n  await expect(page.locator('h3').getByText('Add Patient')).toBeVisible();\n  return new AddPatientPage(page);\n}\n\nexport async function openAddPatientPage(page: Page): Promise<AddPatientPage> {\n  await page.goto(`/visits/add`);\n  return expectAddPatientPage(page);\n}\n"]}