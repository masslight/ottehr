{"version":3,"file":"EditMedicationCard.js","sourceRoot":"","sources":["EditMedicationCard.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../src/constants/data-test-ids';\n\nexport enum Field {\n  MEDICATION,\n  DOSE,\n  ASSOCIATED_DX,\n  UNITS,\n  MANUFACTURER,\n  ROUTE,\n  INSTRUCTIONS,\n  ORDERED_BY,\n}\n\nconst FIELD_TO_TEST_ID = new Map<Field, string>()\n  .set(Field.MEDICATION, dataTestIds.orderMedicationPage.inputField('medicationId'))\n  .set(Field.DOSE, dataTestIds.orderMedicationPage.inputField('dose'))\n  .set(Field.ASSOCIATED_DX, dataTestIds.orderMedicationPage.inputField('associatedDx'))\n  .set(Field.UNITS, dataTestIds.orderMedicationPage.inputField('units'))\n  .set(Field.MANUFACTURER, dataTestIds.orderMedicationPage.inputField('manufacturer'))\n  .set(Field.ROUTE, dataTestIds.orderMedicationPage.inputField('route'))\n  .set(Field.INSTRUCTIONS, dataTestIds.orderMedicationPage.inputField('instructions'))\n  .set(Field.ORDERED_BY, dataTestIds.orderMedicationPage.inputField('providerId'));\n\nexport class EditMedicationCard {\n  #page: Page;\n\n  constructor(page: Page) {\n    this.#page = page;\n  }\n\n  getDataTestId(field: Field): string {\n    const dataTestId = FIELD_TO_TEST_ID.get(field)!;\n    if (!dataTestId) {\n      throw new Error('Field is not found');\n    }\n    return dataTestId;\n  }\n\n  async selectMedication(medication: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.MEDICATION);\n    await this.#page.getByTestId(dataTestId).click();\n    await this.#page.getByText(medication, { exact: true }).click();\n  }\n\n  async verifyMedication(medication: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.MEDICATION);\n    await expect(this.#page.getByTestId(dataTestId).locator('input')).toHaveValue(medication);\n  }\n\n  async selectAssociatedDx(diagnosis: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.ASSOCIATED_DX);\n    await this.#page.getByTestId(dataTestId).click();\n    await this.#page.getByRole('option', { name: diagnosis }).waitFor({ state: 'visible' });\n    await this.#page.getByRole('option', { name: diagnosis }).click();\n  }\n\n  async selectOrderedBy(orderedBy: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.ORDERED_BY);\n\n    // mui set tabindex 0 to enabled element\n    await this.#page.locator(`[data-testid=\"${dataTestId}\"] [role=\"combobox\"][tabindex=\"0\"]`).waitFor({\n      timeout: 30000,\n    });\n\n    await this.#page.getByTestId(dataTestId).click();\n    await this.#page.getByRole('option', { name: orderedBy }).waitFor({ state: 'visible' });\n    await this.#page.getByRole('option', { name: orderedBy }).click();\n  }\n\n  async verifyAssociatedDx(diagnosis: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.ASSOCIATED_DX);\n    await expect(this.#page.getByTestId(dataTestId).locator('div:text(\"' + diagnosis + '\")')).toBeVisible();\n  }\n\n  async verifyDiagnosisNotAllowed(diagnosis: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.ASSOCIATED_DX);\n    await this.#page.getByTestId(dataTestId).click();\n    await this.#page.getByText(diagnosis).locator('input').isHidden();\n  }\n\n  async enterDose(dose: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.DOSE);\n    await this.#page.getByTestId(dataTestId).locator('input').fill('');\n    await this.#page.getByTestId(dataTestId).locator('input').pressSequentially(dose);\n  }\n  async clearDose(): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.DOSE);\n    await this.#page.getByTestId(dataTestId).locator('input').clear();\n  }\n\n  async verifyDose(dose: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.DOSE);\n    await expect(this.#page.getByTestId(dataTestId).locator('input')).toHaveValue(dose);\n  }\n\n  async selectUnits(units: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.UNITS);\n    await this.#page.getByTestId(dataTestId).click();\n    await this.#page.getByText(units, { exact: true }).click();\n  }\n\n  async verifyUnits(units: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.UNITS);\n    await expect(this.#page.getByTestId(dataTestId).locator('div:text(\"' + units + '\")')).toBeVisible();\n  }\n\n  async enterManufacturer(manufacturer: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.MANUFACTURER);\n    await this.#page.getByTestId(dataTestId).locator('input').fill(manufacturer);\n  }\n\n  async verifyManufacturer(manufacturer: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.MANUFACTURER);\n    await expect(this.#page.getByTestId(dataTestId).locator('input')).toHaveValue(manufacturer);\n  }\n\n  async clearManufacturer(): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.MANUFACTURER);\n    await this.#page.getByTestId(dataTestId).locator('input').clear();\n  }\n\n  async selectRoute(route: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.ROUTE);\n    await this.#page.getByTestId(dataTestId).click();\n    await this.#page.getByText(route, { exact: true }).click();\n  }\n\n  async verifyRoute(route: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.ROUTE);\n    await expect(this.#page.getByTestId(dataTestId).locator('div:text(\"' + route + '\")')).toBeVisible();\n  }\n\n  async enterInstructions(instructions: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.INSTRUCTIONS);\n    await this.#page.getByTestId(dataTestId).locator('textarea:visible').fill(instructions);\n  }\n\n  async verifyInstructions(instructions: string): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.INSTRUCTIONS);\n    await expect(this.#page.getByTestId(dataTestId).locator('textarea:visible')).toHaveText(instructions);\n  }\n\n  async clearInstructions(): Promise<void> {\n    const dataTestId = this.getDataTestId(Field.INSTRUCTIONS);\n    await this.#page.getByTestId(dataTestId).locator('textarea:visible').clear();\n  }\n\n  async verifyValidationErrorShown(field: Field, closeErrorDialog = true): Promise<void> {\n    if (closeErrorDialog) {\n      await this.#page.getByTestId(dataTestIds.dialog.closeButton).click();\n    }\n    const dataTestId = this.getDataTestId(field);\n    await expect(this.#page.getByTestId(dataTestId).locator('p:text(\"This field is required\")')).toBeVisible();\n  }\n\n  async verifyValidationErrorNotShown(field: Field): Promise<void> {\n    const dataTestId = this.getDataTestId(field);\n    await expect(this.#page.getByTestId(dataTestId).locator('p:text(\"This field is required\")')).toBeHidden();\n  }\n}\n"]}