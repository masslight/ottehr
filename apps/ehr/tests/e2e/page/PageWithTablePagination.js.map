{"version":3,"file":"PageWithTablePagination.js","sourceRoot":"","sources":["PageWithTablePagination.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAgD;AAChD,sEAAmE;AAEnE;IAGE,iCAAY,IAAU;QAFtB,gDAAY;QAGV,uBAAA,IAAI,iCAAS,IAAI,MAAA,CAAC;IACpB,CAAC;IAEK,+CAAa,GAAnB;;;;4BACE,qBAAM,uBAAA,IAAI,qCAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,KAAK,EAAE,EAAA;;wBAA9G,SAA8G,CAAC;;;;;KAChH;IAEK,mDAAiB,GAAvB;;;;4BACE,qBAAM,uBAAA,IAAI,qCAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC,KAAK,EAAE,EAAA;;wBAAlH,SAAkH,CAAC;;;;;KACpH;IAEK,uDAAqB,GAA3B,UAA4B,IAAY;;;;4BACtC,qBAAM,IAAA,aAAM,EACV,uBAAA,IAAI,qCAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,GAAG,IAAI,CAAC,CACrG,CAAC,WAAW,EAAE,EAAA;;wBAFf,SAEe,CAAC;;;;;KACjB;IAEK,mDAAiB,GAAvB,UAAwB,WAAmB;;;;4BACzC,qBAAM,uBAAA,IAAI,qCAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,EAAA;;wBAAjH,SAAiH,CAAC;wBAClH,qBAAM,uBAAA,IAAI,qCAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,KAAK,EAAE,EAAA;;wBAA/C,SAA+C,CAAC;;;;;KACjD;IAEK,+CAAa,GAAnB;;;;4BAEI,qBAAM,uBAAA,IAAI,qCAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAA;4BADxG,sBAAO,CACL,SAAsG,CACvG,CAAC,SAAS,EAAE,EAAC;;;;KACf;IAED;;;;;OAKG;IACG,6CAAW,GAAjB,UAAkB,QAAgC,EAAE,kBAAwC;;;;;6BACtF,kBAAkB,EAAlB,wBAAkB;wBACpB,qBAAM,kBAAkB,EAAE,EAAA;;wBAA1B,SAA0B,CAAC,CAAC,sCAAsC;;4BAG9D,qBAAM,QAAQ,EAAE,EAAA;;wBAApB,IAAI,SAAgB,EAAE,CAAC;4BACrB,sBAAO,IAAI,EAAC,CAAC,iCAAiC;wBAChD,CAAC;;4BACM,qBAAM,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,EAAA;;4BAArD,SAAqD;;4BAE9D,sBAAO,KAAK,EAAC,CAAC,gCAAgC;;;;KAC/C;IAED;;;;OAIG;IACW,wDAAsB,GAApC,UAAqC,kBAAwC;;;;4BACvE,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;6BAA1B,SAA0B,EAA1B,wBAA0B;wBAC5B,qBAAM,IAAI,CAAC,aAAa,EAAE,EAAA;;wBAA1B,SAA0B,CAAC;6BACvB,kBAAkB,EAAlB,wBAAkB;wBACpB,qBAAM,kBAAkB,EAAE,EAAA;;wBAA1B,SAA0B,CAAC,CAAC,wCAAwC;;4BAEtE,sBAAO,IAAI,EAAC;4BAEd,sBAAO,KAAK,EAAC;;;;KACd;IACH,8BAAC;AAAD,CAAC,AAlED,IAkEC;AAlEY,0DAAuB","sourcesContent":["import { expect, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../src/constants/data-test-ids';\n\nexport class PageWithTablePagination {\n  #page: Page;\n\n  constructor(page: Page) {\n    this.#page = page;\n  }\n\n  async clickNextPage(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.pagination.paginationContainer).getByTitle('Go to next page').click();\n  }\n\n  async clickPreviousPage(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.pagination.paginationContainer).getByTitle('Go to previous page').click();\n  }\n\n  async verifyPaginationState(rows: string): Promise<void> {\n    await expect(\n      this.#page.getByTestId(dataTestIds.pagination.paginationContainer).locator('p:text(\"' + rows + '\")')\n    ).toBeVisible();\n  }\n\n  async selectRowsPerPage(rowsPerPage: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.pagination.paginationContainer).getByText('10', { exact: true }).click();\n    await this.#page.getByText(rowsPerPage).click();\n  }\n\n  async canGoNextPage(): Promise<boolean> {\n    return (\n      await this.#page.getByTestId(dataTestIds.pagination.paginationContainer).getByTitle('Go to next page')\n    ).isEnabled();\n  }\n\n  /**\n   * Iterates through paginated results and finds an expected value.\n   * @param callback - A function that returns `true` when the expected element is found.\n   * @param pageLoadedCallback - (Optional) A function to wait for the page to load after pagination.\n   * @returns `true` if the element is found, otherwise `false`.\n   */\n  async findInPages(callback: () => Promise<boolean>, pageLoadedCallback?: () => Promise<void>): Promise<boolean> {\n    if (pageLoadedCallback) {\n      await pageLoadedCallback(); // Wait for the page to load initially\n    }\n    do {\n      if (await callback()) {\n        return true; // Stop when the condition is met\n      }\n    } while (await this.goToNextPageIfPossible(pageLoadedCallback));\n\n    return false; // Element not found in any page\n  }\n\n  /**\n   * Moves to the next page and waits for it to load.\n   * @param pageLoadedCallback - (Optional) A function to wait for the page to fully load.\n   * @returns `true` if pagination moved to the next page, otherwise `false`.\n   */\n  private async goToNextPageIfPossible(pageLoadedCallback?: () => Promise<void>): Promise<boolean> {\n    if (await this.canGoNextPage()) {\n      await this.clickNextPage();\n      if (pageLoadedCallback) {\n        await pageLoadedCallback(); // Wait for the page to load dynamically\n      }\n      return true;\n    }\n    return false;\n  }\n}\n"]}