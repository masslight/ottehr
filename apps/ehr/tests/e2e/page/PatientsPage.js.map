{"version":3,"file":"PatientsPage.js","sourceRoot":"","sources":["PatientsPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../src/constants/data-test-ids';\nimport { PageWithTablePagination } from './PageWithTablePagination';\n\nexport class PatientsPage extends PageWithTablePagination {\n  #page: Page;\n\n  constructor(page: Page) {\n    super(page);\n    this.#page = page;\n  }\n\n  async searchByLastName(name: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.searchByLastNameField).locator('input').fill(name);\n  }\n\n  async searchByGivenNames(names: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.searchByGivenNamesField).locator('input').fill(names);\n  }\n\n  async searchByDateOfBirth(dateOfBirth: string): Promise<void> {\n    const locator = this.#page.getByTestId(dataTestIds.patients.searchByDateOfBirthField).locator('input');\n    await locator.click();\n    await locator.fill(dateOfBirth);\n  }\n\n  async searchByMobilePhone(phone: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.searchByPhoneField).locator('input').fill(phone);\n  }\n\n  async searchByAddress(address: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.searchByAddressField).locator('input').fill(address);\n  }\n\n  async searchByEmail(email: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.searchByEmailField).locator('input').fill(email);\n  }\n\n  async searchByStatus(statusName: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.searchByStatusName).click();\n    await this.#page.getByText(new RegExp(statusName, 'i')).click();\n  }\n\n  async searchByLocation(locationName: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.searchByLocationName).click();\n    await this.#page.getByText(new RegExp(locationName, 'i')).click();\n  }\n\n  async clickSearchButton(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.searchButton).click();\n  }\n\n  async clickResetFiltersButton(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.patients.resetFiltersButton).click();\n  }\n\n  async verifyFilterReset(): Promise<void> {\n    await expect(this.#page.getByTestId(dataTestIds.patients.searchByLastNameField).locator('input')).toBeEmpty();\n    await expect(this.#page.getByTestId(dataTestIds.patients.searchByGivenNamesField).locator('input')).toBeEmpty();\n    await expect(this.#page.getByTestId(dataTestIds.patients.searchByDateOfBirthField).locator('input')).toBeEmpty();\n    await expect(this.#page.getByTestId(dataTestIds.patients.searchByPhoneField).locator('input')).toBeEmpty();\n    await expect(this.#page.getByTestId(dataTestIds.patients.searchByAddressField).locator('input')).toBeEmpty();\n    await expect(this.#page.getByTestId(dataTestIds.patients.searchByEmailField).locator('input')).toBeEmpty();\n  }\n\n  async verifyPatientPresent(patientInfo: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    dateOfBirth: string;\n    email: string;\n    phoneNumber: string;\n    address: string;\n  }): Promise<void> {\n    const patientPresent = await this.findInPages(\n      async () => {\n        const rowLocator = this.#page.getByTestId(dataTestIds.patients.searchResultRow(patientInfo.id));\n        if (!(await rowLocator.isVisible())) {\n          console.log(`❌ Row for patient ID ${patientInfo.id} is not visible in current page`);\n          return false;\n        }\n\n        const rowPatientId = await rowLocator.getByTestId(dataTestIds.patients.patientId).innerText();\n        const rowPatientName = await rowLocator.getByTestId(dataTestIds.patients.patientName).innerText();\n        const rowPatientDateOfBirth = await rowLocator.getByTestId(dataTestIds.patients.patientDateOfBirth).innerText();\n        const rowPatientEmail = await rowLocator.getByTestId(dataTestIds.patients.patientEmail).innerText();\n        const rowPatientPhoneNumber = await rowLocator.getByTestId(dataTestIds.patients.patientPhoneNumber).innerText();\n        const rowPatientAddress = await rowLocator.getByTestId(dataTestIds.patients.patientAddress).innerText();\n\n        const expectedName = patientInfo.lastName + ', ' + patientInfo.firstName;\n        const normalizedExpectedPhone = patientInfo.phoneNumber.replace(/[^\\d]/g, '');\n        const normalizedActualPhone = rowPatientPhoneNumber.replace(/^(\\+1)/, '').replace(/[^\\d]/g, '');\n        const expectedAddress = patientInfo.address;\n\n        const idMatch = rowPatientId === patientInfo.id;\n        const nameMatch = rowPatientName === expectedName;\n        const dobMatch = rowPatientDateOfBirth === patientInfo.dateOfBirth;\n        const emailMatch = rowPatientEmail === patientInfo.email;\n        const phoneMatch = normalizedActualPhone === normalizedExpectedPhone;\n        const addressMatch = rowPatientAddress === expectedAddress;\n\n        const allMatches = idMatch && nameMatch && dobMatch && emailMatch && phoneMatch && addressMatch;\n\n        if (!allMatches) {\n          console.log(`❌ Patient verification failed for ID: ${patientInfo.id}`);\n\n          if (!idMatch) {\n            console.log(`  - ID mismatch:\n              Expected: \"${patientInfo.id}\"\n              Actual:   \"${rowPatientId}\"`);\n          }\n\n          if (!nameMatch) {\n            console.log(`  - Name mismatch:\n              Expected: \"${expectedName}\"\n              Actual:   \"${rowPatientName}\"`);\n          }\n\n          if (!dobMatch) {\n            console.log(`  - Date of Birth mismatch:\n              Expected: \"${patientInfo.dateOfBirth}\"\n              Actual:   \"${rowPatientDateOfBirth}\"`);\n          }\n\n          if (!emailMatch) {\n            console.log(`  - Email mismatch:\n              Expected: \"${patientInfo.email}\"\n              Actual:   \"${rowPatientEmail}\"`);\n          }\n\n          if (!phoneMatch) {\n            console.log(`  - Phone Number mismatch:\n              Expected: \"${patientInfo.phoneNumber}\" (normalized: \"${normalizedExpectedPhone}\")\n              Actual:   \"${rowPatientPhoneNumber}\" (normalized: \"${normalizedActualPhone}\")`);\n          }\n\n          if (!addressMatch) {\n            console.log(`  - Address mismatch:\n              Expected: \"${JSON.stringify(expectedAddress)}\"\n              Actual:   \"${JSON.stringify(rowPatientAddress)}\"`);\n          }\n        }\n\n        return allMatches;\n      },\n      async () => {\n        // Ensure search results update after response is received\n        await this.#page\n          .getByTestId(/search-result-row-/i)\n          .first()\n          .waitFor({ state: 'attached' });\n      }\n    );\n\n    await expect.soft(patientPresent).toBe(true);\n  }\n}\n\nexport async function expectPatientsPage(page: Page): Promise<PatientsPage> {\n  await page.waitForURL('/patients');\n  await page.locator('p').getByText('Set up search filter and press Search to find patients').isVisible();\n  return new PatientsPage(page);\n}\n"]}