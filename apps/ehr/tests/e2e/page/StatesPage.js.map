{"version":3,"file":"StatesPage.js","sourceRoot":"","sources":["StatesPage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA,4CAIC;AAED,wCAGC;AArDD,yCAAgD;AAChD,sEAAmE;AACnE,qEAAoE;AAEpE;IAAgC,8BAAuB;IAGrD,oBAAY,IAAU;QACpB,YAAA,MAAK,YAAC,IAAI,CAAC,SAAC;QAHd,oCAAY;QAIV,uBAAA,KAAI,oBAAS,IAAI,MAAA,CAAC;;IACpB,CAAC;IAEK,uCAAkB,GAAxB,UAAyB,KAAa;;;;4BACpC,qBAAM,IAAA,aAAM,EAAC,uBAAA,IAAI,wBAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAA;;wBAA1F,SAA0F,CAAC;;;;;KAC5F;IAEK,yCAAoB,GAA1B,UAA2B,aAAqB;;;;4BAC9C,qBAAM,IAAA,aAAM,EAAC,uBAAA,IAAI,wBAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CACrG,IAAI,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC,CACjC,EAAA;;wBAFD,SAEC,CAAC;;;;;KACH;IAEK,iCAAY,GAAlB,UAAmB,IAAY;;;;4BAC7B,qBAAM,uBAAA,IAAI,wBAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAA;;wBAA7F,SAA6F,CAAC;;;;;KAC/F;IAEK,+BAAU,GAAhB,UAAiB,KAAa;;;;4BAC5B,qBAAM,uBAAA,IAAI,wBAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAA;;wBAAzF,SAAyF,CAAC;;;;;KAC3F;IAEK,kCAAa,GAAnB;;;;4BACU,qBAAM,uBAAA,IAAI,wBAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAA;4BAAxG,sBAAO,CAAC,SAAgG,CAAC,CAAC,SAAS,CACjH,CAAC,EACD,CAAC,CACF,EAAC;;;;KACH;IAEK,yCAAoB,GAA1B,UAA2B,KAAa,EAAE,OAAgB;;;;;;wBAClD,UAAU,GAAG,uBAAA,IAAI,wBAAM,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC/D,qBAAM,UAAU,CAAC,WAAW,CAAC,2BAAW,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,SAAS,EAAE,EAAA;;wBAAjG,UAAU,GAAG,SAAoF;wBACvG,IAAA,aAAM,EAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;;;;KACjD;IACH,iBAAC;AAAD,CAAC,AAtCD,CAAgC,iDAAuB,GAsCtD;AAtCY,gCAAU;;AAwCvB,SAAsB,gBAAgB,CAAC,IAAU;;;;wBAC/C,qBAAM,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,EAAA;;oBAA9C,SAA8C,CAAC;oBAC/C,qBAAM,IAAA,aAAM,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,EAAE,EAAA;;oBAAtE,SAAsE,CAAC;oBACvE,sBAAO,IAAI,UAAU,CAAC,IAAI,CAAC,EAAC;;;;CAC7B;AAED,SAAsB,cAAc,CAAC,IAAU;;;;wBAC7C,qBAAM,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,EAAA;;oBAAxC,SAAwC,CAAC;oBACzC,sBAAO,gBAAgB,CAAC,IAAI,CAAC,EAAC;;;;CAC/B","sourcesContent":["import { expect, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../src/constants/data-test-ids';\nimport { PageWithTablePagination } from './PageWithTablePagination';\n\nexport class StatesPage extends PageWithTablePagination {\n  #page: Page;\n\n  constructor(page: Page) {\n    super(page);\n    this.#page = page;\n  }\n\n  async verifyStatePresent(state: string): Promise<void> {\n    await expect(this.#page.getByTestId(dataTestIds.statesPage.stateRow(state))).toBeVisible();\n  }\n\n  async verifyStateNameField(stateNameText: string): Promise<void> {\n    await expect(this.#page.getByTestId(dataTestIds.editState.stateNameField).locator('input')).toHaveValue(\n      new RegExp(stateNameText + '.*')\n    );\n  }\n\n  async searchStates(text: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.statesPage.statesSearch).locator('input').fill(text);\n  }\n\n  async clickState(state: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.statesPage.stateRow(state)).locator('a').click();\n  }\n\n  async getFirstState(): Promise<string> {\n    return (await this.#page.getByTestId(dataTestIds.statesPage.stateValue).first().locator('a').innerText()).substring(\n      0,\n      2\n    );\n  }\n\n  async verifyOperateInState(state: string, operate: boolean): Promise<void> {\n    const rowLocator = this.#page.getByTestId(dataTestIds.statesPage.stateRow(state));\n    const rowOperate = await rowLocator.getByTestId(dataTestIds.statesPage.operateInStateValue).innerText();\n    expect(rowOperate).toBe(operate ? 'YES' : 'NO');\n  }\n}\n\nexport async function expectStatesPage(page: Page): Promise<StatesPage> {\n  await page.waitForURL(`/telemed-admin/states`);\n  await expect(page.locator('th').getByText('State name')).toBeVisible();\n  return new StatesPage(page);\n}\n\nexport async function openStatesPage(page: Page): Promise<StatesPage> {\n  await page.goto('/telemed-admin/states');\n  return expectStatesPage(page);\n}\n"]}