{"version":3,"file":"BaseAssessmentPage.js","sourceRoot":"","sources":["BaseAssessmentPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../../src/constants/data-test-ids';\n\nconst DEFAULT_TIMEOUT = { timeout: 15000 };\n\nexport abstract class BaseAssessmentPage {\n  #page: Page;\n\n  constructor(page: Page) {\n    this.#page = page;\n  }\n\n  async expectDiagnosisDropdown(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.diagnosisContainer.diagnosisDropdown).locator('input').waitFor({\n      state: 'visible',\n    });\n    const diagnosisAutocomplete = this.#page.getByTestId(dataTestIds.diagnosisContainer.diagnosisDropdown);\n    await expect(await diagnosisAutocomplete.locator('input')).toBeVisible(DEFAULT_TIMEOUT);\n  }\n\n  async expectMdmField(options?: { text?: string }): Promise<void> {\n    const { text } = options ?? {};\n    const mdmField = await this.#page.getByTestId(dataTestIds.assessmentCard.medicalDecisionField);\n    await expect(await mdmField.locator('textarea:visible')).toBeVisible(DEFAULT_TIMEOUT);\n    if (text) {\n      await expect(await mdmField.locator('textarea:visible')).toHaveText(text);\n    }\n  }\n\n  async fillMdmField(text: string): Promise<void> {\n    const mdmField = await this.#page.getByTestId(dataTestIds.assessmentCard.medicalDecisionField);\n    await mdmField.locator('textarea:visible').fill(text);\n  }\n\n  async selectDiagnosis({\n    diagnosisNamePart,\n    diagnosisCode,\n  }: {\n    diagnosisNamePart?: string;\n    diagnosisCode?: string;\n  }): Promise<void> {\n    if (!diagnosisCode && !diagnosisNamePart) {\n      throw new Error('Either diagnosisCode or diagnosisNamePart must be provided');\n    }\n\n    const diagnosisAutocomplete = await this.#page.getByTestId(dataTestIds.diagnosisContainer.diagnosisDropdown);\n\n    const searchText = diagnosisCode ?? diagnosisNamePart ?? '';\n\n    await diagnosisAutocomplete.click();\n    await diagnosisAutocomplete.locator('input').fill(searchText);\n    await this.#page\n      .getByRole('option', { name: new RegExp(searchText, 'i') })\n      .first()\n      .waitFor();\n    await this.#page\n      .getByRole('option', { name: new RegExp(searchText, 'i') })\n      .first()\n      .click();\n  }\n\n  async expectEmCodeDropdown(): Promise<void> {\n    await expect(this.#page.getByTestId(dataTestIds.assessmentCard.emCodeDropdown)).toBeVisible();\n  }\n\n  async selectEmCode(code: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.assessmentCard.emCodeDropdown).click();\n    await this.#page.getByTestId(dataTestIds.assessmentCard.emCodeDropdown).locator('input').fill(code);\n    await this.#page.getByRole('option').first().waitFor();\n    await this.#page.getByRole('option').first().click();\n  }\n}\n"]}