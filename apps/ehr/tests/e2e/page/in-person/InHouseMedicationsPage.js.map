{"version":3,"file":"InHouseMedicationsPage.js","sourceRoot":"","sources":["InHouseMedicationsPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../../src/constants/data-test-ids';\nimport { CssHeader } from '../CssHeader';\nimport { EditMedicationCard } from '../EditMedicationCard';\nimport { expectOrderMedicationPage, OrderMedicationPage } from '../OrderMedicationPage';\nimport { SideMenu } from '../SideMenu';\n\nexport class InHouseMedicationsPage {\n  #page: Page;\n\n  constructor(page: Page) {\n    this.#page = page;\n  }\n\n  cssHeader(): CssHeader {\n    return new CssHeader(this.#page);\n  }\n\n  sideMenu(): SideMenu {\n    return new SideMenu(this.#page);\n  }\n\n  medicationDetails(): EditMedicationCard {\n    return new EditMedicationCard(this.#page);\n  }\n\n  async clickOrderButton(): Promise<OrderMedicationPage> {\n    await this.#page.getByTestId(dataTestIds.inHouseMedicationsPage.orderButton).click();\n    return expectOrderMedicationPage(this.#page);\n  }\n\n  async verifyMedicationPresent(input: {\n    medicationName: string;\n    dose: string;\n    route: string;\n    instructions: string;\n    status: string;\n  }): Promise<void> {\n    await expect(\n      this.#page\n        .getByTestId(dataTestIds.inHouseMedicationsPage.marTableRow)\n        .filter({\n          has: this.#page\n            .getByTestId(dataTestIds.inHouseMedicationsPage.marTableMedicationCell)\n            .filter({ hasText: input.medicationName }),\n        })\n        .filter({\n          has: this.#page\n            .getByTestId(dataTestIds.inHouseMedicationsPage.marTableDoseCell)\n            .filter({ hasText: input.dose }),\n        })\n        .filter({\n          has: this.#page\n            .getByTestId(dataTestIds.inHouseMedicationsPage.marTableRouteCell)\n            .filter({ hasText: input.route }),\n        })\n        .filter({\n          has: this.#page\n            .getByTestId(dataTestIds.inHouseMedicationsPage.marTableInstructionsCell)\n            .filter({ hasText: input.instructions }),\n        })\n        .filter({\n          has: this.#page\n            .getByTestId(dataTestIds.inHouseMedicationsPage.marTableStatusCell)\n            .filter({ hasText: input.status }),\n        })\n    ).toBeVisible();\n  }\n\n  async clickMedicationDetailsTab(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.inHouseMedicationsPage.medicationDetailsTab).click();\n  }\n\n  async clickPencilIcon(): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.inHouseMedicationsPage.pencilIconButton).click();\n  }\n}\n\nexport async function expectInHouseMedicationsPage(page: Page): Promise<InHouseMedicationsPage> {\n  await page.waitForURL(new RegExp('/in-person/.*/in-house-medication/mar'));\n  await expect(page.getByTestId(dataTestIds.inHouseMedicationsPage.title)).toBeVisible();\n  return new InHouseMedicationsPage(page);\n}\n"]}