{"version":3,"file":"InPersonAssessmentPage.js","sourceRoot":"","sources":["InPersonAssessmentPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, Page } from '@playwright/test';\nimport { dataTestIds } from '../../../../src/constants/data-test-ids';\nimport { BaseAssessmentPage } from '../abstract/BaseAssessmentPage';\n\nexport class InPersonAssessmentPage extends BaseAssessmentPage {\n  #page: Page;\n  constructor(page: Page) {\n    super(page);\n    this.#page = page;\n  }\n\n  async selectCptCode(code: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.assessmentCard.cptCodeField).locator('input').fill(code);\n    await this.#page.getByRole('option').filter({ hasText: code }).first().waitFor();\n    await this.#page.getByRole('option').filter({ hasText: code }).first().click();\n\n    // Find the specific CPT code entry and verify its delete button is enabled to ensure the code is saved\n    const cptCodeEntry = this.#page.getByTestId(dataTestIds.billingContainer.cptCodeEntry(code));\n    await expect(cptCodeEntry).toBeVisible();\n    await expect(this.#page.getByTestId(dataTestIds.billingContainer.deleteCptCodeButton(code))).toBeEnabled();\n  }\n\n  async selectEmCode(code: string): Promise<void> {\n    await this.#page.getByTestId(dataTestIds.assessmentCard.emCodeDropdown).click();\n    await this.#page.getByTestId(dataTestIds.assessmentCard.emCodeDropdown).locator('input').fill(code);\n    await this.#page.getByRole('option').first().waitFor();\n    await this.#page.getByRole('option').first().click();\n\n    // Verify that the delete button is enabled to ensure the code is saved\n    await expect(this.#page.getByTestId(dataTestIds.billingContainer.deleteButton)).toBeEnabled();\n  }\n}\n\nexport async function expectAssessmentPage(page: Page): Promise<InPersonAssessmentPage> {\n  await page.waitForURL(new RegExp('/in-person/.*/assessment'));\n  await expect(page.getByTestId(dataTestIds.assessmentCard.medicalDecisionField)).toBeEnabled({\n    timeout: 30000,\n  });\n  return new InPersonAssessmentPage(page);\n}\n"]}