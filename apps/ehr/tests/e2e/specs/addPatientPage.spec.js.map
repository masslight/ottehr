{"version":3,"file":"addPatientPage.spec.js","sourceRoot":"","sources":["addPatientPage.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Page, test } from '@playwright/test';\nimport { DateTime } from 'luxon';\nimport { waitForResponseWithData } from 'test-utils';\nimport { unpackFhirResponse } from 'utils';\nimport { CreateAppointmentResponse } from 'utils/lib/types/api/prebook-create-appointment';\nimport { ENV_LOCATION_NAME } from '../../e2e-utils/resource/constants';\nimport {\n  PATIENT_BIRTH_DATE_LONG,\n  PATIENT_BIRTH_DATE_SHORT,\n  PATIENT_EMAIL,\n  PATIENT_FIRST_NAME,\n  PATIENT_LAST_NAME,\n  PATIENT_PHONE_NUMBER,\n  PATIENT_REASON_FOR_VISIT,\n  ResourceHandler,\n} from '../../e2e-utils/resource-handler';\nimport { expectAddPatientPage } from '../page/AddPatientPage';\nimport { expectVisitsPage } from '../page/VisitsPage';\n\nconst PATIENT_PREFILL_NAME = PATIENT_FIRST_NAME + ' ' + PATIENT_LAST_NAME;\nconst PATIENT_INPUT_BIRTHDAY = PATIENT_BIRTH_DATE_SHORT;\nconst REASON_FOR_VISIT = PATIENT_REASON_FOR_VISIT;\n\n// todo: remove hardcoded values, use constants from resource-handler\nconst NEW_PATIENT_1_LAST_NAME = 'new_1' + PATIENT_LAST_NAME;\nconst NEW_PATIENT_2_LAST_NAME = 'new_2' + PATIENT_LAST_NAME;\nconst NEW_PATIENT_3_LAST_NAME = 'new_3' + PATIENT_LAST_NAME;\nconst PATIENT_INPUT_GENDER = 'Male';\n\nconst VISIT_TYPES = {\n  WALK_IN: 'Walk-in In Person Visit',\n  PRE_BOOK: 'Pre-booked In Person Visit',\n  POST_TELEMED: 'Post Telemed lab Only',\n};\n\nconst PROCESS_ID = `addPatientPage.spec.ts-${DateTime.now().toMillis()}`;\n\nconst resourceHandler = new ResourceHandler(PROCESS_ID);\n\ntest.beforeEach(async ({ page }) => {\n  await page.goto('/visits/add');\n});\n\ntest('Open \"Add patient page\", click \"Cancel\", navigates back to visits page', async ({ page }) => {\n  const addPatientPage = await expectAddPatientPage(page);\n  await addPatientPage.clickCancelButton();\n\n  await expectVisitsPage(page);\n});\n\ntest('Open \"Add patient page\", click \"Search patient\", validation error on \"Mobile phone\" field shown', async ({\n  page,\n}) => {\n  const addPatientPage = await expectAddPatientPage(page);\n  await addPatientPage.clickSearchForPatientsButton();\n  await addPatientPage.verifyMobilePhoneNumberValidationErrorShown();\n});\n\ntest('Open \"Add patient page\" then enter invalid phone number, click \"Search patient\", validation error on \"Mobile phone\" field shown', async ({\n  page,\n}) => {\n  const addPatientPage = await expectAddPatientPage(page);\n  await addPatientPage.enterMobilePhone('123');\n  await addPatientPage.clickSearchForPatientsButton();\n  await addPatientPage.verifyMobilePhoneNumberValidationErrorShown();\n});\n\ntest('Add button does nothing when any required field is empty', async ({ page }) => {\n  const addPatientPage = await expectAddPatientPage(page);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.selectOffice(ENV_LOCATION_NAME!);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.enterMobilePhone(PATIENT_PHONE_NUMBER);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifySearchForPatientsErrorShown();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.clickSearchForPatientsButton();\n  await addPatientPage.clickPatientNotFoundButton();\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.enterFirstName(PATIENT_FIRST_NAME);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.enterLastName(PATIENT_LAST_NAME);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.enterDateOfBirth(PATIENT_INPUT_BIRTHDAY);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.selectSexAtBirth(PATIENT_INPUT_GENDER);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.selectReasonForVisit(REASON_FOR_VISIT);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.selectVisitType(VISIT_TYPES.PRE_BOOK);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.clickCloseSelectDateWarningDialog();\n  await addPatientPage.verifyPageStillOpened();\n\n  await addPatientPage.selectVisitType(VISIT_TYPES.POST_TELEMED);\n  await addPatientPage.clickAddButton();\n  await addPatientPage.clickCloseSelectDateWarningDialog();\n  await addPatientPage.verifyPageStillOpened();\n});\n\ntest('Open \"Add patient page\" then enter invalid date of birth, click \"Add\", validation error on \"Date of Birth\" field shown', async ({\n  page,\n}) => {\n  const addPatientPage = await expectAddPatientPage(page);\n  await addPatientPage.selectOffice(ENV_LOCATION_NAME!);\n  await addPatientPage.enterMobilePhone(PATIENT_PHONE_NUMBER);\n  await addPatientPage.clickSearchForPatientsButton();\n  await addPatientPage.clickPatientNotFoundButton();\n  await addPatientPage.enterDateOfBirth('3');\n  await addPatientPage.verifyDateFormatValidationErrorShown();\n});\n\ntest.describe('For new patient', () => {\n  test(\n    'Add walk-in visit for new patient',\n    {\n      tag: '@skipOnIntegration',\n    },\n    async ({ page }) => {\n      const { appointmentId } = await createAppointment(page, VISIT_TYPES.WALK_IN, false, NEW_PATIENT_1_LAST_NAME);\n\n      const visitsPage = await expectVisitsPage(page);\n      await visitsPage.selectLocation(ENV_LOCATION_NAME!);\n      await visitsPage.clickInOfficeTab();\n      await visitsPage.verifyVisitPresent(appointmentId);\n    }\n  );\n\n  test('Add pre-book visit for new patient', async ({ page }) => {\n    const { appointmentId, slotTime } = await createAppointment(\n      page,\n      VISIT_TYPES.PRE_BOOK,\n      false,\n      NEW_PATIENT_2_LAST_NAME\n    );\n\n    const visitsPage = await expectVisitsPage(page);\n    await visitsPage.selectLocation(ENV_LOCATION_NAME!);\n    await visitsPage.clickPrebookedTab();\n    await visitsPage.verifyVisitPresent(appointmentId, slotTime);\n  });\n\n  test.skip('Add post-telemed visit for new patient', { tag: '@flaky' }, async ({ page }) => {\n    const { appointmentId, slotTime } = await createAppointment(\n      page,\n      VISIT_TYPES.POST_TELEMED,\n      false,\n      NEW_PATIENT_3_LAST_NAME\n    );\n\n    const visitsPage = await expectVisitsPage(page);\n    await visitsPage.selectLocation(ENV_LOCATION_NAME!);\n    await visitsPage.clickPrebookedTab();\n    await visitsPage.verifyVisitPresent(appointmentId, slotTime);\n  });\n});\n\ntest.describe.skip(\n  'For existing patient',\n  {\n    tag: '@flaky',\n  },\n  () => {\n    test.beforeAll(async () => {\n      if (process.env.INTEGRATION_TEST === 'true') {\n        await resourceHandler.setResourcesFast();\n      } else {\n        await resourceHandler.setResources();\n        await resourceHandler.waitTillAppointmentPreprocessed(resourceHandler.appointment.id!);\n      }\n    });\n\n    test.afterAll(async () => {\n      await resourceHandler.cleanupResources();\n    });\n\n    test('Add walk-in visit for existing patient', async ({ page }) => {\n      const { appointmentId } = await createAppointment(page, VISIT_TYPES.WALK_IN, true);\n      const visitsPage = await expectVisitsPage(page);\n      await visitsPage.selectLocation(ENV_LOCATION_NAME!);\n      await visitsPage.clickInOfficeTab();\n      await visitsPage.verifyVisitPresent(appointmentId);\n    });\n\n    test('Add pre-book visit for existing patient', async ({ page }) => {\n      const { appointmentId, slotTime } = await createAppointment(page, VISIT_TYPES.PRE_BOOK, true);\n\n      const visitsPage = await expectVisitsPage(page);\n      await visitsPage.selectLocation(ENV_LOCATION_NAME!);\n      await visitsPage.clickPrebookedTab();\n      await visitsPage.verifyVisitPresent(appointmentId, slotTime);\n    });\n\n    test('Add post-telemed visit for existing patient', async ({ page }) => {\n      const { appointmentId, slotTime } = await createAppointment(page, VISIT_TYPES.POST_TELEMED, true);\n\n      const visitsPage = await expectVisitsPage(page);\n      await visitsPage.selectLocation(ENV_LOCATION_NAME!);\n      await visitsPage.clickPrebookedTab();\n      await visitsPage.verifyVisitPresent(appointmentId, slotTime);\n    });\n  }\n);\n\n// todo: don't write this here, create function in resource-handler\nasync function createAppointment(\n  page: Page,\n  visitType: (typeof VISIT_TYPES)[keyof typeof VISIT_TYPES],\n  existingPatient = false,\n  lastName?: string\n): Promise<{ appointmentId: string; slotTime: string | undefined }> {\n  const addPatientPage = await expectAddPatientPage(page);\n  await addPatientPage.selectOffice(ENV_LOCATION_NAME!);\n  await addPatientPage.enterMobilePhone(PATIENT_PHONE_NUMBER);\n  await addPatientPage.clickSearchForPatientsButton();\n\n  if (existingPatient) {\n    await addPatientPage.selectExistingPatient(PATIENT_PREFILL_NAME);\n    await addPatientPage.clickPrefillForButton();\n\n    await addPatientPage.verifyPrefilledPatientName(PATIENT_PREFILL_NAME);\n    await addPatientPage.verifyPrefilledPatientBirthday(PATIENT_BIRTH_DATE_LONG);\n    await addPatientPage.verifyPrefilledPatientBirthSex(PATIENT_INPUT_GENDER);\n    await addPatientPage.verifyPrefilledPatientEmail(PATIENT_EMAIL);\n    await addPatientPage.selectReasonForVisit(PATIENT_REASON_FOR_VISIT);\n  } else {\n    await addPatientPage.clickPatientNotFoundButton();\n    await addPatientPage.enterFirstName(PATIENT_FIRST_NAME);\n    await addPatientPage.enterLastName(lastName || '');\n    await addPatientPage.enterDateOfBirth(PATIENT_BIRTH_DATE_SHORT);\n    await addPatientPage.selectSexAtBirth(PATIENT_INPUT_GENDER);\n    await addPatientPage.selectReasonForVisit(PATIENT_REASON_FOR_VISIT);\n  }\n\n  let slotTime: string | undefined;\n  await addPatientPage.selectVisitType(visitType);\n  if (visitType !== VISIT_TYPES.WALK_IN) {\n    slotTime = await addPatientPage.selectFirstAvailableSlot();\n  }\n\n  const appointmentCreationResponse = waitForResponseWithData(page, /\\/create-appointment\\//);\n  await addPatientPage.clickAddButton();\n  const response = await unpackFhirResponse<CreateAppointmentResponse>(await appointmentCreationResponse);\n\n  if (!response.appointmentId) {\n    throw new Error('Appointment ID should be present in the response');\n  }\n  return { appointmentId: response.appointmentId, slotTime };\n}\n"]}