{"version":3,"file":"integrationTestDataContractTests.spec.js","sourceRoot":"","sources":["integrationTestDataContractTests.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, test } from '@playwright/test';\nimport {\n  Account,\n  Appointment,\n  ClinicalImpression,\n  Consent,\n  DocumentReference,\n  Encounter,\n  FhirResource,\n  List,\n  Observation,\n  Patient,\n  Person,\n  QuestionnaireResponse,\n  RelatedPerson,\n  Resource,\n  ServiceRequest,\n  Slot,\n} from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport { ResourceHandler } from '../../e2e-utils/resource-handler';\n\nconst PROCESS_ID = `contractTests-${DateTime.now().toMillis()}`;\nconst e2eHandler = new ResourceHandler(PROCESS_ID);\nconst integrationHandler = new ResourceHandler(PROCESS_ID);\n\ntest.beforeAll(async () => {\n  await Promise.all([await integrationHandler.setResourcesFast(), await e2eHandler.setResources()]);\n  await Promise.all([\n    e2eHandler.waitTillAppointmentPreprocessed(e2eHandler.appointment.id!),\n    e2eHandler.waitTillHarvestingDone(e2eHandler.appointment.id!),\n  ]);\n});\n\ntest.afterAll(async () => {\n  await integrationHandler.cleanupResources();\n  await e2eHandler.cleanupResources();\n});\n\nconst SKIP_ME = 'SKIP_ME_FOR_VALUE_CHECKING';\n\ntest('Ensure Resources created by generate test data -> harvest -> prefill is the same as what we create for integration testing', async () => {\n  // Gab fresh versions of all the EHR resources that are created by generate -> harvest -> prefill pipeline\n  const e2eResources = await getAllResourcesFromFHIR(e2eHandler.appointment.id!);\n  const integrationResources = await getAllResourcesFromFHIR(integrationHandler.appointment.id!);\n\n  appointmentTests(e2eResources, integrationResources);\n  patientTests(e2eResources, integrationResources);\n  relatedPersonTests(e2eResources, integrationResources);\n  personTests(e2eResources, integrationResources);\n  observationTests(e2eResources, integrationResources);\n  encounterTests(e2eResources, integrationResources);\n  slotTests(e2eResources, integrationResources);\n  listTests(e2eResources, integrationResources);\n  serviceRequestTests(e2eResources, integrationResources);\n  clinicalImpressionTests(e2eResources, integrationResources);\n  documentReferenceTests(e2eResources, integrationResources);\n  questionnaireResponseTests(e2eResources, integrationResources);\n  consentTests(e2eResources, integrationResources);\n  accountTests(e2eResources, integrationResources);\n});\n\nconst appointmentTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eAppointments = e2eResources.filter((resource) => resource.resourceType === 'Appointment') as Appointment[];\n  const integrationAppointments = integrationResources.filter(\n    (resource) => resource.resourceType === 'Appointment'\n  ) as Appointment[];\n\n  expect(e2eAppointments.length).toEqual(integrationAppointments.length);\n\n  const e2eAppointment = cleanAppointment(e2eAppointments[0]);\n  const integrationAppointment = cleanAppointment(integrationAppointments[0]);\n  checkKeysAndValuesBothWays(e2eAppointment, integrationAppointment, 'Appointment');\n};\n\nconst patientTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2ePatients = e2eResources.filter((resource) => resource.resourceType === 'Patient') as Patient[];\n  const integrationPatients = integrationResources.filter(\n    (resource) => resource.resourceType === 'Patient'\n  ) as Patient[];\n\n  expect(e2ePatients.length).toEqual(integrationPatients.length);\n\n  const e2eAppointment = cleanPatient(e2ePatients[0]);\n  const integrationAppointment = cleanPatient(integrationPatients[0]);\n  checkKeysAndValuesBothWays(e2eAppointment, integrationAppointment, 'Patient');\n};\n\nconst relatedPersonTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eRPs = e2eResources.filter((resource) => resource.resourceType === 'RelatedPerson') as RelatedPerson[];\n  const integrationRPs = integrationResources.filter(\n    (resource) => resource.resourceType === 'RelatedPerson'\n  ) as RelatedPerson[];\n\n  expect(e2eRPs.length).toEqual(integrationRPs.length);\n\n  const e2eRP = cleanRelatedPerson(e2eRPs[0]);\n  const integrationRP = cleanRelatedPerson(integrationRPs[0]);\n  checkKeysAndValuesBothWays(e2eRP, integrationRP, 'RelatedPerson');\n};\n\nconst personTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2ePersons = e2eResources.filter((resource) => resource.resourceType === 'Person') as Person[];\n  const integrationPersons = integrationResources.filter((resource) => resource.resourceType === 'Person') as Person[];\n\n  expect(e2ePersons.length).toEqual(integrationPersons.length);\n\n  const e2eP = cleanPerson(e2ePersons[0]);\n  const integrationP = cleanPerson(integrationPersons[0]);\n  checkKeysAndValuesBothWays(e2eP, integrationP, 'Person');\n};\n\nconst observationTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eObservations = e2eResources.filter((resource) => resource.resourceType === 'Observation') as Observation[];\n  const integrationObservations = integrationResources.filter(\n    (resource) => resource.resourceType === 'Observation'\n  ) as Observation[];\n\n  expect(e2eObservations.length).toEqual(integrationObservations.length);\n\n  const e2eCleaned = e2eObservations.map((observation) => cleanObservation(observation));\n  const integrationCleaned = integrationObservations.map((observation) => cleanObservation(observation));\n\n  e2eCleaned.forEach((e2eObservation) => {\n    const e2eObservationTypeTag = e2eObservation.meta?.tag?.find(\n      (tag) => tag.system === 'https://fhir.zapehr.com/r4/StructureDefinitions/exam-observation-field'\n    );\n    const integrationObservation = integrationCleaned.find(\n      (integrationObservation) =>\n        integrationObservation.meta?.tag?.find(\n          (tag) =>\n            tag.system === 'https://fhir.zapehr.com/r4/StructureDefinitions/exam-observation-field' &&\n            tag.code === e2eObservationTypeTag!.code\n        )\n    );\n\n    checkKeysAndValuesBothWays(e2eObservation, integrationObservation, `${e2eObservationTypeTag!.code} Observation`);\n  });\n};\n\nconst encounterTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eEncounters = e2eResources.filter((resource) => resource.resourceType === 'Encounter') as Encounter[];\n  const integrationEncounters = integrationResources.filter(\n    (resource) => resource.resourceType === 'Encounter'\n  ) as Encounter[];\n\n  expect(e2eEncounters.length).toEqual(integrationEncounters.length);\n\n  const e2eEncounter = cleanEncounter(e2eEncounters[0]);\n  const integrationEncounter = cleanEncounter(integrationEncounters[0]);\n  checkKeysAndValuesBothWays(e2eEncounter, integrationEncounter, 'Encounter');\n};\n\nconst slotTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eSlots = e2eResources.filter((resource) => resource.resourceType === 'Slot') as Slot[];\n  const integrationSlots = integrationResources.filter((resource) => resource.resourceType === 'Slot') as Slot[];\n\n  expect(e2eSlots.length).toEqual(integrationSlots.length);\n\n  const e2eSlot = cleanSlot(e2eSlots[0]);\n  const integrationSlot = cleanSlot(integrationSlots[0]);\n  checkKeysAndValuesBothWays(e2eSlot, integrationSlot, 'Slot');\n};\n\nconst listTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eLists = e2eResources.filter((resource) => resource.resourceType === 'List') as List[];\n  const integrationLists = integrationResources.filter((resource) => resource.resourceType === 'List') as List[];\n\n  expect(e2eLists.length).toEqual(integrationLists.length);\n\n  const e2eCleaned = e2eLists.map((list) => cleanList(list));\n  const integrationCleaned = integrationLists.map((list) => cleanList(list));\n\n  e2eCleaned.forEach((e2eList) => {\n    const integrationList = integrationCleaned.find((iList) => iList.title === e2eList.title);\n\n    checkKeysAndValuesBothWays(e2eList, integrationList, `${e2eList!.title} List`);\n  });\n};\n\nconst serviceRequestTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eServiceRequests = e2eResources.filter(\n    (resource) => resource.resourceType === 'ServiceRequest'\n  ) as ServiceRequest[];\n  const integrationServiceRequests = integrationResources.filter(\n    (resource) => resource.resourceType === 'ServiceRequest'\n  ) as ServiceRequest[];\n\n  expect(e2eServiceRequests.length).toEqual(integrationServiceRequests.length);\n\n  const e2eServiceRequest = cleanServiceRequest(e2eServiceRequests[0]);\n  const integrationServiceRequest = cleanServiceRequest(integrationServiceRequests[0]);\n  checkKeysAndValuesBothWays(e2eServiceRequest, integrationServiceRequest, 'ServiceRequest');\n};\n\nconst clinicalImpressionTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eClinicalImpressions = e2eResources.filter(\n    (resource) => resource.resourceType === 'ClinicalImpression'\n  ) as ClinicalImpression[];\n  const integrationClinicalImpressions = integrationResources.filter(\n    (resource) => resource.resourceType === 'ClinicalImpression'\n  ) as ClinicalImpression[];\n\n  expect(e2eClinicalImpressions.length).toEqual(integrationClinicalImpressions.length);\n\n  const e2eClinicalImpression = cleanClinicalImpression(e2eClinicalImpressions[0]);\n  const integrationClinicalImpression = cleanClinicalImpression(integrationClinicalImpressions[0]);\n  checkKeysAndValuesBothWays(e2eClinicalImpression, integrationClinicalImpression, 'ClinicalImpression');\n};\n\nconst documentReferenceTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eDocumentReferences = e2eResources.filter(\n    (resource) => resource.resourceType === 'DocumentReference'\n  ) as DocumentReference[];\n  const integrationDocumentReferences = integrationResources.filter(\n    (resource) => resource.resourceType === 'DocumentReference'\n  ) as DocumentReference[];\n\n  expect(e2eDocumentReferences.length).toEqual(integrationDocumentReferences.length);\n\n  const e2eCleaned = e2eDocumentReferences.map((docRef) => cleanDocumentReference(docRef));\n  const integrationCleaned = integrationDocumentReferences.map((docRef) => cleanDocumentReference(docRef));\n\n  e2eCleaned.forEach((e2eDocRef) => {\n    const e2eDocTypeLoincCoding = e2eDocRef.type?.coding?.find((coding) => coding.system === 'http://loinc.org');\n\n    const integrationDocRef = integrationCleaned.find(\n      (integrationDocRef) =>\n        integrationDocRef.type?.coding?.find(\n          (coding) => coding.system === 'http://loinc.org' && coding.code === e2eDocTypeLoincCoding!.code\n        )\n    );\n\n    checkKeysAndValuesBothWays(e2eDocRef, integrationDocRef, `${e2eDocTypeLoincCoding!.code} DocumentReference`);\n  });\n};\n\nconst questionnaireResponseTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eQuestionnaireResponses = e2eResources.filter(\n    (resource) => resource.resourceType === 'QuestionnaireResponse'\n  ) as QuestionnaireResponse[];\n  const integrationQuestionnaireResponses = integrationResources.filter(\n    (resource) => resource.resourceType === 'QuestionnaireResponse'\n  ) as QuestionnaireResponse[];\n\n  expect(e2eQuestionnaireResponses.length).toEqual(integrationQuestionnaireResponses.length);\n\n  const e2eQuestionnaireResponse = cleanQuestionnaireResponse(e2eQuestionnaireResponses[0]);\n  const integrationQuestionnaireResponse = cleanQuestionnaireResponse(integrationQuestionnaireResponses[0]);\n  checkKeysAndValuesBothWays(e2eQuestionnaireResponse, integrationQuestionnaireResponse, 'QuestionnaireResponse');\n};\n\nconst consentTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eConsents = e2eResources.filter((resource) => resource.resourceType === 'Consent') as Consent[];\n  const integrationConsents = integrationResources.filter(\n    (resource) => resource.resourceType === 'Consent'\n  ) as Consent[];\n\n  expect(e2eConsents.length).toEqual(integrationConsents.length);\n\n  const e2eConsent = cleanConsent(e2eConsents[0]);\n  const integrationConsent = cleanConsent(integrationConsents[0]);\n  checkKeysAndValuesBothWays(e2eConsent, integrationConsent, 'Consent');\n};\n\nconst accountTests = (e2eResources: Resource[], integrationResources: Resource[]): void => {\n  const e2eAccounts = e2eResources.filter((resource) => resource.resourceType === 'Account') as Account[];\n  const integrationAccounts = integrationResources.filter(\n    (resource) => resource.resourceType === 'Account'\n  ) as Account[];\n\n  expect(e2eAccounts.length).toEqual(integrationAccounts.length);\n\n  const e2eAccount = cleanAccount(e2eAccounts[0]);\n  const integrationAccount = cleanAccount(integrationAccounts[0]);\n  checkKeysAndValuesBothWays(e2eAccount, integrationAccount, 'Account');\n};\n\nconst checkKeysAndValuesBothWays = (e2eResource: any, integrationResource: any, label: string): void => {\n  Object.entries(e2eResource).forEach(([key, value]) => {\n    expect(integrationResource[key], `expect integration ${label}.${key} value to be defined`).toBeDefined();\n    // same meta tag sorting logic\n    if (key === 'meta') {\n      const valueMetaTags = (value as FhirResource['meta'])?.tag;\n      const integrationMetaTags = (integrationResource[key] as FhirResource['meta'])?.tag;\n      if (valueMetaTags && integrationMetaTags) {\n        const valueTagsSorted = valueMetaTags.sort((a, b) => {\n          if (a.system === undefined && b.system === undefined) {\n            return 0;\n          } else if (a.system === undefined) {\n            return 1; // undefined comes after defined\n          } else if (b.system === undefined) {\n            return -1; // defined comes before undefined\n          }\n          return a.system.localeCompare(b.system);\n        });\n        const integrationTagsSorted = integrationMetaTags.sort((a, b) => {\n          if (a.system === undefined && b.system === undefined) {\n            return 0;\n          } else if (a.system === undefined) {\n            return 1; // undefined comes after defined\n          } else if (b.system === undefined) {\n            return -1; // defined comes before undefined\n          }\n          return a.system.localeCompare(b.system);\n        });\n\n        const newVal = {\n          ...(value as any),\n          meta: {\n            ...((value as any).meta || {}),\n            tag: valueTagsSorted,\n          },\n        };\n        const compValue = {\n          ...(integrationResource[key] as any),\n          meta: {\n            ...((integrationResource[key] as any).meta || {}),\n            tag: integrationTagsSorted,\n          },\n        };\n        expect(compValue, `expect integration ${label}.${key} value to be equal`).toEqual(newVal);\n      } else {\n        expect(integrationResource[key], `expect integration ${label}.${key} value to be equal`).toEqual(value);\n      }\n    } else {\n      expect(integrationResource[key], `expect integration ${label}.${key} value to be equal`).toEqual(value);\n    }\n  });\n  Object.entries(integrationResource).forEach(([key, value]) => {\n    expect(e2eResource[key], `expect e2e ${label}.${key} value to be defined`).toBeDefined();\n    expect(e2eResource[key], `expect e2e ${label}.${key} value to be equal`).toEqual(value);\n  });\n};\n\nconst cleanOutMetaStuff = (resource: any): Resource => {\n  resource.id = SKIP_ME;\n  resource.meta.versionId = SKIP_ME;\n  resource.meta.lastUpdated = SKIP_ME;\n  return resource;\n};\n\nconst cleanAppointment = (appointment: Appointment): Appointment => {\n  let cleanedAppointment = { ...appointment };\n  cleanedAppointment = cleanOutMetaStuff(cleanedAppointment) as Appointment;\n  cleanedAppointment.participant[0].actor!.reference =\n    cleanedAppointment.participant[0].actor!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedAppointment.start = SKIP_ME;\n  cleanedAppointment.end = SKIP_ME;\n  cleanedAppointment.slot![0].reference = cleanedAppointment.slot![0].reference?.split('/')[0]; // Cut off the UUID for comparison\n  cleanedAppointment.created = SKIP_ME;\n  return cleanedAppointment;\n};\n\nconst cleanPatient = (patient: Patient): Patient => {\n  let cleanedPatient = { ...patient };\n  cleanedPatient = cleanOutMetaStuff(cleanedPatient) as Patient;\n  return cleanedPatient;\n};\n\nconst cleanRelatedPerson = (relatedPerson: RelatedPerson): RelatedPerson => {\n  let cleanedRelatedPerson = { ...relatedPerson };\n  cleanedRelatedPerson = cleanOutMetaStuff(cleanedRelatedPerson) as RelatedPerson;\n  cleanedRelatedPerson.patient.reference = cleanedRelatedPerson.patient.reference?.split('/')[0]; // cut off the UUID for comparison\n  return cleanedRelatedPerson;\n};\n\nconst cleanPerson = (person: Person): Person => {\n  let cleanedPerson = { ...person };\n  cleanedPerson = cleanOutMetaStuff(cleanedPerson) as Person;\n  cleanedPerson.link = []; // Can't check these because Person resource gets used for many different tests and it gets littered. It is effectively a shared resource.\n  return cleanedPerson;\n};\n\nconst cleanObservation = (observation: Observation): Observation => {\n  let cleanedObservation = { ...observation };\n  cleanedObservation = cleanOutMetaStuff(cleanedObservation) as Observation;\n  cleanedObservation.subject!.reference = cleanedObservation.subject!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedObservation.encounter!.reference = cleanedObservation.encounter!.reference?.split('/')[0]; // cut off the UUID for comparison\n  return cleanedObservation;\n};\n\nconst cleanEncounter = (encounter: Encounter): Encounter => {\n  let cleanedEncounter = { ...encounter };\n  cleanedEncounter = cleanOutMetaStuff(cleanedEncounter) as Encounter;\n  cleanedEncounter.appointment!.forEach((appointment) => {\n    appointment.reference = appointment.reference?.split('/')[0]; // cut off the UUID for comparison\n  });\n  cleanedEncounter.subject!.reference = cleanedEncounter.subject!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedEncounter.statusHistory?.forEach((statusHistory) => {\n    statusHistory.period!.start = SKIP_ME;\n  });\n  return cleanedEncounter;\n};\n\nconst cleanSlot = (slot: Slot): Slot => {\n  let cleanedSlot = { ...slot };\n  cleanedSlot = cleanOutMetaStuff(cleanedSlot) as Slot;\n  cleanedSlot.schedule!.reference = cleanedSlot.schedule!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedSlot.start = SKIP_ME;\n  cleanedSlot.end = SKIP_ME;\n  return cleanedSlot;\n};\n\nconst cleanList = (list: List): List => {\n  let cleanedList = { ...list };\n  cleanedList = cleanOutMetaStuff(cleanedList) as List;\n  cleanedList.subject!.reference = cleanedList.subject!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedList.entry?.forEach((entry) => {\n    entry.item!.reference = entry.item!.reference?.split('/')[0]; // cut off the UUID for comparison\n    entry.date = SKIP_ME;\n  });\n  return cleanedList;\n};\n\nconst cleanServiceRequest = (serviceRequest: ServiceRequest): ServiceRequest => {\n  let cleanedServiceRequest = { ...serviceRequest };\n  cleanedServiceRequest = cleanOutMetaStuff(cleanedServiceRequest) as ServiceRequest;\n  cleanedServiceRequest.subject!.reference = cleanedServiceRequest.subject!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedServiceRequest.encounter!.reference = cleanedServiceRequest.encounter!.reference?.split('/')[0]; // cut off the UUID for comparison\n  return cleanedServiceRequest;\n};\n\nconst cleanClinicalImpression = (clinicalImpression: ClinicalImpression): ClinicalImpression => {\n  let cleanedClinicalImpression = { ...clinicalImpression };\n  cleanedClinicalImpression = cleanOutMetaStuff(cleanedClinicalImpression) as ClinicalImpression;\n  cleanedClinicalImpression.subject!.reference = cleanedClinicalImpression.subject!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedClinicalImpression.encounter!.reference = cleanedClinicalImpression.encounter!.reference?.split('/')[0]; // cut off the UUID for comparison\n  return cleanedClinicalImpression;\n};\n\nconst cleanDocumentReference = (documentReference: DocumentReference): DocumentReference => {\n  let cleanedDocumentReference = { ...documentReference };\n  cleanedDocumentReference = cleanOutMetaStuff(cleanedDocumentReference) as DocumentReference;\n  cleanedDocumentReference.subject!.reference = cleanedDocumentReference.subject!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedDocumentReference.date = SKIP_ME;\n  cleanedDocumentReference.content.forEach((content) => {\n    content.attachment!.url = SKIP_ME;\n  });\n  cleanedDocumentReference.context?.related?.forEach((related) => {\n    related.reference = related.reference?.split('/')[0]; // cut off the UUID for comparison\n  });\n  return cleanedDocumentReference;\n};\n\nconst cleanQuestionnaireResponse = (questionnaireResponse: QuestionnaireResponse): QuestionnaireResponse => {\n  let cleanedQuestionnaireResponse = { ...questionnaireResponse };\n  cleanedQuestionnaireResponse = cleanOutMetaStuff(cleanedQuestionnaireResponse) as QuestionnaireResponse;\n  cleanedQuestionnaireResponse.subject!.reference = cleanedQuestionnaireResponse.subject!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedQuestionnaireResponse.encounter!.reference = cleanedQuestionnaireResponse.encounter!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedQuestionnaireResponse.authored = SKIP_ME;\n  return cleanedQuestionnaireResponse;\n};\n\nconst cleanConsent = (consent: Consent): Consent => {\n  let cleanedConsent = { ...consent };\n  cleanedConsent = cleanOutMetaStuff(cleanedConsent) as Consent;\n  cleanedConsent.patient!.reference = cleanedConsent.patient!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedConsent.sourceReference!.reference = cleanedConsent.sourceReference!.reference?.split('/')[0]; // cut off the UUID for comparison\n  cleanedConsent.dateTime = SKIP_ME;\n  return cleanedConsent;\n};\n\nconst cleanAccount = (account: Account): Account => {\n  let cleanedAccount = { ...account };\n  cleanedAccount = cleanOutMetaStuff(cleanedAccount) as Account;\n  cleanedAccount.subject?.forEach((subject) => {\n    subject.reference = subject.reference?.split('/')[0]; // cut off the UUID for comparison\n  });\n  const containedRelatedPerson = cleanedAccount.contained?.find(\n    (contained) => contained.resourceType === 'RelatedPerson'\n  ) as RelatedPerson;\n  containedRelatedPerson.patient.reference = containedRelatedPerson.patient.reference?.split('/')[0]; // cut off the UUID for comparison\n  return cleanedAccount;\n};\n\nconst getAllResourcesFromFHIR = async (appointmentId: string): Promise<Resource[]> => {\n  return (\n    await e2eHandler.apiClient.fhir.search<Appointment>({\n      resourceType: 'Appointment',\n      params: [\n        {\n          name: '_id',\n          value: appointmentId,\n        },\n        {\n          name: '_include',\n          value: 'Appointment:patient',\n        },\n        {\n          name: '_include',\n          value: 'Appointment:slot',\n        },\n        {\n          name: '_include',\n          value: 'Appointment:location',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'RelatedPerson:patient',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'Encounter:appointment',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'DocumentReference:patient',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'QuestionnaireResponse:encounter',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'Person:relatedperson',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'List:subject',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'Consent:patient',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'Account:patient',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'Observation:encounter',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'ServiceRequest:encounter',\n        },\n        {\n          name: '_revinclude:iterate',\n          value: 'ClinicalImpression:encounter',\n        },\n      ],\n    })\n  ).unbundle();\n\n  // Note it does not include AuditEvent yet but could?\n};\n"]}