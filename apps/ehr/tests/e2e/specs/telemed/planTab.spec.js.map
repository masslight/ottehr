{"version":3,"file":"planTab.spec.js","sourceRoot":"","sources":["planTab.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, Page, test } from '@playwright/test';\nimport { DateTime } from 'luxon';\nimport { waitForSaveChartDataResponse } from 'test-utils';\nimport { TelemedAppointmentVisitTabs } from 'utils';\nimport { dataTestIds } from '../../../../src/constants/data-test-ids';\nimport { assignAppointmentIfNotYetAssignedToMeAndVerifyPreVideo } from '../../../e2e-utils/helpers/telemed.test-helpers';\nimport { getDropdownOption } from '../../../e2e-utils/helpers/tests-utils';\nimport { ResourceHandler } from '../../../e2e-utils/resource-handler';\n\ntest.describe('Disposition', async () => {\n  test.describe('Primary Care Physician', async () => {\n    const PROCESS_ID = `planTab.spec.ts-disposition-${DateTime.now().toMillis()}`;\n    const resourceHandler = new ResourceHandler(PROCESS_ID, 'telemed');\n    let page: Page;\n    const defaultNote = 'Please see your Primary Care Physician as discussed.';\n    const updatedNote = 'Lorem ipsum';\n    const followUpMenuOption = '3 days';\n    const followUpMessage = 'Follow-up visit in 3 days';\n\n    test.beforeAll(async ({ browser }) => {\n      const context = await browser.newContext();\n      page = await context.newPage();\n      await resourceHandler.setResources();\n      await resourceHandler.waitTillAppointmentPreprocessed(resourceHandler.appointment.id!);\n\n      await page.goto(`telemed/appointments/${resourceHandler.appointment.id}`);\n      await assignAppointmentIfNotYetAssignedToMeAndVerifyPreVideo(page, { forceWaitForAssignButton: true });\n    });\n\n    test.afterAll(async () => {\n      await resourceHandler.cleanupResources();\n    });\n\n    test.describe.configure({ mode: 'serial' });\n\n    test(\"Should check 'Primary Care Physician' is selected by default\", async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.appointmentVisitTabs(TelemedAppointmentVisitTabs.plan)).click();\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionContainer)).toBeVisible();\n      const primaryCarePhysicianButton = page.getByTestId(\n        dataTestIds.telemedEhrFlow.planTabDispositionToggleButton('pcp-no-type')\n      );\n      const attribute = await primaryCarePhysicianButton.getAttribute('aria-pressed');\n      expect(attribute).toBe('true');\n    });\n\n    test(\"Should check 'Follow up visit in' drop down and 'Note' field are present for 'Primary Care Physician' selected\", async () => {\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionFollowUpDropdown)).toBeVisible();\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)).toBeVisible();\n    });\n\n    test(\"Should check 'Note' section has pre-filled text for 'Primary Care Physician'\", async () => {\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)).toHaveText(\n        new RegExp(defaultNote)\n      );\n    });\n\n    test(\"Should select some 'Follow up visit in' option\", async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionFollowUpDropdown).click();\n      const option = await getDropdownOption(page, followUpMenuOption);\n      await option.click();\n      await waitForSaveChartDataResponse(page);\n    });\n\n    test(\"Should update 'Primary Care Physician' 'Note' section\", async () => {\n      await page\n        .getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)\n        .locator('textarea')\n        .first()\n        .fill(updatedNote);\n      await waitForSaveChartDataResponse(page);\n    });\n\n    test('Should check follow up message and note are saved on Review&Sign tab', async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.appointmentVisitTabs(TelemedAppointmentVisitTabs.sign)).click();\n      const patientInstructionsContainer = page.getByTestId(\n        dataTestIds.telemedEhrFlow.reviewTabPatientInstructionsContainer\n      );\n      await expect(patientInstructionsContainer).toBeVisible();\n      await expect(patientInstructionsContainer).toHaveText(new RegExp(updatedNote));\n      await expect(patientInstructionsContainer).toHaveText(new RegExp(followUpMessage));\n    });\n  });\n\n  test.describe('Transfer to another location', async () => {\n    const PROCESS_ID = `planTab.spec.ts-transfer-${DateTime.now().toMillis()}`;\n    const resourceHandler = new ResourceHandler(PROCESS_ID, 'telemed');\n    let page: Page;\n    const defaultNote = 'Please proceed to the ABC Office as advised.';\n    const updatedNote = 'Lorem ipsum';\n    const reasonForTransferOption = 'Equipment availability';\n\n    test.beforeAll(async ({ browser }) => {\n      const context = await browser.newContext();\n      page = await context.newPage();\n      await resourceHandler.setResources();\n      await resourceHandler.waitTillAppointmentPreprocessed(resourceHandler.appointment.id!);\n\n      await page.goto(`telemed/appointments/${resourceHandler.appointment.id}`);\n      await assignAppointmentIfNotYetAssignedToMeAndVerifyPreVideo(page, { forceWaitForAssignButton: true });\n    });\n\n    test.afterAll(async () => {\n      await resourceHandler.cleanupResources();\n    });\n\n    test.describe.configure({ mode: 'serial' });\n\n    test(\"Should check 'Reason for transfer' drop down and 'Note' field are present for 'Transfer to another location' selected\", async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.appointmentVisitTabs(TelemedAppointmentVisitTabs.plan)).click();\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionContainer)).toBeVisible();\n\n      await page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionToggleButton('another')).click();\n      await expect(\n        page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionReasonForTransferDropdown)\n      ).toBeVisible();\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)).toBeVisible();\n    });\n\n    test(\"Should check 'Note' section has pre-filled text for 'Transfer to another location' selected\", async () => {\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)).toHaveText(\n        new RegExp(defaultNote)\n      );\n    });\n\n    test(\"Should select some 'Reason for transfer' option\", async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionReasonForTransferDropdown).click();\n      const option = await getDropdownOption(page, reasonForTransferOption);\n      await option.click();\n      await waitForSaveChartDataResponse(page);\n    });\n\n    test('Should edit transfer Note', async () => {\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)).toHaveText(\n        new RegExp(defaultNote)\n      );\n      await page\n        .getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)\n        .locator('textarea')\n        .first()\n        .fill(updatedNote);\n      await waitForSaveChartDataResponse(page);\n    });\n\n    test('Should check reason for transfer and note are saved on Review&Sign tab', async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.appointmentVisitTabs(TelemedAppointmentVisitTabs.sign)).click();\n      const patientInstructionsContainer = page.getByTestId(\n        dataTestIds.telemedEhrFlow.reviewTabPatientInstructionsContainer\n      );\n      await expect(patientInstructionsContainer).toHaveText(new RegExp(updatedNote));\n      await expect(patientInstructionsContainer).toHaveText(new RegExp(reasonForTransferOption));\n    });\n  });\n\n  test.describe('Specialty transfer', async () => {\n    const PROCESS_ID = `planTab.spec.ts-specialty-transfer-${DateTime.now().toMillis()}`;\n    const resourceHandler = new ResourceHandler(PROCESS_ID, 'telemed');\n    let page: Page;\n    const updatedNote = 'Lorem ipsum';\n    const followUpMenuOption = '3 days';\n    const followUpMessage = 'Follow-up visit in 3 days';\n\n    test.beforeAll(async ({ browser }) => {\n      const context = await browser.newContext();\n      page = await context.newPage();\n      await resourceHandler.setResources();\n      await resourceHandler.waitTillAppointmentPreprocessed(resourceHandler.appointment.id!);\n\n      await page.goto(`telemed/appointments/${resourceHandler.appointment.id}`);\n      await assignAppointmentIfNotYetAssignedToMeAndVerifyPreVideo(page, { forceWaitForAssignButton: true });\n    });\n\n    test.afterAll(async () => {\n      await resourceHandler.cleanupResources();\n    });\n\n    test.describe.configure({ mode: 'serial' });\n\n    test(\"Should check 'Follow up visit in' drop down and 'Note' field are present for 'Specialty transfer' selected\", async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.appointmentVisitTabs(TelemedAppointmentVisitTabs.plan)).click();\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionContainer)).toBeVisible();\n\n      await page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionToggleButton('specialty')).click();\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionFollowUpDropdown)).toBeVisible();\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)).toBeVisible();\n    });\n\n    test(\"Should check 'Note' field is empty by default for 'Specialty transfer' selected\", async () => {\n      await expect(\n        page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote).locator('textarea').first()\n      ).toHaveText('');\n    });\n\n    test(\"Should select some 'Follow up visit in' option\", async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionFollowUpDropdown).click();\n      const option = await getDropdownOption(page, followUpMenuOption);\n      await option.click();\n      await waitForSaveChartDataResponse(page);\n    });\n\n    test('Should edit transfer note', async () => {\n      await page\n        .getByTestId(dataTestIds.telemedEhrFlow.planTabDispositionNote)\n        .locator('textarea')\n        .first()\n        .fill(updatedNote);\n      await waitForSaveChartDataResponse(page);\n    });\n\n    test('Should check follow up message and transfer note are saved on Review&Sign tab', async () => {\n      await page.getByTestId(dataTestIds.telemedEhrFlow.appointmentVisitTabs(TelemedAppointmentVisitTabs.sign)).click();\n      const patientInstructionsContainer = page.getByTestId(\n        dataTestIds.telemedEhrFlow.reviewTabPatientInstructionsContainer\n      );\n      await expect(patientInstructionsContainer).toHaveText(new RegExp(updatedNote));\n      await expect(patientInstructionsContainer).toHaveText(new RegExp(followUpMessage));\n    });\n  });\n});\n"]}