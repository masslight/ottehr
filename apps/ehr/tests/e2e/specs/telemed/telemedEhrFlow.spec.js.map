{"version":3,"file":"telemedEhrFlow.spec.js","sourceRoot":"","sources":["telemedEhrFlow.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import Oystehr from '@oystehr/sdk';\nimport { BrowserContext, expect, Page, test } from '@playwright/test';\nimport { AppointmentParticipant, Location } from 'fhir/r4b';\nimport { DateTime } from 'luxon';\nimport {\n  fillWaitAndSelectDropdown,\n  getPatientConditionPhotosStepAnswers,\n  waitForSaveChartDataResponse,\n} from 'test-utils';\nimport {\n  AdditionalBooleanQuestionsFieldsNames,\n  allLicensesForPractitioner,\n  ApptTelemedTab,\n  getAdditionalQuestionsAnswers,\n  getAllergiesStepAnswers,\n  getConsentStepAnswers,\n  getContactInformationAnswers,\n  getInviteParticipantStepAnswers,\n  getMedicalConditionsStepAnswers,\n  getMedicationsStepAnswers,\n  getPatientDetailsStepAnswers,\n  getPaymentOptionSelfPayAnswers,\n  getResponsiblePartyStepAnswers,\n  getSchoolWorkNoteStepAnswers,\n  getSurgicalHistoryStepAnswers,\n  getTelemedLocations,\n  isLocationVirtual,\n  isoToDateObject,\n  TelemedAppointmentStatusEnum,\n} from 'utils';\nimport { ADDITIONAL_QUESTIONS } from '../../../../src/constants';\nimport { dataTestIds } from '../../../../src/constants/data-test-ids';\nimport { assignAppointmentIfNotYetAssignedToMeAndVerifyPreVideo } from '../../../e2e-utils/helpers/telemed.test-helpers';\nimport { awaitAppointmentsTableToBeVisible, telemedDialogConfirm } from '../../../e2e-utils/helpers/tests-utils';\nimport { ResourceHandler } from '../../../e2e-utils/resource-handler';\n\nconst DEFAULT_TIMEOUT = { timeout: 15000 };\n\nasync function getTestUserQualificationStates(resourceHandler: ResourceHandler): Promise<string[]> {\n  const testsUser = await resourceHandler.getTestsUserAndPractitioner();\n\n  const telemedLocations = await getTelemedLocations(resourceHandler.apiClient);\n  if (!telemedLocations) {\n    throw new Error('No Telemed locations available');\n  }\n  const availableStates = new Set(\n    telemedLocations.filter((location) => location.available).map((location) => location.state)\n  );\n\n  const userQualificationStates = allLicensesForPractitioner(testsUser.practitioner)\n    .filter((license) => license.active && license.state && availableStates.has(license.state))\n    .map((license) => license.state);\n  if (userQualificationStates.length < 1) throw new Error('User has no qualification locations');\n  return userQualificationStates;\n}\n\nasync function getTestStateThatNotQualificationsStatesList(\n  apiClient: Oystehr,\n  qualificationStates: string[]\n): Promise<string> {\n  const activeStates = (await getTelemedLocations(apiClient))\n    ?.filter((location) => location.available)\n    .map((location) => location.state);\n  const activeStateNotInList = activeStates?.find((state) => !qualificationStates.includes(state));\n  if (!activeStateNotInList)\n    throw new Error(\n      `Can't find active test state that not in list of test user qualifications states: ${JSON.stringify(\n        qualificationStates\n      )}`\n    );\n  return activeStateNotInList;\n}\n\ntest.describe('Tests checking data without mutating state', () => {\n  const myPatientsProcessId = `telemedEhrFlow.spec.ts-my-patients-non-mutating-${DateTime.now().toMillis()}`;\n  const myPatientsTabAppointmentResources = new ResourceHandler(myPatientsProcessId, 'telemed');\n  const otherPatientsProcessId = `telemedEhrFlow.spec.ts-other-patients-non-mutating-${DateTime.now().toMillis()}`;\n  const otherPatientsTabAppointmentResources = new ResourceHandler(otherPatientsProcessId, 'telemed');\n  let testsUserQualificationState: string;\n  let randomState: string;\n\n  test.beforeAll(async () => {\n    const testsUserStates = await getTestUserQualificationStates(myPatientsTabAppointmentResources);\n    testsUserQualificationState = testsUserStates[0];\n    randomState = await getTestStateThatNotQualificationsStatesList(\n      myPatientsTabAppointmentResources.apiClient,\n      testsUserStates\n    );\n\n    await Promise.all([\n      myPatientsTabAppointmentResources.setResources({\n        telemedLocationState: testsUserQualificationState,\n      }),\n      otherPatientsTabAppointmentResources.setResources({\n        telemedLocationState: randomState,\n      }),\n    ]);\n  });\n\n  test.afterAll(async () => {\n    await Promise.all([\n      myPatientsTabAppointmentResources.cleanupResources(),\n      otherPatientsTabAppointmentResources.cleanupResources(),\n    ]);\n  });\n\n  test(\"Appointment should appear correctly in 'my patients' tab\", async ({ page }) => {\n    await page.goto(`telemed/appointments`);\n    await awaitAppointmentsTableToBeVisible(page);\n\n    await expect(\n      page.getByTestId(\n        dataTestIds.telemedEhrFlow.trackingBoardTableRow(myPatientsTabAppointmentResources.appointment.id!)\n      )\n    ).toBeVisible({ timeout: 20000 });\n  });\n\n  test(\"Appointment should appear correctly in 'all patients' tab.\", async ({ page }) => {\n    await page.goto(`telemed/appointments`);\n    await awaitAppointmentsTableToBeVisible(page);\n\n    await page.getByTestId(dataTestIds.telemedEhrFlow.allPatientsButton).click();\n    await awaitAppointmentsTableToBeVisible(page);\n\n    await expect(\n      page.getByTestId(\n        dataTestIds.telemedEhrFlow.trackingBoardTableRow(otherPatientsTabAppointmentResources.appointment.id!)\n      )\n    ).toBeVisible();\n  });\n\n  test('Appointment has location label and is in a relevant location group', async ({ page }) => {\n    await page.goto(`telemed/appointments`);\n    await awaitAppointmentsTableToBeVisible(page);\n\n    const appointmentId = myPatientsTabAppointmentResources.appointment.id;\n    const appointmentRow = page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardTableRow(appointmentId!));\n\n    const locationGroup = await appointmentRow.getAttribute('data-location-group');\n\n    expect(locationGroup?.toLowerCase()).toEqual(testsUserQualificationState.toLowerCase());\n  });\n\n  test('All appointments in my-patients section has appropriate assign buttons', async ({ page }) => {\n    await page.goto(`telemed/appointments`);\n    await awaitAppointmentsTableToBeVisible(page);\n\n    const table = page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardTable).locator('table');\n    const allButtonsNames = (await table.getByRole('button').allTextContents()).join(', ');\n    expect(allButtonsNames).not.toEqual(new RegExp('View'));\n  });\n});\n\ntest.describe('Tests interacting with appointment state', () => {\n  test.describe.configure({ mode: 'serial' });\n  const PROCESS_ID = `telemedEhrFlow.spec.ts-appointment-state-${DateTime.now().toMillis()}`;\n  const resourceHandler = new ResourceHandler(\n    PROCESS_ID,\n    'telemed',\n    async ({ patientInfo, appointmentId, authToken, zambdaUrl, projectId }) => {\n      const patientConditionPhotosStepAnswers = await getPatientConditionPhotosStepAnswers({\n        appointmentId,\n        authToken,\n        zambdaUrl,\n        projectId,\n        fileName: 'Landscape_1.jpg',\n      });\n      return [\n        getContactInformationAnswers({\n          firstName: patientInfo.firstName,\n          lastName: patientInfo.lastName,\n          birthDate: isoToDateObject(patientInfo.dateOfBirth || '') || undefined,\n          email: patientInfo.email,\n          phoneNumber: patientInfo.phoneNumber,\n          birthSex: patientInfo.sex,\n        }),\n        getPatientDetailsStepAnswers({}),\n        getMedicationsStepAnswers(),\n        getAllergiesStepAnswers(),\n        getMedicalConditionsStepAnswers(),\n        getSurgicalHistoryStepAnswers(),\n        getAdditionalQuestionsAnswers(),\n        getPaymentOptionSelfPayAnswers(),\n        getResponsiblePartyStepAnswers({}),\n        getSchoolWorkNoteStepAnswers(),\n        getConsentStepAnswers({}),\n        getInviteParticipantStepAnswers(),\n        patientConditionPhotosStepAnswers,\n      ];\n    }\n  );\n  let context: BrowserContext;\n  let page: Page;\n\n  test.beforeAll(async ({ browser }) => {\n    context = await browser.newContext();\n    page = await context.newPage();\n\n    await resourceHandler.setResources();\n  });\n\n  test.afterAll(async () => {\n    await resourceHandler.cleanupResources();\n    await context.close();\n    await page.close();\n  });\n\n  test('Appointment is present in tracking board, can be assigned and connection to patient is happening', async () => {\n    await page.goto(`telemed/appointments`);\n    await awaitAppointmentsTableToBeVisible(page);\n\n    await test.step('Find and assign my appointment', async () => {\n      const table = page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardTable).locator('table');\n\n      const appointmentRow = table.locator('tbody tr').filter({ hasText: resourceHandler.appointment?.id });\n\n      await expect(\n        appointmentRow.filter({ has: page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardAssignButton) })\n      ).toBeVisible(DEFAULT_TIMEOUT);\n\n      await appointmentRow.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardAssignButton).click(DEFAULT_TIMEOUT);\n    });\n\n    await telemedDialogConfirm(page);\n\n    await test.step('Appointment has connect-to-patient button', async () => {\n      const statusChip = page.getByTestId(dataTestIds.telemedEhrFlow.appointmentStatusChip);\n      await expect(statusChip).toBeVisible(DEFAULT_TIMEOUT);\n      await expect(statusChip).toHaveText(TelemedAppointmentStatusEnum['pre-video']);\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonConnectToPatient)).toBeVisible(\n        DEFAULT_TIMEOUT\n      );\n    });\n  });\n\n  test('Buttons on visit page should appear, in assigned appointment', async () => {\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonConnectToPatient)).toBeVisible();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonUnassign)).toBeVisible();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.cancelThisVisitButton)).toBeVisible();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.inviteParticipant)).toBeVisible();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.editPatientButtonSideBar)).toBeVisible();\n  });\n\n  test('Assigned appointment should be in \"provider\" tab', async () => {\n    await page.goto(`telemed/appointments`);\n    await awaitAppointmentsTableToBeVisible(page);\n\n    await page.getByTestId(dataTestIds.telemedEhrFlow.telemedAppointmentsTabs(ApptTelemedTab.provider)).click();\n    await awaitAppointmentsTableToBeVisible(page);\n    await expect(\n      page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardTableRow(resourceHandler.appointment.id!))\n    ).toBeVisible();\n  });\n\n  test('Unassign appointment, and check in \"Ready for provider\"', async () => {\n    await page.goto(`telemed/appointments/${resourceHandler.appointment.id}`);\n\n    await page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonUnassign).click();\n    await telemedDialogConfirm(page);\n    await awaitAppointmentsTableToBeVisible(page);\n    await expect(\n      page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardTableRow(resourceHandler.appointment.id!))\n    ).toBeVisible();\n  });\n\n  test.skip('Check message for patient', { tag: '@flaky' }, async () => {\n    await page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardChatButton(resourceHandler.appointment.id!)).click();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.chatModalDescription)).toBeVisible();\n\n    const expectedSms =\n      'Thank you for your patience. We apologize, but the provider is unexpectedly no longer available. You will receive an update when another provider is available';\n    await expect(page.getByText(expectedSms).first()).toBeVisible({ timeout: 25000 });\n  });\n\n  test('Buttons on visit page should not appear', async () => {\n    await page.goto(`telemed/appointments/${resourceHandler.appointment.id}`);\n\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonConnectToPatient)).not.toBeVisible();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonUnassign)).not.toBeVisible();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.cancelThisVisitButton)).not.toBeVisible();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.inviteParticipant)).not.toBeVisible();\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.editPatientButtonSideBar)).not.toBeVisible();\n  });\n\n  test('Assign my appointment back', async () => {\n    await assignAppointmentIfNotYetAssignedToMeAndVerifyPreVideo(page, { forceWaitForAssignButton: true });\n  });\n\n  test('Patient provided hpi data', async () => {\n    await test.step('Medical conditions provided by patient', async () => {\n      await expect(\n        page.getByTestId(dataTestIds.telemedEhrFlow.hpiMedicalConditionPatientProvidedList).getByText('Constipation')\n      ).toBeVisible();\n    });\n\n    await test.step('Current medications provided by patient', async () => {\n      const list = page.getByTestId(dataTestIds.telemedEhrFlow.hpiCurrentMedicationsPatientProvidedList);\n      await expect(list.getByText('Amoxicillin')).toBeVisible();\n      // cSpell:disable-next Cetirizine\n      await expect(list.getByText('Cetirizine/ Zyrtec')).toBeVisible();\n    });\n\n    await test.step('Known allergies provided by patient', async () => {\n      const list = page.getByTestId(dataTestIds.telemedEhrFlow.hpiKnownAllergiesPatientProvidedList);\n      // cSpell:disable-next Azithromycin\n      await expect(list.getByText('Azithromycin (medication)')).toBeVisible();\n      await expect(list.getByText('Fish/ Fish Oil (other)')).toBeVisible();\n    });\n\n    await test.step('Surgical history provided by patient', async () => {\n      const list = page.getByTestId(dataTestIds.telemedEhrFlow.hpiSurgicalHistoryPatientProvidedList);\n      await expect(list.getByText('Circumcision')).toBeVisible();\n      // cSpell:disable-next Myringotomy\n      await expect(list.getByText('Ear tube placement (Myringotomy)')).toBeVisible();\n    });\n\n    await test.step('Additional questions provided by patient', async () => {\n      await expect(\n        page\n          .getByTestId(\n            dataTestIds.telemedEhrFlow.hpiAdditionalQuestionsPatientProvided(\n              AdditionalBooleanQuestionsFieldsNames.CovidSymptoms\n            )\n          )\n          .getByText('No')\n      ).toBeVisible();\n      await expect(\n        page\n          .getByTestId(\n            dataTestIds.telemedEhrFlow.hpiAdditionalQuestionsPatientProvided(\n              AdditionalBooleanQuestionsFieldsNames.TestedPositiveCovid\n            )\n          )\n          .getByText('Yes')\n      ).toBeVisible();\n      await expect(\n        page\n          .getByTestId(\n            dataTestIds.telemedEhrFlow.hpiAdditionalQuestionsPatientProvided(\n              AdditionalBooleanQuestionsFieldsNames.TravelUsa\n            )\n          )\n          .getByText('No')\n      ).toBeVisible();\n    });\n\n    await test.step('Reason for visit provided by patient', async () => {\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.hpiReasonForVisit)).toHaveText(\n        resourceHandler.appointment.description ?? ''\n      );\n    });\n\n    await test.step('Condition photo provided by patient', async () => {\n      const block = page.getByTestId(dataTestIds.telemedEhrFlow.hpiPatientConditionPhotos);\n      const image = block.locator('img');\n      await expect(image).toHaveCount(1);\n      const imageSrc = await image.getAttribute('src');\n      expect(imageSrc).toContain(resourceHandler.patient.id);\n      await image.click();\n\n      const zoomedImage = page.locator(\"div[role='dialog'] img[alt='Patient condition photo #1']\");\n      await expect(zoomedImage).toBeVisible();\n    });\n  });\n\n  test('Should test appointment hpi fields', async () => {\n    const medicalConditionsPattern = 'Z3A';\n    // cSpell:disable-next undecenal\n    // const knownAllergyPattern = '10-undecenal';\n    const surgicalHistoryPattern = '44950';\n    const surgicalNote = 'surgical note';\n    const chiefComplaintNotes = 'chief complaint';\n    const chiefComplaintRos = 'chief ros';\n\n    await page.goto(`telemed/appointments/${resourceHandler.appointment.id}`);\n\n    await test.step('await until hpi fields are ready', async () => {\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.hpiMedicalConditionsInput)).toBeVisible();\n      await expect(\n        page\n          .getByTestId(dataTestIds.telemedEhrFlow.hpiMedicalConditionColumn)\n          .getByTestId(dataTestIds.telemedEhrFlow.hpiFieldListLoadingSkeleton)\n          .first()\n      ).not.toBeVisible();\n    });\n\n    await test.step('filling up all editable fields', async () => {\n      await fillWaitAndSelectDropdown(\n        page,\n        dataTestIds.telemedEhrFlow.hpiMedicalConditionsInput,\n        medicalConditionsPattern\n      );\n\n      // TODO: uncomment when erx is enabled\n      // await fillWaitAndSelectDropdown(page, dataTestIds.telemedEhrFlow.hpiKnownAllergiesInput, knownAllergyPattern);\n\n      await fillWaitAndSelectDropdown(page, dataTestIds.telemedEhrFlow.hpiSurgicalHistoryInput, surgicalHistoryPattern);\n\n      await page\n        .getByTestId(dataTestIds.telemedEhrFlow.hpiSurgicalHistoryNote)\n        .locator('textarea')\n        .first()\n        .fill(surgicalNote);\n\n      for (const question of ADDITIONAL_QUESTIONS) {\n        // HERE WE TAKE ALL QUESTIONS ROWS AND SELECT TRUE LABELED RADIO BUTTON\n        await page\n          .getByTestId(dataTestIds.telemedEhrFlow.hpiAdditionalQuestions(question.field))\n          .locator('input[type=\"radio\"][value=\"true\"]')\n          .click();\n      }\n\n      for (const question of ADDITIONAL_QUESTIONS) {\n        await expect(\n          page\n            .getByTestId(dataTestIds.telemedEhrFlow.hpiAdditionalQuestions(question.field))\n            .locator('input[type=\"radio\"][value=\"true\"]')\n        ).toBeEnabled();\n      }\n\n      const chiefComplaintResponsePromise = waitForSaveChartDataResponse(\n        page,\n        (json) => !!json.chartData.chiefComplaint?.resourceId\n      );\n      const rosResponsePromise = waitForSaveChartDataResponse(page, (json) => !!json.chartData.ros?.resourceId);\n\n      await page\n        .getByTestId(dataTestIds.telemedEhrFlow.hpiChiefComplaintNotes)\n        .locator('textarea')\n        .first()\n        .fill(chiefComplaintNotes);\n      await page\n        .getByTestId(dataTestIds.telemedEhrFlow.hpiChiefComplaintRos)\n        .locator('textarea')\n        .first()\n        .fill(chiefComplaintRos);\n\n      await chiefComplaintResponsePromise;\n      await rosResponsePromise;\n    });\n\n    await test.step('reload and wait until data is loaded', async () => {\n      await page.reload();\n      await page.goto(`telemed/appointments/${resourceHandler.appointment.id}`);\n      await expect(\n        page\n          .getByTestId(dataTestIds.telemedEhrFlow.hpiMedicalConditionColumn)\n          .getByTestId(dataTestIds.telemedEhrFlow.hpiFieldListLoadingSkeleton)\n          .first()\n      ).not.toBeVisible();\n    });\n\n    await test.step('check medical conditions list', async () => {\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.hpiMedicalConditionsList)).toBeVisible();\n      await expect(page.getByTestId(dataTestIds.telemedEhrFlow.hpiMedicalConditionsList)).toHaveText(\n        RegExp(medicalConditionsPattern)\n      );\n    });\n\n    // TODO: uncomment when erx is enabled\n    // await test.step('check known allergies list', async () => {\n    //   await expect(page.getByTestId(dataTestIds.telemedEhrFlow.hpiKnownAllergiesList)).toBeVisible();\n    //   await expect(page.getByTestId(dataTestIds.telemedEhrFlow.hpiKnownAllergiesList)).toHaveText(\n    //     RegExp(knownAllergyPattern)\n    //   );\n    // });\n\n    await test.step('check surgical history list and note', async () => {\n      await expect(\n        page.getByTestId(dataTestIds.telemedEhrFlow.hpiSurgicalHistoryNote).locator('textarea').first()\n      ).toHaveText(surgicalNote);\n    });\n\n    await test.step('check additional questions', async () => {\n      for (const question of ADDITIONAL_QUESTIONS) {\n        await expect(\n          page\n            .getByTestId(dataTestIds.telemedEhrFlow.hpiAdditionalQuestions(question.field))\n            .locator('input[value=true]')\n        ).toBeChecked();\n      }\n    });\n\n    await test.step('chief complaint notes and ros', async () => {\n      await expect(\n        page.getByTestId(dataTestIds.telemedEhrFlow.hpiChiefComplaintNotes).locator('textarea').first()\n      ).toHaveText(chiefComplaintNotes);\n      await expect(\n        page.getByTestId(dataTestIds.telemedEhrFlow.hpiChiefComplaintRos).locator('textarea').first()\n      ).toHaveText(chiefComplaintRos);\n    });\n  });\n\n  test('Should test connect to patient is working', async () => {\n    const connectButton = page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonConnectToPatient);\n    await expect(connectButton).toBeVisible(DEFAULT_TIMEOUT);\n    await connectButton.click(DEFAULT_TIMEOUT);\n\n    await telemedDialogConfirm(page);\n\n    await expect(page.getByTestId(dataTestIds.telemedEhrFlow.videoRoomContainer)).toBeVisible(DEFAULT_TIMEOUT);\n  });\n});\n\ntest.describe('Telemed appointment with two locations (physical and virtual)', () => {\n  test.describe('Tests not interacting with appointment state', () => {\n    const PROCESS_ID = `telemedEhrFlow.spec.ts-2-locs-no-appointment-state-${DateTime.now().toMillis()}`;\n    const resourceHandler = new ResourceHandler(PROCESS_ID, 'telemed');\n    let location: Location;\n    test.beforeAll(async () => {\n      location = await createAppointmentWithVirtualAndPhysicalLocations(resourceHandler);\n    });\n    test.afterAll(async () => {\n      await resourceHandler.cleanupResources();\n    });\n    test('Appointment is present in tracking board and searchable by location filter', async ({ page }) => {\n      await page.goto(`telemed/appointments`);\n      await awaitAppointmentsTableToBeVisible(page);\n      await page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardLocationsSelect).locator('input').click();\n      await page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardLocationsSelectOption(location.id!)).click();\n\n      await expect(\n        page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardTableRow(resourceHandler.appointment.id!))\n      ).toBeVisible(DEFAULT_TIMEOUT);\n    });\n  });\n\n  test.describe('Tests interacting with appointment state', () => {\n    const PROCESS_ID = `telemedEhrFlow.spec.ts-2-locs-appointment-state-${DateTime.now().toMillis()}`;\n    const resourceHandler = new ResourceHandler(PROCESS_ID, 'telemed');\n    test.beforeAll(async () => {\n      await createAppointmentWithVirtualAndPhysicalLocations(resourceHandler);\n    });\n\n    test.afterEach(async () => {\n      await resourceHandler.cleanupResources();\n    });\n\n    test('Appointment is present in tracking board, can be assigned and connection to patient is happening', async ({\n      page,\n    }) => {\n      await page.goto(`telemed/appointments`);\n      await awaitAppointmentsTableToBeVisible(page);\n\n      await test.step('Find and assign my appointment', async () => {\n        const table = page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardTable).locator('table');\n\n        const appointmentRow = table.locator('tbody tr').filter({ hasText: resourceHandler.appointment?.id ?? '' });\n\n        await expect(\n          appointmentRow.filter({ has: page.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardAssignButton) })\n        ).toBeVisible(DEFAULT_TIMEOUT);\n\n        await appointmentRow.getByTestId(dataTestIds.telemedEhrFlow.trackingBoardAssignButton).click(DEFAULT_TIMEOUT);\n      });\n\n      await telemedDialogConfirm(page);\n\n      await test.step('Appointment has connect-to-patient button', async () => {\n        const statusChip = page.getByTestId(dataTestIds.telemedEhrFlow.appointmentStatusChip);\n        await expect(statusChip).toBeVisible(DEFAULT_TIMEOUT);\n        // todo: is it ok to have check like this that rely on status text??\n        await expect(statusChip).toHaveText(TelemedAppointmentStatusEnum['pre-video']);\n        await expect(page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonConnectToPatient)).toBeVisible(\n          DEFAULT_TIMEOUT\n        );\n      });\n\n      await test.step('Connect to patient', async () => {\n        const connectButton = page.getByTestId(dataTestIds.telemedEhrFlow.footerButtonConnectToPatient);\n        await expect(connectButton).toBeVisible(DEFAULT_TIMEOUT);\n        await connectButton.click(DEFAULT_TIMEOUT);\n\n        await telemedDialogConfirm(page);\n\n        await expect(page.getByTestId(dataTestIds.telemedEhrFlow.videoRoomContainer)).toBeVisible(DEFAULT_TIMEOUT);\n      });\n    });\n  });\n});\n\nasync function createAppointmentWithVirtualAndPhysicalLocations(resourceHandler: ResourceHandler): Promise<Location> {\n  const oystehr = await ResourceHandler.getOystehr();\n  const [physicalLocation] = await Promise.all([\n    new Promise<Location>((resolve, reject) => {\n      oystehr.fhir\n        .search({\n          resourceType: 'Location',\n          params: [\n            {\n              name: '_count',\n              value: '1000',\n            },\n          ],\n        })\n        .then((locations) => {\n          const nonVirtualLocation = locations\n            .unbundle()\n            .filter((location) => location.resourceType === 'Location')\n            .find((location) => !isLocationVirtual(location as Location));\n          if (!nonVirtualLocation) {\n            throw new Error('No non-virtual location found');\n          }\n          resolve(nonVirtualLocation as Location);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    }),\n    await resourceHandler.setResources(),\n  ]);\n\n  await oystehr.fhir.patch({\n    resourceType: 'Appointment',\n    id: resourceHandler.appointment.id!,\n    operations: [\n      {\n        op: 'add',\n        path: '/participant/-',\n        value: <AppointmentParticipant>{\n          actor: {\n            reference: `Location/${physicalLocation.id}`,\n          },\n          status: 'accepted',\n        },\n      },\n    ],\n  });\n  return physicalLocation;\n}\n"]}