{"version":3,"file":"vite.config.js","sourceRoot":"","sources":["vite.config.ts"],"names":[],"mappings":"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","sourcesContent":["import { sentryVitePlugin } from '@sentry/vite-plugin';\nimport react from '@vitejs/plugin-react';\nimport browserslistToEsbuild from 'browserslist-to-esbuild';\nimport { existsSync } from 'fs';\nimport * as path from 'path';\nimport { defineConfig, loadEnv, UserConfig } from 'vite';\nimport svgr from 'vite-plugin-svgr';\nimport viteTsconfigPaths from 'vite-tsconfig-paths';\n\nexport default ({ mode }: { mode: string }): UserConfig => {\n  const envDir = './env';\n  const env = loadEnv(mode, path.join(process.cwd(), envDir), '');\n\n  const plugins = [react(), viteTsconfigPaths(), svgr()];\n\n  const shouldUploadSentrySourceMaps =\n    Boolean(env.SENTRY_AUTH_TOKEN) && Boolean(env.SENTRY_ORG) && Boolean(env.SENTRY_PROJECT);\n  console.log(shouldUploadSentrySourceMaps ? 'Configuring SentryVitePlugin' : 'skipping SentryVitePlugin');\n  if (shouldUploadSentrySourceMaps) {\n    plugins.push(\n      sentryVitePlugin({\n        authToken: env.SENTRY_AUTH_TOKEN,\n        org: env.SENTRY_ORG,\n        project: env.SENTRY_PROJECT,\n        sourcemaps: {\n          assets: ['./build/**/*'],\n        },\n      })\n    );\n  }\n  const tlsCertExists = existsSync(path.join(process.cwd(), envDir, 'cert.pem'));\n  const tlsKeyExists = existsSync(path.join(process.cwd(), envDir, 'key.pem'));\n  if (tlsCertExists && tlsKeyExists) {\n    console.log(`Found TLS certificate and key, serving in ${mode} over HTTPS`);\n  } else if (tlsCertExists && !tlsKeyExists) {\n    console.error(`Found TLS certificate but private key is missing, serving in ${mode} over HTTP`);\n  } else if (!tlsCertExists && tlsKeyExists) {\n    console.error(`Found TLS private key but certificate is missing, serving in ${mode} over HTTP`);\n  }\n\n  return defineConfig({\n    envDir: envDir,\n    publicDir: 'public',\n    plugins: plugins,\n    server: {\n      open: !process.env.VITE_NO_OPEN,\n      host: '0.0.0.0',\n      port: env.PORT ? parseInt(env.PORT) : undefined,\n      https:\n        tlsCertExists && tlsKeyExists\n          ? {\n              cert: './env/cert.pem',\n              key: './env/key.pem',\n            }\n          : undefined,\n    },\n    build: {\n      outDir: './build',\n      target: browserslistToEsbuild(),\n      sourcemap: true,\n    },\n    resolve: {\n      alias: {\n        '@ehrTheme': path.resolve(__dirname, env.THEME_PATH || 'src/themes/ottehr'),\n        '@ehrDefaultTheme': path.resolve(__dirname, 'src/themes/ottehr'),\n      },\n    },\n  });\n};\n"]}